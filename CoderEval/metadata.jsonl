{"namespace": "62e60f43d76274f8a4026e28", "namespace_real": "neo4j._codec.hydration.v1.temporal.hydrate_time", "type": "function", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_codec/hydration/v1/temporal.py", "ce_id": "62e60f43d76274f8a4026e28", "signature_position": [66, null], "body_position": [null, 82], "signature": "def hydrate_time(nanoseconds, tz=None):", "ground_truth": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\" Hydrator for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    from pytz import FixedOffset\n    seconds, nanoseconds = map(int, divmod(nanoseconds, 1000000000))\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes = map(int, divmod(minutes, 60))\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t\n    tz_offset_minutes, tz_offset_seconds = divmod(tz, 60)\n    zone = FixedOffset(tz_offset_minutes)\n    return zone.localize(t)", "requirement": {"Functionality": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "Arguments": ""}}
{"namespace": "62e60f3bd76274f8a4026e10", "namespace_real": "neo4j._codec.hydration.v1.temporal.dehydrate_timedelta", "type": "function", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_codec/hydration/v1/temporal.py", "ce_id": "62e60f3bd76274f8a4026e10", "signature_position": [196, null], "body_position": [null, 207], "signature": "def dehydrate_timedelta(value):", "ground_truth": "def dehydrate_timedelta(value):\n    \"\"\" Dehydrator for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)", "requirement": {"Functionality": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "Arguments": ""}}
{"namespace": "62e60f37d76274f8a4026dfd", "namespace_real": "neo4j._codec.hydration.v1.temporal.dehydrate_time", "type": "function", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_codec/hydration/v1/temporal.py", "ce_id": "62e60f37d76274f8a4026dfd", "signature_position": [85, null], "body_position": [null, 103], "signature": "def dehydrate_time(value):", "ground_truth": "def dehydrate_time(value):\n    \"\"\" Dehydrator for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    if isinstance(value, Time):\n        nanoseconds = value.ticks\n    elif isinstance(value, time):\n        nanoseconds = (3600000000000 * value.hour + 60000000000 * value.minute +\n                       1000000000 * value.second + 1000 * value.microsecond)\n    else:\n        raise TypeError(\"Value must be a neo4j.time.Time or a datetime.time\")\n    if value.tzinfo:\n        return Structure(b\"T\", nanoseconds,\n                         int(value.tzinfo.utcoffset(value).total_seconds()))\n    else:\n        return Structure(b\"t\", nanoseconds)", "requirement": {"Functionality": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "Arguments": ""}}
{"namespace": "62e60f33d76274f8a4026de9", "namespace_real": "neo4j._codec.hydration.v1.spatial.dehydrate_point", "type": "function", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_codec/hydration/v1/spatial.py", "ce_id": "62e60f33d76274f8a4026de9", "signature_position": [44, null], "body_position": [null, 57], "signature": "def dehydrate_point(value):", "ground_truth": "def dehydrate_point(value):\n    \"\"\" Dehydrator for Point data.\n\n    :param value:\n    :type value: Point\n    :return:\n    \"\"\"\n    dim = len(value)\n    if dim == 2:\n        return Structure(b\"X\", value.srid, *value)\n    elif dim == 3:\n        return Structure(b\"Y\", value.srid, *value)\n    else:\n        raise ValueError(\"Cannot dehydrate Point with %d dimensions\" % dim)", "requirement": {"Functionality": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "Arguments": ""}}
{"namespace": "62e60ed4d76274f8a4026da0", "namespace_real": "neo4j._data.keys", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_data.py", "ce_id": "62e60ed4d76274f8a4026da0", "signature_position": [184, null], "body_position": [null, 189], "signature": "def keys(self):", "ground_truth": "    def keys(self):\n        \"\"\" Return the keys of the record.\n\n        :return: list of key names\n        \"\"\"\n        return list(self.__keys)", "requirement": {"Functionality": "Return the keys of the record.\n\n:return: list of key names", "Arguments": ""}}
{"namespace": "62e60ecfd76274f8a4026d6a", "namespace_real": "neo4j._sync.io._bolt.protocol_handlers", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_sync/io/_bolt.py", "ce_id": "62e60ecfd76274f8a4026d6a", "signature_position": [179, null], "body_position": [null, 223], "signature": "@classmethod\ndef protocol_handlers(cls, protocol_version=None):", "ground_truth": "    @classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \"\"\" Return a dictionary of available Bolt protocol handlers,\n        keyed by version tuple. If an explicit protocol version is\n        provided, the dictionary will contain either zero or one items,\n        depending on whether that version is supported. If no protocol\n        version is provided, all available versions will be returned.\n\n        :param protocol_version: tuple identifying a specific protocol\n            version (e.g. (3, 5)) or None\n        :return: dictionary of version tuple to handler class for all\n            relevant and supported protocol versions\n        :raise TypeError: if protocol version is not passed in a tuple\n        \"\"\"\n\n        # Carry out Bolt subclass imports locally to avoid circular dependency issues.\n        from ._bolt3 import Bolt3\n        from ._bolt4 import (\n            Bolt4x1,\n            Bolt4x2,\n            Bolt4x3,\n            Bolt4x4,\n        )\n        from ._bolt5 import Bolt5x0\n\n        handlers = {\n            Bolt3.PROTOCOL_VERSION: Bolt3,\n            # 4.0 unsupported because no space left in the handshake\n            Bolt4x1.PROTOCOL_VERSION: Bolt4x1,\n            Bolt4x2.PROTOCOL_VERSION: Bolt4x2,\n            Bolt4x3.PROTOCOL_VERSION: Bolt4x3,\n            Bolt4x4.PROTOCOL_VERSION: Bolt4x4,\n            Bolt5x0.PROTOCOL_VERSION: Bolt5x0,\n        }\n\n        if protocol_version is None:\n            return handlers\n\n        if not isinstance(protocol_version, tuple):\n            raise TypeError(\"Protocol version must be specified as a tuple\")\n\n        if protocol_version in handlers:\n            return {protocol_version: handlers[protocol_version]}\n\n        return {}", "requirement": {"Functionality": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "Arguments": ""}}
{"namespace": "62e60e49d76274f8a4026d25", "namespace_real": "neo4j.work.query.unit_of_work", "type": "function", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/work/query.py", "ce_id": "62e60e49d76274f8a4026d25", "signature_position": [39, null], "body_position": [null, 79], "signature": "def unit_of_work(metadata=None, timeout=None):", "ground_truth": "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\n    For example, a timeout may be applied::\n\n        from neo4j import unit_of_work\n\n        @unit_of_work(timeout=100)\n        def count_people_tx(tx):\n            result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n            record = result.single()\n            return record[\"persons\"]\n\n    :param metadata:\n        a dictionary with metadata.\n        Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n        It will also get logged to the ``query.log``.\n        This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n    :type metadata: dict\n\n    :param timeout:\n        the transaction timeout in seconds.\n        Transactions that execute longer than the configured timeout will be terminated by the database.\n        This functionality allows to limit query/transaction execution time.\n        Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n        Value should not represent a negative duration.\n        A zero duration will make the transaction execute indefinitely.\n        None will use the default timeout configured in the database.\n    :type timeout: float or :const:`None`\n    \"\"\"\n\n    def wrapper(f):\n\n        def wrapped(*args, **kwargs):\n            return f(*args, **kwargs)\n\n        wrapped.metadata = metadata\n        wrapped.timeout = timeout\n        return wrapped\n\n    return wrapper", "requirement": {"Functionality": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "Arguments": ""}}
{"namespace": "62e60e05d76274f8a4026cfd", "namespace_real": "neo4j._data.index", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_data.py", "ce_id": "62e60e05d76274f8a4026cfd", "signature_position": [149, null], "body_position": [null, 166], "signature": "def index(self, key):", "ground_truth": "    def index(self, key):\n        \"\"\" Return the index of the given item.\n\n        :param key: a key\n        :return: index\n        :rtype: int\n        \"\"\"\n        if isinstance(key, int):\n            if 0 <= key < len(self.__keys):\n                return key\n            raise IndexError(key)\n        elif isinstance(key, str):\n            try:\n                return self.__keys.index(key)\n            except ValueError:\n                raise KeyError(key)\n        else:\n            raise TypeError(key)", "requirement": {"Functionality": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "Arguments": ""}}
{"namespace": "62e60da4d76274f8a4026cf1", "namespace_real": "neo4j._data.values", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_data.py", "ce_id": "62e60da4d76274f8a4026cf1", "signature_position": [191, null], "body_position": [null, 210], "signature": "def values(self, *keys):", "ground_truth": "    def values(self, *keys):\n        \"\"\" Return the values of the record, optionally filtering to\n        include only certain values by index or key.\n\n        :param keys: indexes or keys of the items to include; if none\n                     are provided, all values will be included\n        :return: list of values\n        :rtype: list\n        \"\"\"\n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append(None)\n                else:\n                    d.append(self[i])\n            return d\n        return list(self)", "requirement": {"Functionality": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "Arguments": ""}}
{"namespace": "62e60b10d76274f8a4026ccd", "namespace_real": "neo4j._data.data", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_data.py", "ce_id": "62e60b10d76274f8a4026ccd", "signature_position": [231, null], "body_position": [null, 243], "signature": "def data(self, *keys):", "ground_truth": "    def data(self, *keys):\n        \"\"\" Return the keys and values of this record as a dictionary,\n        optionally including only certain values by index or key. Keys\n        provided in the items that are not in the record will be\n        inserted with a value of :const:`None`; indexes provided\n        that are out of bounds will trigger an :exc:`IndexError`.\n\n        :param keys: indexes or keys of the items to include; if none\n                      are provided, all values will be included\n        :return: dictionary of values, keyed by field name\n        :raises: :exc:`IndexError` if an out-of-bounds index is specified\n        \"\"\"\n        return RecordExporter().transform(dict(self.items(*keys)))", "requirement": {"Functionality": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "Arguments": ""}}
{"namespace": "62e6087bd76274f8a4026bfa", "namespace_real": "neo4j._codec.packstream.v1.__init__.pop_u16", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_codec/packstream/v1/__init__.py", "ce_id": "62e6087bd76274f8a4026bfa", "signature_position": [453, null], "body_position": [null, 462], "signature": "def pop_u16(self):", "ground_truth": "    def pop_u16(self):\n        \"\"\" Remove the last two bytes of data, returning them as a big-endian\n        16-bit unsigned integer.\n        \"\"\"\n        if self.used >= 2:\n            value = 0x100 * self.data[self.used - 2] + self.data[self.used - 1]\n            self.used -= 2\n            return value\n        else:\n            return -1", "requirement": {"Functionality": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "Arguments": ""}}
{"namespace": "62e6087ad76274f8a4026bf2", "namespace_real": "neo4j._async.io._bolt3.discard", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_async/io/_bolt3.py", "ce_id": "62e6087ad76274f8a4026bf2", "signature_position": [246, null], "body_position": [null, 252], "signature": "def discard(self, n=-1, qid=-1, dehydration_hooks=None, hydration_hooks=None, **handlers):", "ground_truth": "    def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        # Just ignore n and qid, it is not supported in the Bolt 3 Protocol.\n        log.debug(\"[#%04X]  C: DISCARD_ALL\", self.local_port)\n        self._append(b\"\\x2F\", (),\n                     Response(self, \"discard\", hydration_hooks, **handlers),\n                     dehydration_hooks=dehydration_hooks)", "requirement": {"Functionality": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "Arguments": ""}}
{"namespace": "62e60879d76274f8a4026bec", "namespace_real": "neo4j._async.io._bolt3.begin", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_async/io/_bolt3.py", "ce_id": "62e60879d76274f8a4026bec", "signature_position": [262, null], "body_position": [null, 302], "signature": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None, db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None, **handlers):", "ground_truth": "    def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        if db is not None:\n            raise ConfigurationError(\n                \"Database name parameter for selecting database is not \"\n                \"supported in Bolt Protocol {!r}. Database name {!r}.\".format(\n                    self.PROTOCOL_VERSION, db\n                )\n            )\n        if imp_user is not None:\n            raise ConfigurationError(\n                \"Impersonation is not supported in Bolt Protocol {!r}. \"\n                \"Trying to impersonate {!r}.\".format(\n                    self.PROTOCOL_VERSION, imp_user\n                )\n            )\n        extra = {}\n        if mode in (READ_ACCESS, \"r\"):\n            extra[\"mode\"] = \"r\"  # It will default to mode \"w\" if nothing is specified\n        if bookmarks:\n            try:\n                extra[\"bookmarks\"] = list(bookmarks)\n            except TypeError:\n                raise TypeError(\"Bookmarks must be provided within an iterable\")\n        if metadata:\n            try:\n                extra[\"tx_metadata\"] = dict(metadata)\n            except TypeError:\n                raise TypeError(\"Metadata must be coercible to a dict\")\n        if timeout is not None:\n            try:\n                extra[\"tx_timeout\"] = int(1000 * float(timeout))\n            except TypeError:\n                raise TypeError(\"Timeout must be specified as a number of seconds\")\n            if extra[\"tx_timeout\"] < 0:\n                raise ValueError(\"Timeout must be a positive number or 0.\")\n        log.debug(\"[#%04X]  C: BEGIN %r\", self.local_port, extra)\n        self._append(b\"\\x11\", (extra,),\n                     Response(self, \"begin\", hydration_hooks, **handlers),\n                     dehydration_hooks=dehydration_hooks)", "requirement": {"Functionality": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "Arguments": ""}}
{"namespace": "62e60723d76274f8a4026b75", "namespace_real": "neo4j.time._arithmetic.round_half_to_even", "type": "function", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/time/_arithmetic.py", "ce_id": "62e60723d76274f8a4026b75", "signature_position": [95, null], "body_position": [null, 124], "signature": "def round_half_to_even(n):", "ground_truth": "def round_half_to_even(n):\n    \"\"\"\n\n        >>> round_half_to_even(3)\n        3\n        >>> round_half_to_even(3.2)\n        3\n        >>> round_half_to_even(3.5)\n        4\n        >>> round_half_to_even(3.7)\n        4\n        >>> round_half_to_even(4)\n        4\n        >>> round_half_to_even(4.2)\n        4\n        >>> round_half_to_even(4.5)\n        4\n        >>> round_half_to_even(4.7)\n        5\n\n    :param n:\n    :return:\n    \"\"\"\n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        up = int(n + 0.5)\n        down = int(n - 0.5)\n        return up if up % 2 == 0 else down\n    else:\n        return int(round(n))", "requirement": {"Functionality": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "Arguments": ""}}
{"namespace": "62e60707d76274f8a4026b69", "namespace_real": "neo4j._spatial.__init__.point_type", "type": "function", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_spatial/__init__.py", "ce_id": "62e60707d76274f8a4026b69", "signature_position": [70, null], "body_position": [null, 99], "signature": "def point_type(name, fields, srid_map):", "ground_truth": "def point_type(name, fields, srid_map):\n    \"\"\" Dynamically create a Point subclass.\n    \"\"\"\n\n    def srid(self):\n        try:\n            return srid_map[len(self)]\n        except KeyError:\n            return None\n\n    attributes = {\"srid\": property(srid)}\n\n    for index, subclass_field in enumerate(fields):\n\n        def accessor(self, i=index, f=subclass_field):\n            try:\n                return self[i]\n            except IndexError:\n                raise AttributeError(f)\n\n        for field_alias in {subclass_field, \"xyz\"[index]}:\n            attributes[field_alias] = property(accessor)\n\n    cls = type(name, (Point,), attributes)\n\n    with srid_table_lock:\n        for dim, srid in srid_map.items():\n            srid_table[srid] = (cls, dim)\n\n    return cls", "requirement": {"Functionality": "Dynamically create a Point subclass.", "Arguments": ""}}
{"namespace": "62e5dc9ed76274f8a4026b5b", "namespace_real": "neo4j._meta.deprecated", "type": "function", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_meta.py", "ce_id": "62e5dc9ed76274f8a4026b5b", "signature_position": [46, null], "body_position": [null, 72], "signature": "def deprecated(message):", "ground_truth": "def deprecated(message):\n    \"\"\" Decorator for deprecating functions and methods.\n\n    ::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass\n\n    \"\"\"\n    def decorator(f):\n        if asyncio.iscoroutinefunction(f):\n            @wraps(f)\n            async def inner(*args, **kwargs):\n                deprecation_warn(message, stack_level=2)\n                return await f(*args, **kwargs)\n\n            return inner\n        else:\n            @wraps(f)\n            def inner(*args, **kwargs):\n                deprecation_warn(message, stack_level=2)\n                return f(*args, **kwargs)\n\n            return inner\n\n    return decorator", "requirement": {"Functionality": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "Arguments": ""}}
{"namespace": "62e4fc3c85ea98643089041e", "namespace_real": "pre_commit.languages.r._inline_r_setup", "type": "function", "project_path": "pre-commit/pre-commit", "completion_path": "pre_commit/languages/r.py", "ce_id": "62e4fc3c85ea98643089041e", "signature_position": [155, null], "body_position": [null, 164], "signature": "def _inline_r_setup(code: str) -> str:", "ground_truth": "def _inline_r_setup(code: str) -> str:\n    \"\"\"\n    Some behaviour of R cannot be configured via env variables, but can\n    only be configured via R options once R has started. These are set here.\n    \"\"\"\n    with_option = f\"\"\"\\\n    options(install.packages.compile.from.source = \"never\")\n    {code}\n    \"\"\"\n    return with_option", "requirement": {"Functionality": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "Arguments": ""}}
{"namespace": "62e4fbda85ea986430890405", "namespace_real": "pre_commit.xargs.xargs", "type": "function", "project_path": "pre-commit/pre-commit", "completion_path": "pre_commit/xargs.py", "ce_id": "62e4fbda85ea986430890405", "signature_position": [116, null], "body_position": [null, 168], "signature": "def xargs(cmd: tuple[str, ...], varargs: Sequence[str], *, color: bool=False, target_concurrency: int=1, _max_length: int=_get_platform_max_length(), **kwargs: Any) -> tuple[int, bytes]:", "ground_truth": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \"\"\"A simplified implementation of xargs.\n\n    color: Make a pty if on a platform that supports it\n    target_concurrency: Target number of partitions to run concurrently\n    \"\"\"\n    cmd_fn = cmd_output_p if color else cmd_output_b\n    retcode = 0\n    stdout = b''\n\n    try:\n        cmd = parse_shebang.normalize_cmd(cmd)\n    except parse_shebang.ExecutableNotFoundError as e:\n        return e.to_output()[:2]\n\n    # on windows, batch files have a separate length limit than windows itself\n    if (\n            sys.platform == 'win32' and\n            cmd[0].lower().endswith(('.bat', '.cmd'))\n    ):  # pragma: win32 cover\n        # this is implementation details but the command gets translated into\n        # full/path/to/cmd.exe /c *cmd\n        cmd_exe = parse_shebang.find_executable('cmd.exe')\n        # 1024 is additionally subtracted to give headroom for further\n        # expansion inside the batch file\n        _max_length = 8192 - len(cmd_exe) - len(' /c ') - 1024\n\n    partitions = partition(cmd, varargs, target_concurrency, _max_length)\n\n    def run_cmd_partition(\n            run_cmd: tuple[str, ...],\n    ) -> tuple[int, bytes, bytes | None]:\n        return cmd_fn(\n            *run_cmd, retcode=None, stderr=subprocess.STDOUT, **kwargs,\n        )\n\n    threads = min(len(partitions), target_concurrency)\n    with _thread_mapper(threads) as thread_map:\n        results = thread_map(run_cmd_partition, partitions)\n\n        for proc_retcode, proc_out, _ in results:\n            retcode = max(retcode, proc_retcode)\n            stdout += proc_out\n\n    return retcode, stdout", "requirement": {"Functionality": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "Arguments": ""}}
{"namespace": "62e4fbda85ea986430890403", "namespace_real": "pre_commit.languages.helpers._shuffled", "type": "function", "project_path": "pre-commit/pre-commit", "completion_path": "pre_commit/languages/helpers.py", "ce_id": "62e4fbda85ea986430890403", "signature_position": [114, null], "body_position": [null, 121], "signature": "def _shuffled(seq: Sequence[str]) -> list[str]:", "ground_truth": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \"\"\"Deterministically shuffle\"\"\"\n    fixed_random = random.Random()\n    fixed_random.seed(FIXED_RANDOM_SEED, version=1)\n\n    seq = list(seq)\n    fixed_random.shuffle(seq)\n    return seq", "requirement": {"Functionality": "Deterministically shuffle", "Arguments": ""}}
{"namespace": "62e4fb6585ea98643089032b", "namespace_real": "pre_commit.util.parse_version", "type": "function", "project_path": "pre-commit/pre-commit", "completion_path": "pre_commit/util.py", "ce_id": "62e4fb6585ea98643089032b", "signature_position": [260, null], "body_position": [null, 262], "signature": "def parse_version(s: str) -> tuple[int, ...]:", "ground_truth": "def parse_version(s: str) -> tuple[int, ...]:\n    \"\"\"poor man's version comparison\"\"\"\n    return tuple(int(p) for p in s.split('.'))", "requirement": {"Functionality": "poor man's version comparison", "Arguments": ""}}
{"namespace": "62e4fb4d85ea9864308902e7", "namespace_real": "pre_commit.parse_shebang.normalize_cmd", "type": "function", "project_path": "pre-commit/pre-commit", "completion_path": "pre_commit/parse_shebang.py", "ce_id": "62e4fb4d85ea9864308902e7", "signature_position": [65, null], "body_position": [null, 81], "signature": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:", "ground_truth": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \"\"\"Fixes for the following issues on windows\n    - https://bugs.python.org/issue8557\n    - windows does not parse shebangs\n\n    This function also makes deep-path shebangs work just fine\n    \"\"\"\n    # Use PATH to determine the executable\n    exe = normexe(cmd[0])\n\n    # Figure out the shebang from the resulting command\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n\n    # This could have given us back another bare executable\n    exe = normexe(cmd[0])\n\n    return (exe,) + cmd[1:]", "requirement": {"Functionality": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "Arguments": ""}}
{"namespace": "62b8d27a48ba5a41d1c3f4c6", "namespace_real": "cachetools.decorators.cached", "type": "function", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/decorators.py", "ce_id": "62b8d27a48ba5a41d1c3f4c6", "signature_position": [6, null], "body_position": [null, 44], "signature": "def cached(cache, key=hashkey, lock=None):", "ground_truth": "def cached(cache, key=hashkey, lock=None):\n    \"\"\"Decorator to wrap a function with a memoizing callable that saves\n    results in a cache.\n\n    \"\"\"\n    def decorator(func):\n        if cache is None:\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n        elif lock is None:\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    pass  # key not found\n                v = func(*args, **kwargs)\n                try:\n                    cache[k] = v\n                except ValueError:\n                    pass  # value too large\n                return v\n        else:\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    with lock:\n                        return cache[k]\n                except KeyError:\n                    pass  # key not found\n                v = func(*args, **kwargs)\n                # in case of a race, prefer the item already in the cache\n                try:\n                    with lock:\n                        return cache.setdefault(k, v)\n                except ValueError:\n                    return v  # value too large\n        return functools.update_wrapper(wrapper, func)\n    return decorator", "requirement": {"Functionality": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "Arguments": ""}}
{"namespace": "62b8d24048ba5a41d1c3f49f", "namespace_real": "cachetools.func.ttl_cache", "type": "function", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/func.py", "ce_id": "62b8d24048ba5a41d1c3f49f", "signature_position": [166, null], "body_position": [null, 176], "signature": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):", "ground_truth": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"\"\"Decorator to wrap a function with a memoizing callable that saves\n    up to `maxsize` results based on a Least Recently Used (LRU)\n    algorithm with a per-item time-to-live (TTL) value.\n    \"\"\"\n    if maxsize is None:\n        return _cache(_UnboundTTLCache(ttl, timer), typed)\n    elif callable(maxsize):\n        return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n    else:\n        return _cache(TTLCache(maxsize, ttl, timer), typed)", "requirement": {"Functionality": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "Arguments": ""}}
{"namespace": "62b8d23b48ba5a41d1c3f49a", "namespace_real": "cachetools.func.mru_cache", "type": "function", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/func.py", "ce_id": "62b8d23b48ba5a41d1c3f49a", "signature_position": [139, null], "body_position": [null, 149], "signature": "def mru_cache(maxsize=128, typed=False):", "ground_truth": "def mru_cache(maxsize=128, typed=False):\n    \"\"\"Decorator to wrap a function with a memoizing callable that saves\n    up to `maxsize` results based on a Most Recently Used (MRU)\n    algorithm.\n    \"\"\"\n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)", "requirement": {"Functionality": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "Arguments": ""}}
{"namespace": "62b8d23948ba5a41d1c3f498", "namespace_real": "cachetools.func.lru_cache", "type": "function", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/func.py", "ce_id": "62b8d23948ba5a41d1c3f498", "signature_position": [125, null], "body_position": [null, 136], "signature": "def lru_cache(maxsize=128, typed=False):", "ground_truth": "def lru_cache(maxsize=128, typed=False):\n    \"\"\"Decorator to wrap a function with a memoizing callable that saves\n    up to `maxsize` results based on a Least Recently Used (LRU)\n    algorithm.\n\n    \"\"\"\n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache(maxsize), typed)", "requirement": {"Functionality": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "Arguments": ""}}
{"namespace": "62b8d23748ba5a41d1c3f496", "namespace_real": "cachetools.func.lfu_cache", "type": "function", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/func.py", "ce_id": "62b8d23748ba5a41d1c3f496", "signature_position": [111, null], "body_position": [null, 122], "signature": "def lfu_cache(maxsize=128, typed=False):", "ground_truth": "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"Decorator to wrap a function with a memoizing callable that saves\n    up to `maxsize` results based on a Least Frequently Used (LFU)\n    algorithm.\n\n    \"\"\"\n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LFUCache(128), typed)(maxsize)\n    else:\n        return _cache(LFUCache(maxsize), typed)", "requirement": {"Functionality": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "Arguments": ""}}
{"namespace": "62b8d22f48ba5a41d1c3f488", "namespace_real": "cachetools.fifo.popitem", "type": "class", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/fifo.py", "ce_id": "62b8d22f48ba5a41d1c3f488", "signature_position": [24, null], "body_position": [null, 31], "signature": "def popitem(self):", "ground_truth": "    def popitem(self):\n        \"\"\"Remove and return the `(key, value)` pair first inserted.\"\"\"\n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))", "requirement": {"Functionality": "Remove and return the `(key, value)` pair first inserted.", "Arguments": ""}}
{"namespace": "62b8d22a48ba5a41d1c3f47e", "namespace_real": "cachetools.cache.setdefault", "type": "class", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/cache.py", "ce_id": "62b8d22a48ba5a41d1c3f47e", "signature_position": [97, null], "body_position": [null, 102], "signature": "def setdefault(self, key, default=None):", "ground_truth": "    def setdefault(self, key, default=None):\n        if key in self:\n            value = self[key]\n        else:\n            self[key] = value = default\n        return value", "requirement": {"Functionality": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "Arguments": ""}}
{"namespace": "62b8d22948ba5a41d1c3f47c", "namespace_real": "cachetools.cache.get", "type": "class", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/cache.py", "ce_id": "62b8d22948ba5a41d1c3f47c", "signature_position": [81, null], "body_position": [null, 85], "signature": "def get(self, key, default=None):", "ground_truth": "    def get(self, key, default=None):\n        if key in self:\n            return self[key]\n        else:\n            return default", "requirement": {"Functionality": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "Arguments": ""}}
{"namespace": "62b8d22548ba5a41d1c3f472", "namespace_real": "cachetools.decorators.cachedmethod", "type": "function", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/decorators.py", "ce_id": "62b8d22548ba5a41d1c3f472", "signature_position": [47, null], "body_position": [null, 88], "signature": "def cachedmethod(cache, key=hashkey, lock=None):", "ground_truth": "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    \"\"\"\n    def decorator(method):\n        if lock is None:\n            def wrapper(self, *args, **kwargs):\n                c = cache(self)\n                if c is None:\n                    return method(self, *args, **kwargs)\n                k = key(*args, **kwargs)\n                try:\n                    return c[k]\n                except KeyError:\n                    pass  # key not found\n                v = method(self, *args, **kwargs)\n                try:\n                    c[k] = v\n                except ValueError:\n                    pass  # value too large\n                return v\n        else:\n            def wrapper(self, *args, **kwargs):\n                c = cache(self)\n                if c is None:\n                    return method(self, *args, **kwargs)\n                k = key(*args, **kwargs)\n                try:\n                    with lock(self):\n                        return c[k]\n                except KeyError:\n                    pass  # key not found\n                v = method(self, *args, **kwargs)\n                # in case of a race, prefer the item already in the cache\n                try:\n                    with lock(self):\n                        return c.setdefault(k, v)\n                except ValueError:\n                    return v  # value too large\n        return functools.update_wrapper(wrapper, method)\n    return decorator", "requirement": {"Functionality": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "Arguments": ""}}
{"namespace": "62b8c517e0d34b282c18122e", "namespace_real": "pysolbase.SolBase.extostr", "type": "class", "project_path": "champax/pysolbase", "completion_path": "pysolbase/SolBase.py", "ce_id": "62b8c517e0d34b282c18122e", "signature_position": [285, null], "body_position": [null, 381], "signature": "@classmethod\ndef extostr(cls, e, max_level=30, max_path_level=5):", "ground_truth": "    @classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \"\"\"\n        Format an exception.\n        :param e: Any exception instance.\n        :type e: Exception\n        :param max_level: Maximum call stack level (default 30)\n        :type max_level: int\n        :param max_path_level: Maximum path level (default 5)\n        :type max_path_level: int\n        :return The exception readable string\n        :rtype str\n        \"\"\"\n\n        # Go\n        list_frame = None\n        try:\n            out_buffer = \"\"\n\n            # Class type\n            out_buffer += \"e.cls:[{0}]\".format(e.__class__.__name__)\n\n            # To string\n            try:\n                ex_buf = str(e)\n            except UnicodeEncodeError:\n                ex_buf = repr(str(e))\n            except Exception as e:\n                logger.warning(\"Exception, e=%s\", e)\n                raise\n            out_buffer += \", e.bytes:[{0}]\".format(ex_buf)\n\n            # Traceback\n            si = sys.exc_info()\n\n            # Raw frame\n            # tuple : (file, lineno, method, code)\n            raw_frame = traceback.extract_tb(si[2])\n            raw_frame.reverse()\n\n            # Go to last tb_next\n            last_tb_next = None\n            cur_tb = si[2]\n            while cur_tb:\n                last_tb_next = cur_tb\n                cur_tb = cur_tb.tb_next\n\n            # Skip frame up to current raw frame count\n            list_frame = list()\n            cur_count = -1\n            skip_count = len(raw_frame)\n            if last_tb_next:\n                cur_frame = last_tb_next.tb_frame\n            else:\n                cur_frame = None\n            while cur_frame:\n                cur_count += 1\n                if cur_count < skip_count:\n                    cur_frame = cur_frame.f_back\n                else:\n                    # Need : tuple : (file, lineno, method, code)\n                    raw_frame.append((cur_frame.f_code.co_filename, cur_frame.f_lineno, cur_frame.f_code.co_name, \"\"))\n                    cur_frame = cur_frame.f_back\n\n            # Build it\n            cur_idx = 0\n            out_buffer += \", e.cs=[\"\n            for tu in raw_frame:\n                line = tu[1]\n                cur_file = tu[0]\n                method = tu[2]\n\n                # Handle max path level\n                ar_token = cur_file.rsplit(os.sep, max_path_level)\n                if len(ar_token) > max_path_level:\n                    # Remove head\n                    ar_token.pop(0)\n                    # Join\n                    cur_file = \"...\" + os.sep.join(ar_token)\n\n                # Format\n                out_buffer += \"in:{0}#{1}@{2} \".format(method, cur_file, line)\n\n                # Loop\n                cur_idx += 1\n                if cur_idx >= max_level:\n                    out_buffer += \"...\"\n                    break\n\n            # Close\n            out_buffer += \"]\"\n\n            # Ok\n            return out_buffer\n        finally:\n            if list_frame:\n                del list_frame", "requirement": {"Functionality": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "Arguments": ""}}
{"namespace": "62b8bbbfe0d34b282c181210", "namespace_real": "pysolbase.FileUtility.append_text_to_file", "type": "class", "project_path": "champax/pysolbase", "completion_path": "pysolbase/FileUtility.py", "ce_id": "62b8bbbfe0d34b282c181210", "signature_position": [232, null], "body_position": [null, 271], "signature": "@staticmethod\ndef append_text_to_file(file_name, text_buffer, encoding, overwrite=False):", "ground_truth": "    @staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \"\"\"\n        Write to the specified filename, the provided binary buffer\n        Create the file if required.\n        :param file_name:  File name.\n        :type file_name: str\n        :param text_buffer: Text buffer to write.\n        :type text_buffer: str\n        :param encoding: The encoding to use.\n        :type encoding: str\n        :param overwrite: If true, file is overwritten.\n        :type overwrite: bool\n        :return: The number of bytes written or lt 0 if error.\n        :rtype int\n        \"\"\"\n\n        # Go\n        rd = None\n        try:\n            # Open (text : open return a io.BufferedReader)\n            if not overwrite:\n                rd = codecs.open(file_name, \"a+\", encoding, \"strict\", -1)\n            else:\n                rd = codecs.open(file_name, \"w\", encoding, \"strict\", -1)\n\n            # Read everything\n            # CAUTION : 2.7 return None :(\n            return rd.write(text_buffer)\n        except IOError as e:\n            # Exception...\n            logger.warning(\"append_text_to_file : IOError, ex=%s\", SolBase.extostr(e))\n            return -1\n        except Exception as e:\n            logger.warning(\"append_text_to_file : Exception, ex=%s\", SolBase.extostr(e))\n            return -1\n        finally:\n            # Close if not None...\n            if rd:\n                rd.close()", "requirement": {"Functionality": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "Arguments": ""}}
{"namespace": "62b8bbbfe0d34b282c18120f", "namespace_real": "pysolbase.FileUtility.file_to_textbuffer", "type": "class", "project_path": "champax/pysolbase", "completion_path": "pysolbase/FileUtility.py", "ce_id": "62b8bbbfe0d34b282c18120f", "signature_position": [161, null], "body_position": [null, 197], "signature": "@staticmethod\ndef file_to_textbuffer(file_name, encoding):", "ground_truth": "    @staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \"\"\"\n        Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\n        CAUTION : This will read the whole file IN MEMORY.\n        :param file_name: File name.\n        :type file_name: str\n        :param encoding: Encoding to use.\n        :type encoding: str\n        :return: A text buffer or None in case of error.\n        :rtype str\n        \"\"\"\n\n        # Check\n        if not FileUtility.is_file_exist(file_name):\n            logger.warning(\"file_to_textbuffer : file_name not exist, file_name=%s\", file_name)\n            return None\n\n        # Go\n        rd = None\n        try:\n            # Open (text : open return a io.BufferedReader)\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)\n\n            # Read everything\n            return rd.read()\n        except IOError as e:\n            # Exception...\n            logger.warning(\"file_to_binary : IOError, ex=%s\", SolBase.extostr(e))\n            return None\n        except Exception as e:\n            logger.warning(\"file_to_binary : Exception, ex=%s\", SolBase.extostr(e))\n            return None\n        finally:\n            # Close if not None...\n            if rd:\n                rd.close()", "requirement": {"Functionality": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "Arguments": ""}}
{"namespace": "62b8bbbce0d34b282c18120d", "namespace_real": "pysolbase.FileUtility.is_file_exist", "type": "class", "project_path": "champax/pysolbase", "completion_path": "pysolbase/FileUtility.py", "ce_id": "62b8bbbce0d34b282c18120d", "signature_position": [60, null], "body_position": [null, 79], "signature": "@staticmethod\ndef is_file_exist(file_name):", "ground_truth": "    @staticmethod\n    def is_file_exist(file_name):\n        \"\"\"\n        Check if file name exist.\n        :param file_name: File name.\n        :type file_name: str\n        :return: Return true (exist), false (do not exist, or invalid file name)\n        :rtype bool\n        \"\"\"\n\n        # Check\n        if file_name is None:\n            logger.warning(\"is_file_exist : file_name is None\")\n            return False\n        elif not isinstance(file_name, str):\n            logger.warning(\"is_file_exist : file_name not a text_type, className=%s\", SolBase.get_classname(file_name))\n            return False\n\n        # Go\n        return os.path.isfile(file_name)", "requirement": {"Functionality": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "Arguments": ""}}
{"namespace": "62b8b99de0d34b282c1811f8", "namespace_real": "pysolbase.SolBase._reset_logging", "type": "class", "project_path": "champax/pysolbase", "completion_path": "pysolbase/SolBase.py", "ce_id": "62b8b99de0d34b282c1811f8", "signature_position": [596, null], "body_position": [null, 626], "signature": "@classmethod\ndef _reset_logging(cls):", "ground_truth": "    @classmethod\n    def _reset_logging(cls):\n        \"\"\"\n        Reset\n        \"\"\"\n\n        # Found no way to fully reset the logging stuff while running\n        # We reset root and all loggers to INFO, and kick handlers\n\n        # Initialize\n        root = logging.getLogger()\n        root.setLevel(logging.getLevelName(\"INFO\"))\n        for h in root.handlers:\n            # noinspection PyBroadException\n            try:\n                h.close()\n            except:\n                pass\n        root.handlers = []\n\n        # Browse all loggers and set\n        for name in logging.root.manager.loggerDict:\n            cur_logger = logging.getLogger(name)\n            cur_logger.setLevel(logging.getLevelName(\"INFO\"))\n            for h in cur_logger.handlers:\n                # noinspection PyBroadException\n                try:\n                    h.close()\n                except:\n                    pass\n            cur_logger.handlers = []", "requirement": {"Functionality": "Reset", "Arguments": ""}}
{"namespace": "62b8b59feb7e40a82d2d1291", "namespace_real": "src.zope.interface.tests.test_declarations._getTargetClass", "type": "class", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/tests/test_declarations.py", "ce_id": "62b8b59feb7e40a82d2d1291", "signature_position": [1893, null], "body_position": [null, 1895], "signature": "def _getTargetClass(self):", "ground_truth": "    def _getTargetClass(self):\n        from zope.interface.declarations import getObjectSpecification\n        return getObjectSpecification", "requirement": {"Functionality": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "Arguments": ""}}
{"namespace": "62b8b590eb7e40a82d2d1275", "namespace_real": "src.zope.interface.ro._legacy_mergeOrderings", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/ro.py", "ce_id": "62b8b590eb7e40a82d2d1275", "signature_position": [78, null], "body_position": [null, 105], "signature": "def _legacy_mergeOrderings(orderings):", "ground_truth": "def _legacy_mergeOrderings(orderings):\n    \"\"\"Merge multiple orderings so that within-ordering order is preserved\n\n    Orderings are constrained in such a way that if an object appears\n    in two or more orderings, then the suffix that begins with the\n    object must be in both orderings.\n\n    For example:\n\n    >>> _mergeOrderings([\n    ... ['x', 'y', 'z'],\n    ... ['q', 'z'],\n    ... [1, 3, 5],\n    ... ['z']\n    ... ])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n\n    \"\"\"\n\n    seen = set()\n    result = []\n    for ordering in reversed(orderings):\n        for o in reversed(ordering):\n            if o not in seen:\n                seen.add(o)\n                result.insert(0, o)\n\n    return result", "requirement": {"Functionality": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "Arguments": ""}}
{"namespace": "62b8b58deb7e40a82d2d1269", "namespace_real": "src.zope.interface.declarations.directlyProvidedBy", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/declarations.py", "ce_id": "62b8b58deb7e40a82d2d1269", "signature_position": [909, null], "body_position": [null, 925], "signature": "def directlyProvidedBy(object):", "ground_truth": "def directlyProvidedBy(object): # pylint:disable=redefined-builtin\n    \"\"\"Return the interfaces directly provided by the given object\n\n    The value returned is an `~zope.interface.interfaces.IDeclaration`.\n    \"\"\"\n    provides = getattr(object, \"__provides__\", None)\n    if (\n            provides is None # no spec\n            # We might have gotten the implements spec, as an\n            # optimization. If so, it's like having only one base, that we\n            # lop off to exclude class-supplied declarations:\n            or isinstance(provides, Implements)\n    ):\n        return _empty\n\n    # Strip off the class part of the spec:\n    return Declaration(provides.__bases__[:-1])", "requirement": {"Functionality": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "Arguments": ""}}
{"namespace": "62b8b559eb7e40a82d2d11f8", "namespace_real": "src.zope.interface.advice.minimalBases", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/advice.py", "ce_id": "62b8b559eb7e40a82d2d11f8", "signature_position": [196, null], "body_position": [null, 213], "signature": "def minimalBases(classes):", "ground_truth": "def minimalBases(classes):\n    \"\"\"Reduce a list of base classes to its ordered minimum equivalent\"\"\"\n\n    if not __python3: # pragma: no cover\n        classes = [c for c in classes if c is not ClassType]\n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n,m) and m is not n:\n                break\n        else:\n            # m has no subclasses in 'classes'\n            if m in candidates:\n                candidates.remove(m)    # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates", "requirement": {"Functionality": "Reduce a list of base classes to its ordered minimum equivalent", "Arguments": ""}}
{"namespace": "62b8b4b9eb7e40a82d2d1134", "namespace_real": "src.zope.interface.interface.namesAndDescriptions", "type": "class", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/interface.py", "ce_id": "62b8b4b9eb7e40a82d2d1134", "signature_position": [846, null], "body_position": [null, 857], "signature": "def namesAndDescriptions(self, all=False):", "ground_truth": "    def namesAndDescriptions(self, all=False): # pylint:disable=redefined-builtin\n        \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n        if not all:\n            return self.__attrs.items()\n\n        r = {}\n        for base in self.__bases__[::-1]:\n            r.update(dict(base.namesAndDescriptions(all)))\n\n        r.update(self.__attrs)\n\n        return r.items()", "requirement": {"Functionality": "Return attribute names and descriptions defined by interface.", "Arguments": ""}}
{"namespace": "62b8b416eb7e40a82d2d1129", "namespace_real": "src.zope.interface.interface.names", "type": "class", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/interface.py", "ce_id": "62b8b416eb7e40a82d2d1129", "signature_position": [831, null], "body_position": [null, 841], "signature": "def names(self, all=False):", "ground_truth": "    def names(self, all=False): # pylint:disable=redefined-builtin\n        \"\"\"Return the attribute names defined by the interface.\"\"\"\n        if not all:\n            return self.__attrs.keys()\n\n        r = self.__attrs.copy()\n\n        for base in self.__bases__:\n            r.update(dict.fromkeys(base.names(all)))\n\n        return r.keys()", "requirement": {"Functionality": "Return the attribute names defined by the interface.", "Arguments": ""}}
{"namespace": "62b8b3d6eb7e40a82d2d111c", "namespace_real": "src.zope.interface.declarations._normalizeargs", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/declarations.py", "ce_id": "62b8b3d6eb7e40a82d2d111c", "signature_position": [1154, null], "body_position": [null, 1172], "signature": "def _normalizeargs(sequence, output=None):", "ground_truth": "def _normalizeargs(sequence, output=None):\n    \"\"\"Normalize declaration arguments\n\n    Normalization arguments might contain Declarions, tuples, or single\n    interfaces.\n\n    Anything but individial interfaces or implements specs will be expanded.\n    \"\"\"\n    if output is None:\n        output = []\n\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n\n    return output", "requirement": {"Functionality": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "Arguments": ""}}
{"namespace": "62b8b3d5eb7e40a82d2d1110", "namespace_real": "src.zope.interface._compat._c_optimizations_available", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/_compat.py", "ce_id": "62b8b3d5eb7e40a82d2d1110", "signature_position": [81, null], "body_position": [null, 96], "signature": "def _c_optimizations_available():", "ground_truth": "def _c_optimizations_available():\n    \"\"\"\n    Return the C optimization module, if available, otherwise\n    a false value.\n\n    If the optimizations are required but not available, this\n    raises the ImportError.\n\n    This does not say whether they should be used or not.\n    \"\"\"\n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False", "requirement": {"Functionality": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "Arguments": ""}}
{"namespace": "62b8b3d4eb7e40a82d2d110f", "namespace_real": "src.zope.interface._compat._should_attempt_c_optimizations", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/_compat.py", "ce_id": "62b8b3d4eb7e40a82d2d110f", "signature_position": [107, null], "body_position": [null, 120], "signature": "def _should_attempt_c_optimizations():", "ground_truth": "def _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we should attempt to use the C optimizations.\n\n    This takes into account whether we're on PyPy and the value of the\n    ``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.\n    \"\"\"\n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored()", "requirement": {"Functionality": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "Arguments": ""}}
{"namespace": "62b8b3d4eb7e40a82d2d110e", "namespace_real": "src.zope.interface._compat._c_optimizations_ignored", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/_compat.py", "ce_id": "62b8b3d4eb7e40a82d2d110e", "signature_position": [99, null], "body_position": [null, 104], "signature": "def _c_optimizations_ignored():", "ground_truth": "def _c_optimizations_ignored():\n    \"\"\"\n    The opposite of `_c_optimizations_required`.\n    \"\"\"\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env != \"0\"", "requirement": {"Functionality": "The opposite of `_c_optimizations_required`.", "Arguments": ""}}
{"namespace": "62b8b3d4eb7e40a82d2d110d", "namespace_real": "src.zope.interface._compat._c_optimizations_required", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/_compat.py", "ce_id": "62b8b3d4eb7e40a82d2d110d", "signature_position": [70, null], "body_position": [null, 78], "signature": "def _c_optimizations_required():", "ground_truth": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n\n    This uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.\n    \"\"\"\n    pure_env = os.environ.get('PURE_PYTHON')\n    require_c = pure_env == \"0\"\n    return require_c", "requirement": {"Functionality": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "Arguments": ""}}
{"namespace": "62b87b989a0c4fa8b80b35ee", "namespace_real": "lena.structures.histogram.reset", "type": "class", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/histogram.py", "ce_id": "62b87b989a0c4fa8b80b35ee", "signature_position": [296, null], "body_position": [null, 310], "signature": "def reset(self):", "ground_truth": "    def reset(self):\n        \"\"\"Reset the histogram.\n\n        Current context is reset to an empty dict.\n        Bins are reinitialized with the *initial_value*\n        or with *make_bins()* (depending on the initialization).\n        \"\"\"\n        if self._make_bins is not None:\n            self.bins = self._make_bins()\n        elif self._initial_bins is not None:\n            self.bins = copy.deepcopy(self._initial_bins)\n        else:\n            self.bins = hf.init_bins(self.edges, self._initial_value)\n\n        self._cur_context = {}", "requirement": {"Functionality": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "Arguments": ""}}
{"namespace": "62b87b859a0c4fa8b80b35d7", "namespace_real": "lena.structures.graph.to_csv", "type": "class", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/graph.py", "ce_id": "62b87b859a0c4fa8b80b35d7", "signature_position": [552, null], "body_position": [null, 596], "signature": "def to_csv(self, separator=',', header=None):", "ground_truth": "    def to_csv(self, separator=\",\", header=None):\n        \"\"\".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n              Iterables are converted to tables.\n\n        Convert graph's points to CSV.\n\n        *separator* delimits values, the default is comma.\n\n        *header*, if not ``None``, is the first string of the output\n        (new line is added automatically).\n\n        Since a graph can be multidimensional,\n        for each point first its coordinate is converted to string\n        (separated by *separator*), then each part of its value.\n\n        To convert :class:`Graph` to CSV inside a Lena sequence,\n        use :class:`lena.output.ToCSV`.\n        \"\"\"\n        if self._sort:\n            self._update()\n\n        def unpack_pt(pt):\n            coord = pt[0]\n            value = pt[1]\n            if isinstance(coord, tuple):\n                unpacked = list(coord)\n            else:\n                unpacked = [coord]\n            if isinstance(value, tuple):\n                unpacked += list(value)\n            else:\n                unpacked.append(value)\n            return unpacked\n\n        def pt_to_str(pt, separ):\n            return separ.join([str(val) for val in unpack_pt(pt)])\n\n        if header is not None:\n            # if one needs an empty header line, they may provide \"\"\n            lines = header + \"\\n\"\n        else:\n            lines = \"\"\n        lines += \"\\n\".join([pt_to_str(pt, separator) for pt in self.points])\n\n        return lines", "requirement": {"Functionality": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "Arguments": ""}}
{"namespace": "62b87b839a0c4fa8b80b35cb", "namespace_real": "lena.structures.graph._get_err_indices", "type": "class", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/graph.py", "ce_id": "62b87b839a0c4fa8b80b35cb", "signature_position": [173, null], "body_position": [null, 180], "signature": "def _get_err_indices(self, coord_name):", "ground_truth": "    def _get_err_indices(self, coord_name):\n        \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n        err_indices = []\n        dim = self.dim\n        for ind, err in enumerate(self._parsed_error_names):\n            if err[1] == coord_name:\n                err_indices.append(ind+dim)\n        return err_indices", "requirement": {"Functionality": "Get error indices corresponding to a coordinate.", "Arguments": ""}}
{"namespace": "62b87b7e9a0c4fa8b80b35bc", "namespace_real": "lena.structures.graph._update_context", "type": "class", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/graph.py", "ce_id": "62b87b7e9a0c4fa8b80b35bc", "signature_position": [315, null], "body_position": [null, 359], "signature": "def _update_context(self, context):", "ground_truth": "    def _update_context(self, context):\n        \"\"\"Update *context* with the properties of this graph.\n\n        *context.error* is appended with indices of errors.\n        Example subcontext for a graph with fields \"E,t,error_E_low\":\n        {\"error\": {\"x_low\": {\"index\": 2}}}.\n        Note that error names are called \"x\", \"y\" and \"z\"\n        (this corresponds to first three coordinates,\n        if they are present), which allows to simplify plotting.\n        Existing values are not removed\n        from *context.value* and its subcontexts.\n\n        Called on \"destruction\" of the graph (for example,\n        in :class:`.ToCSV`). By destruction we mean conversion\n        to another structure (like text) in the flow.\n        The graph object is not really destroyed in this process.\n        \"\"\"\n        # this method is private, because we encourage users to yield\n        # graphs into the flow and process them with ToCSV element\n        # (not manually).\n\n        if not self._parsed_error_names:\n            # no error fields present\n            return\n\n        dim = self.dim\n\n        xyz_coord_names = self._coord_names[:3]\n        for name, coord_name in zip([\"x\", \"y\", \"z\"], xyz_coord_names):\n            for err in self._parsed_error_names:\n                if err[1] == coord_name:\n                    error_ind = err[3]\n                    if err[2]:\n                        # add error suffix\n                        error_name = name + \"_\" + err[2]\n                    else:\n                        error_name = name\n                    lena.context.update_recursively(\n                        context,\n                        \"error.{}.index\".format(error_name),\n                        # error can correspond both to variable and\n                        # value, so we put it outside value.\n                        # \"value.error.{}.index\".format(error_name),\n                        error_ind\n                    )", "requirement": {"Functionality": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "Arguments": ""}}
{"namespace": "62b87b4f9a0c4fa8b80b3580", "namespace_real": "lena.structures.hist_functions.integral", "type": "function", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/hist_functions.py", "ce_id": "62b87b4f9a0c4fa8b80b3580", "signature_position": [438, null], "body_position": [null, 455], "signature": "def integral(bins, edges):", "ground_truth": "def integral(bins, edges):\n    \"\"\"Compute integral (scale for a histogram).\n\n    *bins* contain values, and *edges* form the mesh\n    for the integration.\n    Their format is defined in :class:`.histogram` description.\n    \"\"\"\n    total = 0\n    for ind, bin_content in iter_bins(bins):\n        bin_lengths = [\n            edges[coord][i+1] - edges[coord][i]\n            for coord, i in enumerate(ind)\n        ]\n        # product\n        vol = _reduce(operator.mul, bin_lengths, 1)\n        cell_integral = vol * bin_content\n        total += cell_integral\n    return total", "requirement": {"Functionality": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "Arguments": ""}}
{"namespace": "62b87b199a0c4fa8b80b354e", "namespace_real": "lena.core.check_sequence_type.is_fill_request_seq", "type": "function", "project_path": "ynikitenko/lena", "completion_path": "lena/core/check_sequence_type.py", "ce_id": "62b87b199a0c4fa8b80b354e", "signature_position": [40, null], "body_position": [null, 54], "signature": "def is_fill_request_seq(seq):", "ground_truth": "def is_fill_request_seq(seq):\n    \"\"\"Test whether *seq* can be converted to a FillRequestSeq.\n\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    \"\"\"\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq", "requirement": {"Functionality": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "Arguments": ""}}
{"namespace": "62b87b099a0c4fa8b80b3538", "namespace_real": "lena.core.check_sequence_type.is_fill_request_el", "type": "function", "project_path": "ynikitenko/lena", "completion_path": "lena/core/check_sequence_type.py", "ce_id": "62b87b099a0c4fa8b80b3538", "signature_position": [34, null], "body_position": [null, 37], "signature": "def is_fill_request_el(obj):", "ground_truth": "def is_fill_request_el(obj):\n    \"\"\"Object contains executable methods 'fill' and 'request'.\"\"\"\n    return hasattr(obj, \"fill\") and hasattr(obj, \"request\") \\\n            and callable(obj.fill) and callable(obj.request)", "requirement": {"Functionality": "Object contains executable methods 'fill' and 'request'.", "Arguments": ""}}
{"namespace": "62b87af99a0c4fa8b80b3524", "namespace_real": "lena.core.check_sequence_type.is_run_el", "type": "function", "project_path": "ynikitenko/lena", "completion_path": "lena/core/check_sequence_type.py", "ce_id": "62b87af99a0c4fa8b80b3524", "signature_position": [57, null], "body_position": [null, 59], "signature": "def is_run_el(obj):", "ground_truth": "def is_run_el(obj):\n    \"\"\"Object contains executable method 'run'.\"\"\"\n    return hasattr(obj, \"run\") and callable(obj.run)", "requirement": {"Functionality": "Object contains executable method 'run'.", "Arguments": ""}}
{"namespace": "62b87af69a0c4fa8b80b351a", "namespace_real": "lena.core.check_sequence_type.is_fill_compute_el", "type": "function", "project_path": "ynikitenko/lena", "completion_path": "lena/core/check_sequence_type.py", "ce_id": "62b87af69a0c4fa8b80b351a", "signature_position": [6, null], "body_position": [null, 11], "signature": "def is_fill_compute_el(obj):", "ground_truth": "def is_fill_compute_el(obj):\n    \"\"\"Object contains executable methods 'fill' and 'compute'.\"\"\"\n    return (hasattr(obj, \"fill\")\n            and hasattr(obj, \"compute\")\n            and callable(obj.fill)\n            and callable(obj.compute))", "requirement": {"Functionality": "Object contains executable methods 'fill' and 'compute'.", "Arguments": ""}}
{"namespace": "62b87af19a0c4fa8b80b34f7", "namespace_real": "lena.context.functions.difference", "type": "function", "project_path": "ynikitenko/lena", "completion_path": "lena/context/functions.py", "ce_id": "62b87af19a0c4fa8b80b34f7", "signature_position": [58, null], "body_position": [null, 94], "signature": "def difference(d1, d2, level=-1):", "ground_truth": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from *d1* not contained in *d2*.\n\n    *level* sets the maximum depth of recursion. For infinite recursion,\n    set that to -1. For level 1,\n    if a key is present both in *d1* and *d2* but has different values,\n    it is included into the difference.\n    See :func:`intersection` for more details.\n\n    *d1* and *d2* remain unchanged. However, *d1* or some of its\n    subdictionaries may be returned directly.\n    Make a deep copy of the result when appropriate.\n\n    .. versionadded:: 0.5\n       add keyword argument *level*.\n    \"\"\"\n    # can become not dicts during the recursion\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        return d1\n\n    if d1 == d2:\n        return {}\n    elif level == 0:\n        return d1\n\n    # some keys differ\n    result = {}\n    for key in d1:\n        if key not in d2:\n            result[key] = d1[key]\n        elif d1[key] != d2[key]:\n            res = difference(d1[key], d2[key], level-1)\n            # if d2[key] contains all d1[key] elements,\n            # the difference will be empty\n            if res:\n                result[key] = res\n    return result", "requirement": {"Functionality": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "Arguments": ""}}
{"namespace": "62b87af09a0c4fa8b80b34f1", "namespace_real": "lena.structures.histogram.fill", "type": "class", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/histogram.py", "ce_id": "62b87af09a0c4fa8b80b34f1", "signature_position": [157, null], "body_position": [null, 182], "signature": "def fill(self, coord, weight=1):", "ground_truth": "    def fill(self, coord, weight=1):\n        \"\"\"Fill histogram at *coord* with the given *weight*.\n\n        Coordinates outside the histogram edges are ignored.\n        \"\"\"\n        indices = hf.get_bin_on_value(coord, self.edges)\n        subarr = self.bins\n        for ind in indices[:-1]:\n            # underflow\n            if ind < 0:\n                return\n            try:\n                subarr = subarr[ind]\n            # overflow\n            except IndexError:\n                return\n        ind = indices[-1]\n        # underflow\n        if ind < 0:\n            return\n\n        # fill\n        try:\n            subarr[ind] += weight\n        except IndexError:\n            return", "requirement": {"Functionality": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "Arguments": ""}}
{"namespace": "62b86aa3b4d922cb0e688d36", "namespace_real": "krake.krake.data.core._validate_labels", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/data/core.py", "ce_id": "62b86aa3b4d922cb0e688d36", "signature_position": [116, null], "body_position": [null, 163], "signature": "def _validate_labels(labels):", "ground_truth": "def _validate_labels(labels):\n    \"\"\"Check that keys and values in the given labels match against their corresponding\n    regular expressions.\n\n    Args:\n        labels (dict): the different labels to validate.\n\n    Raises:\n        ValidationError: if any of the keys and labels does not match their respective\n            regular expression. The error contains as message the list of all errors\n            which occurred in the labels. Each element of the list is a dictionary with\n            one key-value pair:\n            - key: the label key or label value for which an error occurred as string.\n            - value: the error message.\n\n            .. code:: python\n\n                # Example:\n                labels = {\n                    \"key1\": \"valid\",\n                    \"key2\": [\"invalid\"],\n                    \"$$\": \"invalid\",\n                    True: True,\n                }\n                try:\n                    _validate_labels(labels)\n                except ValidationError as err:\n                    assert err.messages == [\n                        {\"['invalid']\": 'expected string or bytes-like object'},\n                        {'$$': \"Label key '$$' does not match the regex [...]\"},\n                        {'True': 'expected string or bytes-like object'},\n                        {'True': 'expected string or bytes-like object'},\n                    ]\n    \"\"\"\n    errors = []\n    for key, value in labels.items():\n        try:\n            validate_key(key)\n        except (ValidationError, TypeError) as err:\n            errors.append({str(key): str(err)})\n\n        try:\n            validate_value(value)\n        except (ValidationError, TypeError) as err:\n            errors.append({str(value): str(err)})\n\n    if errors:\n        raise ValidationError(list(errors))", "requirement": {"Functionality": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "Arguments": ""}}
{"namespace": "62b86a9eb4d922cb0e688d25", "namespace_real": "krake.krake.data.core._get_resource_name_regex", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/data/core.py", "ce_id": "62b86a9eb4d922cb0e688d25", "signature_position": [170, null], "body_position": [null, 197], "signature": "def _get_resource_name_regex():", "ground_truth": "def _get_resource_name_regex():\n    \"\"\"Build or return the regular expressions that are used to validate\n    the name of the Krake resources.\n\n    Returns:\n        (re.Pattern): the compiled regular expressions, to validate\n        the resource name.\n    \"\"\"\n    global _resource_name_regex, _resource_name_pattern\n\n    # Build the patterns only if not already built\n    if _resource_name_regex:\n        return _resource_name_regex\n\n    # First and last characters must be alphanumeric. The rest of the string must be\n    # alphanumeric, \"-\", \"_\" or \".\" and without whitespace as well as have a\n    # max length of 255 and a min length of 1\n    max_name_size = 253  # reduced by 2 for the regex\n    min_name_size = 0  # reduced by 1 for the regex\n    base_alphanumeric_pattern = \"\\\\w|(\\\\w[\\\\w\\\\-_.:]{{{min_length},{length}}}\\\\w)\"\n\n    resource_name_pattern = base_alphanumeric_pattern.format(\n        min_length=min_name_size, length=max_name_size\n    )\n\n    _resource_name_pattern = resource_name_pattern\n    _resource_name_regex = re.compile(_resource_name_pattern, re.ASCII)\n    return _resource_name_regex", "requirement": {"Functionality": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "Arguments": ""}}
{"namespace": "62b86a4fb4d922cb0e688cf8", "namespace_real": "krake.krake.data.core.validate_value", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/data/core.py", "ce_id": "62b86a4fb4d922cb0e688cf8", "signature_position": [99, null], "body_position": [null, 113], "signature": "def validate_value(value):", "ground_truth": "def validate_value(value):\n    \"\"\"Validate the given value against the corresponding regular expression.\n\n    Args:\n        value: the string to validate\n\n    Raises:\n        ValidationError: if the given value is not conform to the regular expression.\n    \"\"\"\n    _, value_regex = _get_labels_regex()\n    if not value_regex.fullmatch(value):\n        raise ValidationError(\n            f\"Label value {value!r} does not match\"\n            f\" the regex {_label_value_pattern!r}.\"\n        )", "requirement": {"Functionality": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "Arguments": ""}}
{"namespace": "62b86a4fb4d922cb0e688cf7", "namespace_real": "krake.krake.data.core.validate_key", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/data/core.py", "ce_id": "62b86a4fb4d922cb0e688cf7", "signature_position": [83, null], "body_position": [null, 96], "signature": "def validate_key(key):", "ground_truth": "def validate_key(key):\n    \"\"\"Validate the given key against the corresponding regular expression.\n\n    Args:\n        key: the string to validate\n\n    Raises:\n        ValidationError: if the given key is not conform to the regular expression.\n    \"\"\"\n    key_regex, _ = _get_labels_regex()\n    if not key_regex.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key!r} does not match the regex {_label_key_pattern!r}.\"\n        )", "requirement": {"Functionality": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "Arguments": ""}}
{"namespace": "62b86a01b4d922cb0e688ccc", "namespace_real": "krake.krake.controller.kubernetes.hooks.generate_default_observer_schema_dict", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/controller/kubernetes/hooks.py", "ce_id": "62b86a01b4d922cb0e688ccc", "signature_position": [1040, null], "body_position": [null, 1085], "signature": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):", "ground_truth": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \"\"\"Together with :func:``generate_default_observer_schema_list``, this function is\n    called recursively to generate part of a default ``observer_schema`` from part of a\n    Kubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resources\n        first_level (bool, optional): If True, indicates that the dictionary represents\n            the whole observer schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    This function creates a new dictionary from ``manifest_dict`` and replaces all\n    non-list and non-dict values by ``None``.\n\n    In case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\n    resource), the values of the identifying fields are copied from the manifest file.\n\n    \"\"\"\n    observer_schema_dict = {}\n\n    for key, value in manifest_dict.items():\n\n        if isinstance(value, dict):\n            observer_schema_dict[key] = generate_default_observer_schema_dict(value)\n\n        elif isinstance(value, list):\n            observer_schema_dict[key] = generate_default_observer_schema_list(value)\n\n        else:\n            observer_schema_dict[key] = None\n\n    if first_level:\n        observer_schema_dict[\"apiVersion\"] = manifest_dict[\"apiVersion\"]\n        observer_schema_dict[\"kind\"] = manifest_dict[\"kind\"]\n        observer_schema_dict[\"metadata\"][\"name\"] = manifest_dict[\"metadata\"][\"name\"]\n\n        if (\n            \"spec\" in manifest_dict\n            and \"type\" in manifest_dict[\"spec\"]\n            and manifest_dict[\"spec\"][\"type\"] == \"LoadBalancer\"\n        ):\n            observer_schema_dict[\"status\"] = {\"load_balancer\": {\"ingress\": None}}\n\n    return observer_schema_dict", "requirement": {"Functionality": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "Arguments": ""}}
{"namespace": "62b869ebb4d922cb0e688cc6", "namespace_real": "krake.krake.controller.kubernetes.hooks.update_last_applied_manifest_list_from_resp", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/controller/kubernetes/hooks.py", "ce_id": "62b869ebb4d922cb0e688cc6", "signature_position": [301, null], "body_position": [null, 351], "signature": "def update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, response):", "ground_truth": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"Together with :func:``update_last_applied_manifest_dict_from_resp``, this\n    function is called recursively to update a partial ``last_applied_manifest``\n    from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n\n    This function go through all observed fields, and initialized their value in\n    last_applied_manifest if they are not yet present\n\n    \"\"\"\n    # Looping over the observed resource, except the last element which is the\n    # special control dictionary\n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            # Element is observed but not present in k8s response, so following\n            # elements will also not exist.\n            #\n            # This doesn't raise an Exception as observing the element of a list\n            # doesn't ensure its presence. The list length is controlled by the\n            # special control dictionary\n            return\n\n        if isinstance(val, dict):\n            if idx >= len(last_applied_manifest):\n                # The dict is observed, but not present in last_applied_manifest\n                last_applied_manifest.append({})\n\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[idx], observer_schema[idx], response[idx]\n            )\n\n        elif isinstance(response[idx], list):\n            if idx >= len(last_applied_manifest):\n                # The list is observed, but not present in last_applied_manifest\n                last_applied_manifest.append([])\n\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[idx], observer_schema[idx], response[idx]\n            )\n\n        elif idx >= len(last_applied_manifest):\n            # Element is not yet present in last_applied_manifest. Adding it.\n            last_applied_manifest.append(response[idx])", "requirement": {"Functionality": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "Arguments": ""}}
{"namespace": "62b869eab4d922cb0e688cc5", "namespace_real": "krake.krake.controller.kubernetes.hooks.update_last_applied_manifest_dict_from_resp", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/controller/kubernetes/hooks.py", "ce_id": "62b869eab4d922cb0e688cc5", "signature_position": [245, null], "body_position": [null, 298], "signature": "def update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response):", "ground_truth": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"Together with :func:``update_last_applied_manifest_list_from_resp``, this\n    function is called recursively to update a partial ``last_applied_manifest``\n    from a partial Kubernetes response\n\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being\n            updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    This function go through all observed fields, and initialized their value in\n    last_applied_manifest if they are not yet present\n\n    \"\"\"\n    for key, value in observer_schema.items():\n\n        # Keys in the response are in camelCase\n        camel_key = camel_to_snake_case(key)\n\n        if camel_key not in response:\n            # An observed key should always be present in the k8s response\n            raise KeyError(\n                f\"Observed key {camel_key} is not present in response {response}\"\n            )\n\n        if isinstance(value, dict):\n            if key not in last_applied_manifest:\n                # The dictionary is observed, but not present in\n                # last_applied_manifest\n                last_applied_manifest[key] = {}\n\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema[key], response[camel_key]\n            )\n\n        elif isinstance(value, list):\n            if key not in last_applied_manifest:\n                # The list is observed, but not present in last_applied_manifest\n                last_applied_manifest[key] = []\n\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[key], observer_schema[key], response[camel_key]\n            )\n\n        elif key not in last_applied_manifest:\n            # If key not present in last_applied_manifest, and value is neither a\n            # dict nor a list, simply add it.\n            last_applied_manifest[key] = response[camel_key]", "requirement": {"Functionality": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "Arguments": ""}}
{"namespace": "62b869eab4d922cb0e688cbf", "namespace_real": "krake.krake.controller.kubernetes.hooks.generate_default_observer_schema", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/controller/kubernetes/hooks.py", "ce_id": "62b869eab4d922cb0e688cbf", "signature_position": [1012, null], "body_position": [null, 1037], "signature": "def generate_default_observer_schema(app):", "ground_truth": "def generate_default_observer_schema(app):\n    \"\"\"Generate the default observer schema for each Kubernetes resource present in\n    ``spec.manifest`` for which a custom observer schema hasn't been specified.\n\n    Args:\n        app (krake.data.kubernetes.Application): The application for which to generate a\n            default observer schema\n    \"\"\"\n\n    app.status.mangled_observer_schema = deepcopy(app.spec.observer_schema)\n\n    for resource_manifest in app.spec.manifest:\n        try:\n            get_kubernetes_resource_idx(\n                app.status.mangled_observer_schema, resource_manifest\n            )\n\n        except IndexError:\n            # Only create a default observer schema, if a custom observer schema hasn't\n            # been set by the user.\n            app.status.mangled_observer_schema.append(\n                generate_default_observer_schema_dict(\n                    resource_manifest,\n                    first_level=True,\n                )\n            )", "requirement": {"Functionality": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "Arguments": ""}}
{"namespace": "62b43427903eeb48555d3ea5", "namespace_real": "sqlparams.__init__.format", "type": "class", "project_path": "cpburnz/python-sql-parameters", "completion_path": "sqlparams/__init__.py", "ce_id": "62b43427903eeb48555d3ea5", "signature_position": [328, null], "body_position": [null, 373], "signature": "def format(self, sql: AnyStr, params: Union[Dict[Union[str, int], Any], Sequence[Any]]) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:", "ground_truth": "\tdef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\"\"\"\n\t\tConvert the SQL query to use the out-style parameters instead of\n\t\tthe in-style parameters.\n\n\t\t*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n\t\t*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n\t\tcontains the set of in-style parameters. It maps each parameter\n\t\t(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n\t\tis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n\t\tIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n\t\t*params* must be a :class:`~collections.abc.Sequence`.\n\n\t\tReturns a :class:`tuple` containing:\n\n\t\t-\tThe formatted SQL query (:class:`str` or :class:`bytes`).\n\n\t\t-\tThe set of converted out-style parameters (:class:`dict` or\n\t\t\t:class:`list`).\n\t\t\"\"\"\n\t\t# Normalize query encoding to simplify processing.\n\t\tif isinstance(sql, str):\n\t\t\tuse_sql = sql\n\t\t\tstring_type = str\n\t\telif isinstance(sql, bytes):\n\t\t\tuse_sql = sql.decode(_BYTES_ENCODING)\n\t\t\tstring_type = bytes\n\t\telse:\n\t\t\traise TypeError(\"sql:{!r} is not a unicode or byte string.\".format(sql))\n\n\t\t# Replace in-style with out-style parameters.\n\t\tuse_sql, out_params = self._converter.convert(use_sql, params)\n\n\t\t# Make sure the query is returned as the proper string type.\n\t\tif string_type is bytes:\n\t\t\tout_sql = use_sql.encode(_BYTES_ENCODING)\n\t\telse:\n\t\t\tout_sql = use_sql\n\n\t\t# Return converted SQL and out-parameters.\n\t\treturn out_sql, out_params", "requirement": {"Functionality": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "Arguments": ""}}
{"namespace": "62b43428903eeb48555d3eaa", "namespace_real": "sqlparams.__init__.formatmany", "type": "class", "project_path": "cpburnz/python-sql-parameters", "completion_path": "sqlparams/__init__.py", "ce_id": "62b43428903eeb48555d3eaa", "signature_position": [375, null], "body_position": [null, 426], "signature": "def formatmany(self, sql: AnyStr, many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]]) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:", "ground_truth": "\tdef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\"\"\"\n\t\tConvert the SQL query to use the out-style parameters instead of the\n\t\tin-style parameters.\n\n\t\t*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n\t\t*many_params* (:class:`~collections.abc.Iterable`) contains each set\n\t\tof in-style parameters (*params*).\n\n\t\t-\t*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n\t\t\tcontains the set of in-style parameters. It maps each parameter\n\t\t\t(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n\t\t\tis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n\t\t\tIf :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n\t\t\t*params* must be a :class:`~collections.abc.Sequence`.\n\n\t\tReturns a :class:`tuple` containing:\n\n\t\t-\tThe formatted SQL query (:class:`str` or :class:`bytes`).\n\n\t\t-\tA :class:`list` containing each set of converted out-style\n\t\t\tparameters (:class:`dict` or :class:`list`).\n\t\t\"\"\"\n\t\t# Normalize query encoding to simplify processing.\n\t\tif isinstance(sql, str):\n\t\t\tuse_sql = sql\n\t\t\tstring_type = str\n\t\telif isinstance(sql, bytes):\n\t\t\tuse_sql = sql.decode(_BYTES_ENCODING)\n\t\t\tstring_type = bytes\n\t\telse:\n\t\t\traise TypeError(\"sql:{!r} is not a unicode or byte string.\".format(sql))\n\n\t\tif not _is_iterable(many_params):\n\t\t\traise TypeError(\"many_params:{!r} is not iterable.\".format(many_params))\n\n\t\t# Replace in-style with out-style parameters.\n\t\tuse_sql, many_out_params = self._converter.convert_many(use_sql, many_params)\n\n\t\t# Make sure the query is returned as the proper string type.\n\t\tif string_type is bytes:\n\t\t\tout_sql = use_sql.encode(_BYTES_ENCODING)\n\t\telse:\n\t\t\tout_sql = use_sql\n\n\t\t# Return converted SQL and out-parameters.\n\t\treturn out_sql, many_out_params", "requirement": {"Functionality": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "Arguments": ""}}
{"namespace": "62b45df05108cfac7f2109ce", "namespace_real": "ocfl.validator.validate", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/validator.py", "ce_id": "62b45df05108cfac7f2109ce", "signature_position": [73, null], "body_position": [null, 137], "signature": "def validate(self, path):", "ground_truth": "    def validate(self, path):\n        \"\"\"Validate OCFL object at path or pyfs root.\n\n        Returns True if valid (warnings permitted), False otherwise.\n        \"\"\"\n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error('E003e', path=path)\n            return False\n        # Object declaration, set spec version number. If there are multiple declarations,\n        # look for the lastest object version then report any others as errors\n        namastes = find_namastes(0, pyfs=self.obj_fs)\n        if len(namastes) == 0:\n            self.log.error('E003a', assumed_version=self.spec_version)\n        else:\n            spec_version = None\n            for namaste in namastes:\n                # Extract and check spec version number\n                this_file_version = None\n                for version in ('1.1', '1.0'):\n                    if namaste.filename == '0=ocfl_object_' + version:\n                        this_file_version = version\n                        break\n                if this_file_version is None:\n                    self.log.error('E006', filename=namaste.filename)\n                elif spec_version is None or this_file_version > spec_version:\n                    spec_version = this_file_version\n                    if not namaste.content_ok(pyfs=self.obj_fs):\n                        self.log.error('E007', filename=namaste.filename)\n            if spec_version is None:\n                self.log.error('E003c', assumed_version=self.spec_version)\n            else:\n                self.spec_version = spec_version\n                if len(namastes) > 1:\n                    self.log.error('E003b', files=len(namastes), using_version=self.spec_version)\n        # Object root inventory file\n        inv_file = 'inventory.json'\n        if not self.obj_fs.exists(inv_file):\n            self.log.error('E063')\n            return False\n        try:\n            inventory, inv_validator = self.validate_inventory(inv_file)\n            inventory_is_valid = self.log.num_errors == 0\n            self.root_inv_validator = inv_validator\n            all_versions = inv_validator.all_versions\n            self.id = inv_validator.id\n            self.content_directory = inv_validator.content_directory\n            self.digest_algorithm = inv_validator.digest_algorithm\n            self.validate_inventory_digest(inv_file, self.digest_algorithm)\n            # Object root\n            self.validate_object_root(all_versions, already_checked=[namaste.filename for namaste in namastes])\n            # Version inventory files\n            (prior_manifest_digests, prior_fixity_digests) = self.validate_version_inventories(all_versions)\n            if inventory_is_valid:\n                # Object content\n                self.validate_content(inventory, all_versions, prior_manifest_digests, prior_fixity_digests)\n        except ValidatorAbortException:\n            pass\n        return self.log.num_errors == 0", "requirement": {"Functionality": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "Arguments": ""}}
{"namespace": "62b45df15108cfac7f2109dc", "namespace_real": "ocfl.validation_logger.status_str", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/validation_logger.py", "ce_id": "62b45df15108cfac7f2109dc", "signature_position": [79, null], "body_position": [null, 84], "signature": "def status_str(self, prefix=''):", "ground_truth": "    def status_str(self, prefix=''):\n        \"\"\"Return string of validator status, with optional prefix.\"\"\"\n        s = ''\n        for message in sorted(self.messages):\n            s += prefix + message + '\\n'\n        return s[:-1]", "requirement": {"Functionality": "Return string of validator status, with optional prefix.", "Arguments": ""}}
{"namespace": "62b45df15108cfac7f2109dd", "namespace_real": "ocfl.validator.status_str", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/validator.py", "ce_id": "62b45df15108cfac7f2109dd", "signature_position": [65, null], "body_position": [null, 67], "signature": "def status_str(self, prefix=''):", "ground_truth": "    def status_str(self, prefix=''):\n        \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n        return self.log.status_str(prefix=prefix)", "requirement": {"Functionality": "Return string representation of validation log, with optional prefix.", "Arguments": ""}}
{"namespace": "62b45e135108cfac7f2109f4", "namespace_real": "ocfl.dispositor.is_valid", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/dispositor.py", "ce_id": "62b45e135108cfac7f2109f4", "signature_position": [17, null], "body_position": [null, 19], "signature": "def is_valid(self, identifier):", "ground_truth": "    def is_valid(self, identifier):  # pylint: disable=unused-argument\n        \"\"\"Return True if identifier is valid, always True in this base implementation.\"\"\"\n        return True", "requirement": {"Functionality": "Return True if identifier is valid, always True in this base implementation.", "Arguments": ""}}
{"namespace": "62b45e145108cfac7f210a07", "namespace_real": "ocfl.inventory_validator.validate", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/inventory_validator.py", "ce_id": "62b45e145108cfac7f210a07", "signature_position": [62, null], "body_position": [null, 144], "signature": "def validate(self, inventory, extract_spec_version=False):", "ground_truth": "    def validate(self, inventory, extract_spec_version=False):\n        \"\"\"Validate a given inventory.\n\n        If extract_spec_version is True then will look at the type value to determine\n        the specification version. In the case that there is no type value or it isn't\n        valid, then other tests will be based on the version given in self.spec_version.\n        \"\"\"\n        # Basic structure\n        self.inventory = inventory\n        if 'id' in inventory:\n            iid = inventory['id']\n            if not isinstance(iid, str) or iid == '':\n                self.error(\"E037a\")\n            else:\n                # URI syntax https://www.rfc-editor.org/rfc/rfc3986.html#section-3.1 :\n                # scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n                if not re.match(r'''[a-z][a-z\\d\\+\\-\\.]*:.+''', iid, re.IGNORECASE):\n                    self.warning(\"W005\", id=iid)\n                self.id = iid\n        else:\n            self.error(\"E036a\")\n        if 'type' not in inventory:\n            self.error(\"E036b\")\n        elif not isinstance(inventory['type'], str):\n            self.error(\"E999\")\n        elif extract_spec_version:\n            m = re.match(r'''https://ocfl.io/(\\d+.\\d)/spec/#inventory''', inventory['type'])\n            if not m:\n                self.error('E038b', got=inventory['type'], assumed_spec_version=self.spec_version)\n            elif m.group(1) in self.spec_versions_supported:\n                self.spec_version = m.group(1)\n            else:\n                self.error(\"E038c\", got=m.group(1), assumed_spec_version=self.spec_version)\n        elif inventory['type'] != 'https://ocfl.io/' + self.spec_version + '/spec/#inventory':\n            self.error(\"E038a\", expected='https://ocfl.io/' + self.spec_version + '/spec/#inventory', got=inventory['type'])\n        if 'digestAlgorithm' not in inventory:\n            self.error(\"E036c\")\n        elif inventory['digestAlgorithm'] == 'sha512':\n            pass\n        elif self.lax_digests:\n            self.digest_algorithm = inventory['digestAlgorithm']\n        elif inventory['digestAlgorithm'] == 'sha256':\n            self.warning(\"W004\")\n            self.digest_algorithm = inventory['digestAlgorithm']\n        else:\n            self.error(\"E039\", digest_algorithm=inventory['digestAlgorithm'])\n        if 'contentDirectory' in inventory:\n            # Careful only to set self.content_directory if value is safe\n            cd = inventory['contentDirectory']\n            if not isinstance(cd, str) or '/' in cd:\n                self.error(\"E017\")\n            elif cd in ('.', '..'):\n                self.error(\"E018\")\n            else:\n                self.content_directory = cd\n        manifest_files_correct_format = None\n        if 'manifest' not in inventory:\n            self.error(\"E041a\")\n        else:\n            (self.manifest_files, manifest_files_correct_format, self.unnormalized_digests) = self.validate_manifest(inventory['manifest'])\n        digests_used = []\n        if 'versions' not in inventory:\n            self.error(\"E041b\")\n        else:\n            self.all_versions = self.validate_version_sequence(inventory['versions'])\n            digests_used = self.validate_versions(inventory['versions'], self.all_versions, self.unnormalized_digests)\n        if 'head' not in inventory:\n            self.error(\"E036d\")\n        elif len(self.all_versions) > 0:\n            self.head = self.all_versions[-1]\n            if inventory['head'] != self.head:\n                self.error(\"E040\", got=inventory['head'], expected=self.head)\n        if len(self.all_versions) == 0:\n            # Abort tests is we don't have a valid version sequence, otherwise\n            # there will likely be spurious subsequent error reports\n            return\n        if len(self.all_versions) > 0:\n            if manifest_files_correct_format is not None:\n                self.check_content_paths_map_to_versions(manifest_files_correct_format, self.all_versions)\n            if self.manifest_files is not None:\n                self.check_digests_present_and_used(self.manifest_files, digests_used)\n        if 'fixity' in inventory:\n            self.validate_fixity(inventory['fixity'], self.manifest_files)", "requirement": {"Functionality": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "Arguments": ""}}
{"namespace": "62b45e145108cfac7f210a09", "namespace_real": "ocfl.inventory_validator.check_digests_present_and_used", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/inventory_validator.py", "ce_id": "62b45e145108cfac7f210a09", "signature_position": [396, null], "body_position": [null, 405], "signature": "def check_digests_present_and_used(self, manifest_files, digests_used):", "ground_truth": "    def check_digests_present_and_used(self, manifest_files, digests_used):\n        \"\"\"Check all digests in manifest that are needed are present and used.\"\"\"\n        in_manifest = set(manifest_files.values())\n        in_state = set(digests_used)\n        not_in_manifest = in_state.difference(in_manifest)\n        if len(not_in_manifest) > 0:\n            self.error(\"E050a\", digests=\", \".join(sorted(not_in_manifest)))\n        not_in_state = in_manifest.difference(in_state)\n        if len(not_in_state) > 0:\n            self.error(\"E107\", digests=\", \".join(sorted(not_in_state)))", "requirement": {"Functionality": "Check all digests in manifest that are needed are present and used.", "Arguments": ""}}
{"namespace": "62b45e165108cfac7f210a16", "namespace_real": "ocfl.inventory_validator.validate_as_prior_version", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/inventory_validator.py", "ce_id": "62b45e165108cfac7f210a16", "signature_position": [463, null], "body_position": [null, 507], "signature": "def validate_as_prior_version(self, prior):", "ground_truth": "    def validate_as_prior_version(self, prior):\n        \"\"\"Check that prior is a valid prior version of the current inventory object.\n\n        The input variable prior is also expected to be an InventoryValidator object\n        and both self and prior inventories are assumed to have been checked for\n        internal consistency.\n        \"\"\"\n        # Must have a subset of versions which also checks zero padding format etc.\n        if not set(prior.all_versions) < set(self.all_versions):\n            self.error('E066a', prior_head=prior.head)\n        else:\n            # Check references to files but realize that there might be different\n            # digest algorithms between versions\n            version = 'no-version'\n            for version in prior.all_versions:\n                # If the digest algorithm is the same then we can make a\n                # direct check on whether the state blocks match\n                if prior.digest_algorithm == self.digest_algorithm:\n                    self.compare_states_for_version(prior, version)\n                # Now check the mappings from state to logical path, which must\n                # be consistent even if the digestAlgorithm is different between\n                # versions. Get maps from logical paths to files on disk:\n                prior_map = get_logical_path_map(prior.inventory, version)\n                self_map = get_logical_path_map(self.inventory, version)\n                # Look first for differences in logical paths listed\n                only_in_prior = prior_map.keys() - self_map.keys()\n                only_in_self = self_map.keys() - prior_map.keys()\n                if only_in_prior or only_in_self:\n                    if only_in_prior:\n                        self.error('E066b', version=version, prior_head=prior.head, only_in=prior.head, logical_paths=','.join(only_in_prior))\n                    if only_in_self:\n                        self.error('E066b', version=version, prior_head=prior.head, only_in=self.where, logical_paths=','.join(only_in_self))\n                else:\n                    # Check them all in details - digests must match\n                    for logical_path, this_map in prior_map.items():\n                        if not this_map.issubset(self_map[logical_path]):\n                            self.error('E066c', version=version, prior_head=prior.head,\n                                       logical_path=logical_path, prior_content=','.join(this_map),\n                                       current_content=','.join(self_map[logical_path]))\n                # Check metadata\n                prior_version = prior.inventory['versions'][version]\n                self_version = self.inventory['versions'][version]\n                for key in ('created', 'message', 'user'):\n                    if prior_version.get(key) != self_version.get(key):\n                        self.warning('W011', version=version, prior_head=prior.head, key=key)", "requirement": {"Functionality": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "Arguments": ""}}
{"namespace": "62b45e165108cfac7f210a17", "namespace_real": "ocfl.inventory_validator.get_logical_path_map", "type": "function", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/inventory_validator.py", "ce_id": "62b45e165108cfac7f210a17", "signature_position": [13, null], "body_position": [null, 28], "signature": "def get_logical_path_map(inventory, version):", "ground_truth": "def get_logical_path_map(inventory, version):\n    \"\"\"Get a map of logical paths in state to files on disk for version in inventory.\n\n    Returns a dictionary: logical_path_in_state -> set(content_files)\n\n    The set of content_files may includes references to duplicate files in\n    later versions than the version being described.\n    \"\"\"\n    state = inventory['versions'][version]['state']\n    manifest = inventory['manifest']\n    file_map = {}\n    for digest in state:\n        if digest in manifest:\n            for file in state[digest]:\n                file_map[file] = set(manifest[digest])\n    return file_map", "requirement": {"Functionality": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "Arguments": ""}}
{"namespace": "62b45e175108cfac7f210a19", "namespace_real": "ocfl.inventory_validator.validate_fixity", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/inventory_validator.py", "ce_id": "62b45e175108cfac7f210a19", "signature_position": [192, null], "body_position": [null, 238], "signature": "def validate_fixity(self, fixity, manifest_files):", "ground_truth": "    def validate_fixity(self, fixity, manifest_files):\n        \"\"\"Validate fixity block in inventory.\n\n        Check the structure of the fixity block and makes sure that only files\n        listed in the manifest are referenced.\n        \"\"\"\n        if not isinstance(fixity, dict):\n            # The value of fixity must be a JSON object. In v1.0 I catch not an object\n            # as part of E056 but this was clarified as E111 in v1.1. The value may\n            # be an empty object in either case\n            self.error('E056a' if self.spec_version == '1.0' else 'E111')\n        else:\n            for digest_algorithm in fixity:\n                known_digest = True\n                try:\n                    regex = digest_regex(digest_algorithm)\n                except ValueError:\n                    if not self.lax_digests:\n                        self.error('E056b', algorithm=self.digest_algorithm)\n                        continue\n                    # Match anything\n                    regex = r'''^.*$'''\n                    known_digest = False\n                fixity_algoritm_block = fixity[digest_algorithm]\n                if not isinstance(fixity_algoritm_block, dict):\n                    self.error('E057a', algorithm=self.digest_algorithm)\n                else:\n                    digests_seen = set()\n                    for digest in fixity_algoritm_block:\n                        m = re.match(regex, digest)\n                        if not m:\n                            self.error('E057b', digest=digest, algorithm=digest_algorithm)  # wrong form of digest\n                        elif not isinstance(fixity_algoritm_block[digest], list):\n                            self.error('E057c', digest=digest, algorithm=digest_algorithm)  # must have path list value\n                        else:\n                            if known_digest:\n                                norm_digest = normalized_digest(digest, digest_algorithm)\n                            else:\n                                norm_digest = digest\n                            if norm_digest in digests_seen:\n                                # We have already seen this in different un-normalized form!\n                                self.error(\"E097\", digest=norm_digest, algorithm=digest_algorithm)\n                            else:\n                                digests_seen.add(norm_digest)\n                            for file in fixity_algoritm_block[digest]:\n                                if file not in manifest_files:\n                                    self.error(\"E057d\", digest=norm_digest, algorithm=digest_algorithm, path=file)", "requirement": {"Functionality": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "Arguments": ""}}
{"namespace": "62b463153879012d19481498", "namespace_real": "packtools.file_utils.files_list", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/file_utils.py", "ce_id": "62b463153879012d19481498", "signature_position": [28, null], "body_position": [null, 32], "signature": "def files_list(path):", "ground_truth": "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return os.listdir(path)", "requirement": {"Functionality": "Return the files in `path`", "Arguments": ""}}
{"namespace": "62b463153879012d1948149a", "namespace_real": "packtools.sps.models.packages._group_files_by_xml_filename", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/packages.py", "ce_id": "62b463153879012d1948149a", "signature_position": [194, null], "body_position": [null, 239], "signature": "def _group_files_by_xml_filename(source, xmls, files):", "ground_truth": "def _group_files_by_xml_filename(source, xmls, files):\n    \"\"\"\n    Group files by their XML basename\n\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    xml_filename : str\n        XML filenames\n    files : list\n        list of files in the folder or zipfile\n\n    Returns\n    -------\n    dict\n        key: name of the XML files\n        value: Package\n    \"\"\"\n    docs = {}\n    for xml in xmls:\n        basename = os.path.basename(xml)\n        prefix, ext = os.path.splitext(basename)\n\n        docs.setdefault(prefix, Package(source, prefix))\n\n        # XML\n        docs[prefix].xml = xml\n\n        for file in select_filenames_by_prefix(prefix, files):\n            # avalia arquivo do pacote, se \u00e9 asset ou rendition\n            component = _eval_file(prefix, file)\n            if not component:\n                continue\n\n            # resultado do avalia\u00e7\u00e3o do pacote\n            ftype = component.get(\"ftype\")\n            file_path = component[\"file_path\"]\n            comp_id = component[\"component_id\"]\n\n            if ftype:\n                docs[prefix].add_asset(comp_id, file_path)\n            else:\n                docs[prefix].add_rendition(comp_id, file_path)\n            files.remove(file)\n    return docs", "requirement": {"Functionality": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "Arguments": ""}}
{"namespace": "62b463153879012d1948149b", "namespace_real": "packtools.sps.models.packages.match_file_by_prefix", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/packages.py", "ce_id": "62b463153879012d1948149b", "signature_position": [113, null], "body_position": [null, 135], "signature": "def match_file_by_prefix(prefix, file_path):", "ground_truth": "def match_file_by_prefix(prefix, file_path):\n    \"\"\"\n    Identify if a `file_path` belongs to a document package by a given `prefix`\n\n    Retorna `True` para documentos pertencentes a um pacote.\n\n    Parameters\n    ----------\n    prefix : str\n        Filename prefix\n    file_path : str\n        File path\n    Returns\n    -------\n    bool\n        True - file belongs to the package\n    \"\"\"\n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n    if basename.startswith(prefix + \".\"):\n        return True\n    return False", "requirement": {"Functionality": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "Arguments": ""}}
{"namespace": "62b463153879012d1948149c", "namespace_real": "packtools.sps.models.packages.select_filenames_by_prefix", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/packages.py", "ce_id": "62b463153879012d1948149c", "signature_position": [89, null], "body_position": [null, 110], "signature": "def select_filenames_by_prefix(prefix, files):", "ground_truth": "def select_filenames_by_prefix(prefix, files):\n    \"\"\"\n    Get files which belongs to a document package.\n\n    Retorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\n    Parameters\n    ----------\n    prefix : str\n        Filename prefix\n    files : str list\n        Files paths\n    Returns\n    -------\n    list\n        files paths which basename files matches to prefix\n    \"\"\"\n    return [\n        item\n        for item in files\n        if match_file_by_prefix(prefix, item)\n    ]", "requirement": {"Functionality": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "Arguments": ""}}
{"namespace": "62b463153879012d1948149d", "namespace_real": "packtools.sps.models.packages._explore_folder", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/packages.py", "ce_id": "62b463153879012d1948149d", "signature_position": [147, null], "body_position": [null, 167], "signature": "def _explore_folder(folder):", "ground_truth": "def _explore_folder(folder):\n    \"\"\"\n    Get packages' data from folder\n\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    folder : str\n        Folder of the package\n    Returns\n    -------\n    dict\n    \"\"\"\n    if file_utils.is_folder(folder):\n        data = _group_files_by_xml_filename(\n            folder,\n            file_utils.xml_files_list(folder),\n            file_utils.files_list(folder),\n        )\n        return data", "requirement": {"Functionality": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "Arguments": ""}}
{"namespace": "62b463153879012d1948149f", "namespace_real": "packtools.sps.models.packages._eval_file", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/packages.py", "ce_id": "62b463153879012d1948149f", "signature_position": [242, null], "body_position": [null, 293], "signature": "def _eval_file(prefix, file_path):", "ground_truth": "def _eval_file(prefix, file_path):\n    \"\"\"\n    Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\n    Identifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\n    o endere\u00e7o do arquivo em an\u00e1lise.\n\n    Parameters\n    ----------\n    prefix : str\n        nome do arquivo XML sem extens\u00e3o\n    filename : str\n        filename\n    file_folder : str\n        file folder\n\n    Returns\n    -------\n    dict\n    \"\"\"\n    if not match_file_by_prefix(prefix, file_path):\n        # ignore files which name does not match\n        return\n    if file_path.endswith(\".xml\"):\n        # ignore XML files\n        return\n\n    # it matches\n    filename = os.path.basename(file_path)\n    fname, ext = os.path.splitext(filename)\n\n    lang = None\n    if ext == \".pdf\":\n        suffix = fname.replace(prefix, \"\")\n        if fname == prefix:\n            lang = \"original\"\n        elif len(suffix) == 3 and suffix[0] == \"-\":\n            # it is a rendition\n            lang = suffix[1:]\n\n    if lang:\n        return dict(\n            component_id=lang,\n            file_path=file_path,\n        )\n    else:\n        return dict(\n            component_id=filename,\n            component_name=fname,\n            ftype=ext[1:],\n            file_path=file_path,\n        )", "requirement": {"Functionality": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "Arguments": ""}}
{"namespace": "62b463153879012d194814a1", "namespace_real": "packtools.sps.models.packages.add_rendition", "type": "class", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/packages.py", "ce_id": "62b463153879012d194814a1", "signature_position": [49, null], "body_position": [null, 56], "signature": "def add_rendition(self, lang, file_path):", "ground_truth": "    def add_rendition(self, lang, file_path):\n        \"\"\"\n        {\n            \"original\": \"artigo02.pdf\",\n            \"en\": \"artigo02-en.pdf\",\n        }\n        \"\"\"\n        self._renditions[lang] = self.file_path(file_path)", "requirement": {"Functionality": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "Arguments": ""}}
{"namespace": "62b463163879012d194814a2", "namespace_real": "packtools.sps.models.packages.add_asset", "type": "class", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/packages.py", "ce_id": "62b463163879012d194814a2", "signature_position": [33, null], "body_position": [null, 41], "signature": "def add_asset(self, basename, file_path):", "ground_truth": "    def add_asset(self, basename, file_path):\n        \"\"\"\n        \"{\n            \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n            \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n            \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n        }\n        \"\"\"\n        self._assets[basename] = self.file_path(file_path)", "requirement": {"Functionality": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "Arguments": ""}}
{"namespace": "62b463163879012d194814a4", "namespace_real": "packtools.sps.models.packages._explore_zipfile", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/packages.py", "ce_id": "62b463163879012d194814a4", "signature_position": [170, null], "body_position": [null, 191], "signature": "def _explore_zipfile(zip_path):", "ground_truth": "def _explore_zipfile(zip_path):\n    \"\"\"\n    Get packages' data from zip_path\n\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    zip_path : str\n        zip file path\n    Returns\n    -------\n    dict\n    \"\"\"\n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n            )\n            return data", "requirement": {"Functionality": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "Arguments": ""}}
{"namespace": "62b463163879012d194814a6", "namespace_real": "packtools.file_utils.files_list_from_zipfile", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/file_utils.py", "ce_id": "62b463163879012d194814a6", "signature_position": [56, null], "body_position": [null, 76], "signature": "def files_list_from_zipfile(zip_path):", "ground_truth": "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in `zip_path`\n\n    Example:\n\n    ```\n    [\n        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n        '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n    ]\n    ```\n    \"\"\"\n    with ZipFile(zip_path) as zf:\n        return zf.namelist()", "requirement": {"Functionality": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "Arguments": ""}}
{"namespace": "62b4631b3879012d194814dd", "namespace_real": "packtools.sps.utils.xml_utils.fix_namespace_prefix_w", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/utils/xml_utils.py", "ce_id": "62b4631b3879012d194814dd", "signature_position": [59, null], "body_position": [null, 70], "signature": "def fix_namespace_prefix_w(content):", "ground_truth": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Convert os textos cujo padr\u00e3o \u00e9 `w:st=\"` em `w-st=\"`\n    \"\"\"\n    pattern = r\"\\bw:[a-z]{1,}=\\\"\"\n    found_items = re.findall(pattern, content)\n    logger.debug(\"Found %i namespace prefix w\", len(found_items))\n    for item in set(found_items):\n        new_namespace = item.replace(\":\", \"-\")\n        logger.debug(\"%s -> %s\" % (item, new_namespace))\n        content = content.replace(item, new_namespace)\n    return content", "requirement": {"Functionality": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "Arguments": ""}}
{"namespace": "62b463283879012d1948153d", "namespace_real": "packtools.sps.utils.xml_utils.match_pubdate", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/utils/xml_utils.py", "ce_id": "62b463283879012d1948153d", "signature_position": [269, null], "body_position": [null, 276], "signature": "def match_pubdate(node, pubdate_xpaths):", "ground_truth": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Retorna o primeiro match da lista de pubdate_xpaths\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        pubdate = node.find(xpath)\n        if pubdate is not None:\n            return pubdate", "requirement": {"Functionality": "Returns the first match in the pubdate_xpaths list", "Arguments": ""}}
{"namespace": "62b463303879012d19481579", "namespace_real": "packtools.sps.models.front_articlemeta_issue._extract_number_and_supplment_from_issue_element", "type": "function", "project_path": "scieloorg/packtools", "completion_path": "packtools/sps/models/front_articlemeta_issue.py", "ce_id": "62b463303879012d19481579", "signature_position": [18, null], "body_position": [null, 61], "signature": "def _extract_number_and_supplment_from_issue_element(issue):", "ground_truth": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extrai do conte\u00fado de <issue>xxxx</issue>, os valores number e suppl.\n    Valores poss\u00edveis\n    5 (suppl), 5 Suppl, 5 Suppl 1, 5 spe, 5 suppl, 5 suppl 1, 5 suppl. 1,\n    25 Suppl 1, 2-5 suppl 1, 2spe, Spe, Supl. 1, Suppl, Suppl 12,\n    s2, spe, spe 1, spe pr, spe2, spe.2, spepr, supp 1, supp5 1, suppl,\n    suppl 1, suppl 5 pr, suppl 12, suppl 1-2, suppl. 1\n    \"\"\"\n    if not issue:\n        return None, None\n    issue = issue.strip().replace(\".\", \"\")\n    splitted = [s for s in issue.split() if s]\n\n    splitted = [\"spe\"\n                if \"spe\" in s.lower() and s.isalpha() else s\n                for s in splitted\n                ]\n    if len(splitted) == 1:\n        issue = splitted[0]\n        if issue.isdigit():\n            return issue, None\n        if \"sup\" in issue.lower():\n            # match como sup*\n            return None, \"0\"\n        if issue.startswith(\"s\"):\n            if issue[1:].isdigit():\n                return None, issue[1:]\n        # match com spe, 2-5, 3B\n        return issue, None\n\n    if len(splitted) == 2:\n        if \"sup\" in splitted[0].lower():\n            return None, splitted[1]\n        if \"sup\" in splitted[1].lower():\n            return splitted[0], \"0\"\n        # match spe 4 -> spe4\n        return \"\".join(splitted), None\n\n    if len(splitted) == 3:\n        if \"sup\" in splitted[1].lower():\n            return splitted[0], splitted[2]\n    # match ????\n    return \"\".join(splitted), None", "requirement": {"Functionality": "Extract the possible values of number and suppl from the contents of issue.", "Arguments": ""}}
{"namespace": "62b46740d2f69a53b466171a", "namespace_real": "boolean.boolean.pretty", "type": "class", "project_path": "bastikr/boolean", "completion_path": "boolean/boolean.py", "ce_id": "62b46740d2f69a53b466171a", "signature_position": [1024, null], "body_position": [null, 1033], "signature": "def pretty(self, indent=0, debug=False):", "ground_truth": "    def pretty(self, indent=0, debug=False):\n        \"\"\"\n        Return a pretty formatted representation of self.\n        \"\"\"\n        debug_details = \"\"\n        if debug:\n            debug_details += f\"<isliteral={self.isliteral!r}, iscanonical={self.iscanonical!r}>\"\n\n        obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n        return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"", "requirement": {"Functionality": "Return a pretty formatted representation of self.", "Arguments": ""}}
{"namespace": "62b46746d2f69a53b4661722", "namespace_real": "boolean.boolean.absorb", "type": "class", "project_path": "bastikr/boolean", "completion_path": "boolean/boolean.py", "ce_id": "62b46746d2f69a53b4661722", "signature_position": [1446, null], "body_position": [null, 1518], "signature": "def absorb(self, args):", "ground_truth": "    def absorb(self, args):\n        \"\"\"\n        Given an `args` sequence of expressions, return a new list of expression\n        applying absorption and negative absorption.\n\n        See https://en.wikipedia.org/wiki/Absorption_law\n\n        Absorption::\n\n            A & (A | B) = A, A | (A & B) = A\n\n        Negative absorption::\n\n            A & (~A | B) = A & B, A | (~A & B) = A | B\n        \"\"\"\n        args = list(args)\n        if not args:\n            args = list(self.args)\n        i = 0\n        while i < len(args):\n            absorber = args[i]\n            j = 0\n            while j < len(args):\n                if j == i:\n                    j += 1\n                    continue\n                target = args[j]\n                if not isinstance(target, self.dual):\n                    j += 1\n                    continue\n\n                # Absorption\n                if absorber in target:\n                    del args[j]\n                    if j < i:\n                        i -= 1\n                    continue\n\n                # Negative absorption\n                neg_absorber = self.NOT(absorber).cancel()\n                if neg_absorber in target:\n                    b = target.subtract(neg_absorber, simplify=False)\n                    if b is None:\n                        del args[j]\n                        if j < i:\n                            i -= 1\n                        continue\n                    else:\n                        args[j] = b\n                        j += 1\n                        continue\n\n                if isinstance(absorber, self.dual):\n                    remove = None\n                    for arg in absorber.args:\n                        narg = self.NOT(arg).cancel()\n                        if arg in target.args:\n                            pass\n                        elif narg in target.args:\n                            if remove is None:\n                                remove = narg\n                            else:\n                                remove = None\n                                break\n                        else:\n                            remove = None\n                            break\n                    if remove is not None:\n                        args[j] = target.subtract(remove, simplify=True)\n                j += 1\n            i += 1\n\n        return args", "requirement": {"Functionality": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "Arguments": ""}}
{"namespace": "62b86707b4d922cb0e688c2a", "namespace_real": "krake.krake.controller.kubernetes.hooks.on", "type": "class", "project_path": "rak-n-rok/Krake", "completion_path": "krake/krake/controller/kubernetes/hooks.py", "ce_id": "62b86707b4d922cb0e688c2a", "signature_position": [97, null], "body_position": [null, 114], "signature": "def on(self, hook):", "ground_truth": "    def on(self, hook):\n        \"\"\"Decorator function to add a new handler to the registry.\n\n        Args:\n            hook (HookType): Hook attribute for which to register the handler.\n\n        Returns:\n            callable: Decorator for registering listeners for the specified\n            hook.\n\n        \"\"\"\n\n        def decorator(handler):\n            self.registry[hook].append(handler)\n\n            return handler\n\n        return decorator", "requirement": {"Functionality": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "Arguments": ""}}
{"namespace": "62b86729b4d922cb0e688c2f", "namespace_real": "krake.tests.conftest.base_config", "type": "function", "project_path": "rak-n-rok/Krake", "completion_path": "krake/tests/conftest.py", "ce_id": "62b86729b4d922cb0e688c2f", "signature_position": [216, null], "body_position": [null, 253], "signature": "def base_config(user, etcd_host='localhost', etcd_port=2379):", "ground_truth": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \"\"\"Creates a configuration with some simple parameters, which have a default value\n    that can be set.\n\n    Args:\n        user (str): the name of the user for the static authentication\n        etcd_host (str): the host for the database.\n        etcd_port (int): the port for the database.\n\n    Returns:\n        dict: the created configuration.\n\n    \"\"\"\n    return {\n        \"tls\": {\n            \"enabled\": False,\n            \"cert\": \"cert_path\",\n            \"key\": \"key_path\",\n            \"client_ca\": \"client_ca_path\",\n        },\n        \"authentication\": {\n            \"allow_anonymous\": True,\n            \"strategy\": {\n                \"keystone\": {\"enabled\": False, \"endpoint\": \"http://localhost\"},\n                \"keycloak\": {\n                    \"enabled\": False,\n                    \"endpoint\": \"no_endpoint\",\n                    \"realm\": \"krake\",\n                },\n                \"static\": {\"enabled\": True, \"name\": user},\n            },\n            \"cors_origin\": \"http://example.com\",\n        },\n        \"authorization\": \"always-allow\",\n        \"etcd\": {\"host\": etcd_host, \"port\": etcd_port, \"retry_transactions\": 0},\n        \"docs\": {\"problem_base_url\": \"http://example.com/problem\"},\n        \"log\": {},\n    }", "requirement": {"Functionality": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "Arguments": ""}}
{"namespace": "62b8a4a4755ee91dce50a3d2", "namespace_real": "dateutil.tz._common._fromutc", "type": "class", "project_path": "pexip/os-python-dateutil", "completion_path": "dateutil/tz/_common.py", "ce_id": "62b8a4a4755ee91dce50a3d2", "signature_position": [207, null], "body_position": [null, 242], "signature": "def _fromutc(self, dt):", "ground_truth": "    def _fromutc(self, dt):\n        \"\"\"\n        Given a timezone-aware datetime in a given timezone, calculates a\n        timezone-aware datetime in a new timezone.\n\n        Since this is the one time that we *know* we have an unambiguous\n        datetime object, we take this opportunity to determine whether the\n        datetime is ambiguous and in a \"fold\" state (e.g. if it's the first\n        occurrence, chronologically, of the ambiguous datetime).\n\n        :param dt:\n            A timezone-aware :class:`datetime.datetime` object.\n        \"\"\"\n\n        # Re-implement the algorithm from Python's datetime.py\n        dtoff = dt.utcoffset()\n        if dtoff is None:\n            raise ValueError(\"fromutc() requires a non-None utcoffset() \"\n                             \"result\")\n\n        # The original datetime.py code assumes that `dst()` defaults to\n        # zero during ambiguous times. PEP 495 inverts this presumption, so\n        # for pre-PEP 495 versions of python, we need to tweak the algorithm.\n        dtdst = dt.dst()\n        if dtdst is None:\n            raise ValueError(\"fromutc() requires a non-None dst() result\")\n        delta = dtoff - dtdst\n\n        dt += delta\n        # Set fold=1 so we can default to being in the fold for\n        # ambiguous dates.\n        dtdst = enfold(dt, fold=1).dst()\n        if dtdst is None:\n            raise ValueError(\"fromutc(): dt.dst gave inconsistent \"\n                             \"results; cannot convert\")\n        return dt + dtdst", "requirement": {"Functionality": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "Arguments": ""}}
{"namespace": "62b8982f755ee91dce50a241", "namespace_real": "dateutil.relativedelta.normalized", "type": "class", "project_path": "pexip/os-python-dateutil", "completion_path": "dateutil/relativedelta.py", "ce_id": "62b8982f755ee91dce50a241", "signature_position": [282, null], "body_position": [null, 315], "signature": "def normalized(self):", "ground_truth": "    def normalized(self):\n        \"\"\"\n        Return a version of this object represented entirely using integer\n        values for the relative attributes.\n\n        >>> relativedelta(days=1.5, hours=2).normalized()\n        relativedelta(days=+1, hours=+14)\n\n        :return:\n            Returns a :class:`dateutil.relativedelta.relativedelta` object.\n        \"\"\"\n        # Cascade remainders down (rounding each to roughly nearest microsecond)\n        days = int(self.days)\n\n        hours_f = round(self.hours + 24 * (self.days - days), 11)\n        hours = int(hours_f)\n\n        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)\n        minutes = int(minutes_f)\n\n        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)\n        seconds = int(seconds_f)\n\n        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))\n\n        # Constructor carries overflow back up with call to _fix()\n        return self.__class__(years=self.years, months=self.months,\n                              days=days, hours=hours, minutes=minutes,\n                              seconds=seconds, microseconds=microseconds,\n                              leapdays=self.leapdays, year=self.year,\n                              month=self.month, day=self.day,\n                              weekday=self.weekday, hour=self.hour,\n                              minute=self.minute, second=self.second,\n                              microsecond=self.microsecond)", "requirement": {"Functionality": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "Arguments": ""}}
{"namespace": "62b89640755ee91dce50a114", "namespace_real": "dateutil.tz._common.tzname_in_python2", "type": "function", "project_path": "pexip/os-python-dateutil", "completion_path": "dateutil/tz/_common.py", "ce_id": "62b89640755ee91dce50a114", "signature_position": [13, null], "body_position": [null, 30], "signature": "def tzname_in_python2(namefunc):", "ground_truth": "def tzname_in_python2(namefunc):\n    \"\"\"Change unicode output into bytestrings in Python 2\n\n    tzname() API changed in Python 3. It used to return bytes, but was changed\n    to unicode strings\n    \"\"\"\n    if PY2:\n        @wraps(namefunc)\n        def adjust_encoding(*args, **kwargs):\n            name = namefunc(*args, **kwargs)\n            if name is not None:\n                name = name.encode()\n\n            return name\n\n        return adjust_encoding\n    else:\n        return namefunc", "requirement": {"Functionality": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "Arguments": ""}}
{"namespace": "62b87d24d292efb640a55670", "namespace_real": "src.prestoplot._version.get_versions", "type": "function", "project_path": "eykd/prestoplot", "completion_path": "src/prestoplot/_version.py", "ce_id": "62b87d24d292efb640a55670", "signature_position": [637, null], "body_position": [null, 686], "signature": "def get_versions():", "ground_truth": "def get_versions():\n    \"\"\"Get version information or return default if unable to do so.\"\"\"\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don't do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix, verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for _ in cfg.versionfile_source.split(\"/\"):\n            root = os.path.dirname(root)\n    except NameError:\n        return {\n            \"version\": \"0+unknown\",\n            \"full-revisionid\": None,\n            \"dirty\": None,\n            \"error\": \"unable to find root of source tree\",\n            \"date\": None,\n        }\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {\n        \"version\": \"0+unknown\",\n        \"full-revisionid\": None,\n        \"dirty\": None,\n        \"error\": \"unable to compute version\",\n        \"date\": None,\n    }", "requirement": {"Functionality": "Get version information or return default if unable to do so.", "Arguments": ""}}
{"namespace": "62b87d24d292efb640a5566f", "namespace_real": "src.prestoplot._version.render", "type": "function", "project_path": "eykd/prestoplot", "completion_path": "src/prestoplot/_version.py", "ce_id": "62b87d24d292efb640a5566f", "signature_position": [595, null], "body_position": [null, 634], "signature": "def render(pieces, style):", "ground_truth": "def render(pieces, style):\n    \"\"\"Render the given version pieces into the requested style.\"\"\"\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(\"unknown style '%s'\" % style)\n\n    return {\n        \"version\": rendered,\n        \"full-revisionid\": pieces[\"long\"],\n        \"dirty\": pieces[\"dirty\"],\n        \"error\": None,\n        \"date\": pieces.get(\"date\"),\n    }", "requirement": {"Functionality": "Render the given version pieces into the requested style.", "Arguments": ""}}
{"namespace": "62b87d24d292efb640a5566d", "namespace_real": "src.prestoplot._version.plus_or_dot", "type": "function", "project_path": "eykd/prestoplot", "completion_path": "src/prestoplot/_version.py", "ce_id": "62b87d24d292efb640a5566d", "signature_position": [383, null], "body_position": [null, 387], "signature": "def plus_or_dot(pieces):", "ground_truth": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a .\"\"\"\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"", "requirement": {"Functionality": "Return a + if we don't already have one, else return a .", "Arguments": ""}}
{"namespace": "62b87d23d292efb640a5566b", "namespace_real": "src.prestoplot._version.run_command", "type": "function", "project_path": "eykd/prestoplot", "completion_path": "src/prestoplot/_version.py", "ce_id": "62b87d23d292efb640a5566b", "signature_position": [73, null], "body_position": [null, 116], "signature": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):", "ground_truth": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \"\"\"Call the given command(s).\"\"\"\n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs = {}\n    if sys.platform == \"win32\":\n        # This hides the console window if pythonw.exe is used\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            process = subprocess.Popen(\n                [command] + args,\n                cwd=cwd,\n                env=env,\n                stdout=subprocess.PIPE,\n                stderr=(subprocess.PIPE if hide_stderr else None),\n                **popen_kwargs\n            )\n            break\n        except OSError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(\"unable to find command, tried %s\" % (commands,))\n        return None, None\n    stdout = process.communicate()[0].strip().decode()\n    if process.returncode != 0:\n        if verbose:\n            print(\"unable to run %s (error)\" % dispcmd)\n            print(\"stdout was %s\" % stdout)\n        return None, process.returncode\n    return stdout, process.returncode", "requirement": {"Functionality": "Call the given command(s).", "Arguments": ""}}
{"namespace": "62b87d23d292efb640a55668", "namespace_real": "src.prestoplot._version.get_config", "type": "function", "project_path": "eykd/prestoplot", "completion_path": "src/prestoplot/_version.py", "ce_id": "62b87d23d292efb640a55668", "signature_position": [38, null], "body_position": [null, 49], "signature": "def get_config():", "ground_truth": "def get_config():\n    \"\"\"Create, populate and return the VersioneerConfig() object.\"\"\"\n    # these strings are filled in when 'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/prestoplot/_version.py\"\n    cfg.verbose = False\n    return cfg", "requirement": {"Functionality": "Create, populate and return the VersioneerConfig() object.", "Arguments": ""}}
{"namespace": "62b87d23d292efb640a55667", "namespace_real": "src.prestoplot._version.register_vcs_handler", "type": "function", "project_path": "eykd/prestoplot", "completion_path": "src/prestoplot/_version.py", "ce_id": "62b87d23d292efb640a55667", "signature_position": [60, null], "body_position": [null, 70], "signature": "def register_vcs_handler(vcs, method):", "ground_truth": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a VCS.\"\"\"\n\n    def decorate(f):\n        \"\"\"Store f in HANDLERS[vcs][method].\"\"\"\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n\n    return decorate", "requirement": {"Functionality": "Create decorator to mark a method as the handler of a VCS.", "Arguments": ""}}
{"namespace": "62b45e945108cfac7f210a4a", "namespace_real": "ocfl.store.validate_hierarchy", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/store.py", "ce_id": "62b45e945108cfac7f210a4a", "signature_position": [211, null], "body_position": [null, 233], "signature": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):", "ground_truth": "    def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \"\"\"Validate storage root hierarchy.\n\n        Returns:\n            num_objects - number of objects checked\n            good_objects - number of objects checked that were found to be valid\n        \"\"\"\n        num_objects = 0\n        good_objects = 0\n        for dirpath in self.object_paths():\n            if validate_objects:\n                validator = Validator(check_digests=check_digests,\n                                      lax_digests=self.lax_digests,\n                                      show_warnings=show_warnings)\n                if validator.validate(ocfl_opendir(self.root_fs, dirpath)):\n                    good_objects += 1\n                else:\n                    logging.info(\"Object at %s in INVALID\", dirpath)\n                messages = validator.status_str(prefix='[[' + dirpath + ']]')\n                if messages != '':\n                    print(messages)\n                num_objects += 1\n        return num_objects, good_objects", "requirement": {"Functionality": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "Arguments": ""}}
{"namespace": "62b45e515108cfac7f210a3c", "namespace_real": "ocfl.store.initialize", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/store.py", "ce_id": "62b45e515108cfac7f210a3c", "signature_position": [81, null], "body_position": [null, 97], "signature": "def initialize(self):", "ground_truth": "    def initialize(self):\n        \"\"\"Create and initialize a new OCFL storage root.\"\"\"\n        (parent, root_dir) = fs.path.split(self.root)\n        parent_fs = open_fs(parent)\n        if parent_fs.exists(root_dir):\n            raise StoreException(\"OCFL storage root %s already exists, aborting!\" % (self.root))\n        self.root_fs = parent_fs.makedir(root_dir)\n        logging.debug(\"Created OCFL storage root at %s\", self.root)\n        # Create root declaration\n        Namaste(d=0, content=self.declaration_tvalue).write(pyfs=self.root_fs)\n        # Create a layout declaration\n        if self.disposition is not None:\n            with self.root_fs.open(self.layout_file, 'w') as fh:\n                layout = {'extension': self.disposition,\n                          'description': \"Non-standard layout from ocfl-py disposition -- FIXME\"}\n                json.dump(layout, fh, sort_keys=True, indent=2)\n        logging.info(\"Created OCFL storage root %s\", self.root)", "requirement": {"Functionality": "Create and initialize a new OCFL storage root.", "Arguments": ""}}
{"namespace": "62b45e2eb89c9fd354170232", "namespace_real": "ocfl.object_utils.next_version", "type": "function", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/object_utils.py", "ce_id": "62b45e2eb89c9fd354170232", "signature_position": [57, null], "body_position": [null, 73], "signature": "def next_version(version):", "ground_truth": "def next_version(version):\n    \"\"\"Next version identifier following existing pattern.\n\n    Must deal with both zero-prefixed and non-zero prefixed versions.\n    \"\"\"\n    m = re.match(r'''v((\\d)\\d*)$''', version)\n    if not m:\n        raise ObjectException(\"Bad version '%s'\" % version)\n    next_n = int(m.group(1)) + 1\n    if m.group(2) == '0':\n        # Zero-padded version\n        next_v = ('v0%0' + str(len(version) - 2) + 'd') % next_n\n        if len(next_v) != len(version):\n            raise ObjectException(\"Version number overflow for zero-padded version %d to %d\" % (version, next_v))\n        return next_v\n    # Not zero-padded\n    return 'v' + str(next_n)", "requirement": {"Functionality": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "Arguments": ""}}
{"namespace": "62b45e23e0d4551b0392c90a", "namespace_real": "ocfl.validator.validate_version_inventories", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/validator.py", "ce_id": "62b45e23e0d4551b0392c90a", "signature_position": [234, null], "body_position": [null, 325], "signature": "def validate_version_inventories(self, version_dirs):", "ground_truth": "    def validate_version_inventories(self, version_dirs):\n        \"\"\"Each version SHOULD have an inventory up to that point.\n\n        Also keep a record of any content digests different from those in the root inventory\n        so that we can also check them when validating the content.\n\n        version_dirs is an array of version directory names and is assumed to be in\n        version sequence (1, 2, 3...).\n        \"\"\"\n        prior_manifest_digests = {}  # file -> algorithm -> digest -> [versions]\n        prior_fixity_digests = {}  # file -> algorithm -> digest -> [versions]\n        if len(version_dirs) == 0:\n            return prior_manifest_digests, prior_fixity_digests\n        last_version = version_dirs[-1]\n        prev_version_dir = \"NONE\"  # will be set for first directory with inventory\n        prev_spec_version = '1.0'  # lowest version\n        for version_dir in version_dirs:\n            inv_file = fs.path.join(version_dir, 'inventory.json')\n            if not self.obj_fs.exists(inv_file):\n                self.log.warning('W010', where=version_dir)\n                continue\n            # There is an inventory file for this version directory, check it\n            if version_dir == last_version:\n                # Don't validate in this case. Per the spec the inventory in the last version\n                # MUST be identical to the copy in the object root, just check that\n                root_inv_file = 'inventory.json'\n                if not ocfl_files_identical(self.obj_fs, inv_file, root_inv_file):\n                    self.log.error('E064', root_inv_file=root_inv_file, inv_file=inv_file)\n                else:\n                    # We could also just compare digest files but this gives a more helpful error for\n                    # which file has the incorrect digest if they don't match\n                    self.validate_inventory_digest(inv_file, self.digest_algorithm, where=version_dir)\n                self.inventory_digest_files[version_dir] = 'inventory.json.' + self.digest_algorithm\n                this_spec_version = self.spec_version\n            else:\n                # Note that inventories in prior versions may use different digest algorithms\n                # from the current invenotory. Also,\n                # an may accord with the same or earlier versions of the specification\n                version_inventory, inv_validator = self.validate_inventory(inv_file, where=version_dir, extract_spec_version=True)\n                this_spec_version = inv_validator.spec_version\n                digest_algorithm = inv_validator.digest_algorithm\n                self.validate_inventory_digest(inv_file, digest_algorithm, where=version_dir)\n                self.inventory_digest_files[version_dir] = 'inventory.json.' + digest_algorithm\n                if self.id and 'id' in version_inventory:\n                    if version_inventory['id'] != self.id:\n                        self.log.error('E037b', where=version_dir, root_id=self.id, version_id=version_inventory['id'])\n                if 'manifest' in version_inventory:\n                    # Check that all files listed in prior inventories are in manifest\n                    not_seen = set(prior_manifest_digests.keys())\n                    for digest in version_inventory['manifest']:\n                        for filepath in version_inventory['manifest'][digest]:\n                            # We rely on the validation to check that anything present is OK\n                            if filepath in not_seen:\n                                not_seen.remove(filepath)\n                    if len(not_seen) > 0:\n                        self.log.error('E023b', where=version_dir, missing_filepaths=', '.join(sorted(not_seen)))\n                    # Record all prior digests\n                    for unnormalized_digest in version_inventory['manifest']:\n                        digest = normalized_digest(unnormalized_digest, digest_type=digest_algorithm)\n                        for filepath in version_inventory['manifest'][unnormalized_digest]:\n                            if filepath not in prior_manifest_digests:\n                                prior_manifest_digests[filepath] = {}\n                            if digest_algorithm not in prior_manifest_digests[filepath]:\n                                prior_manifest_digests[filepath][digest_algorithm] = {}\n                            if digest not in prior_manifest_digests[filepath][digest_algorithm]:\n                                prior_manifest_digests[filepath][digest_algorithm][digest] = []\n                            prior_manifest_digests[filepath][digest_algorithm][digest].append(version_dir)\n                # Is this inventory an appropriate prior version of the object root inventory?\n                if self.root_inv_validator is not None:\n                    self.root_inv_validator.validate_as_prior_version(inv_validator)\n                # Fixity blocks are independent in each version. Record all values and the versions\n                # they occur in for later checks against content\n                if 'fixity' in version_inventory:\n                    for digest_algorithm in version_inventory['fixity']:\n                        for unnormalized_digest in version_inventory['fixity'][digest_algorithm]:\n                            digest = normalized_digest(unnormalized_digest, digest_type=digest_algorithm)\n                            for filepath in version_inventory['fixity'][digest_algorithm][unnormalized_digest]:\n                                if filepath not in prior_fixity_digests:\n                                    prior_fixity_digests[filepath] = {}\n                                if digest_algorithm not in prior_fixity_digests[filepath]:\n                                    prior_fixity_digests[filepath][digest_algorithm] = {}\n                                if digest not in prior_fixity_digests[filepath][digest_algorithm]:\n                                    prior_fixity_digests[filepath][digest_algorithm][digest] = []\n                                prior_fixity_digests[filepath][digest_algorithm][digest].append(version_dir)\n            # We are validating the inventories in sequence and each new version must\n            # follow the same or later spec version to previous inventories\n            if prev_spec_version > this_spec_version:\n                self.log.error('E103', where=version_dir, this_spec_version=this_spec_version,\n                               prev_version_dir=prev_version_dir, prev_spec_version=prev_spec_version)\n            prev_version_dir = version_dir\n            prev_spec_version = this_spec_version\n        return prior_manifest_digests, prior_fixity_digests", "requirement": {"Functionality": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "Arguments": ""}}
{"namespace": "62b45e21e0d4551b0392c8ed", "namespace_real": "ocfl.object_utils.find_path_type", "type": "function", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/object_utils.py", "ce_id": "62b45e21e0d4551b0392c8ed", "signature_position": [105, null], "body_position": [null, 143], "signature": "def find_path_type(path):", "ground_truth": "def find_path_type(path):\n    \"\"\"Return a string indicating the type of thing at the given path.\n\n    Return values:\n        'root' - looks like an OCFL Storage Root\n        'object' - looks like an OCFL Object\n        'file' - a file, might be an inventory\n        other string explains error description\n\n    Looks only at \"0=*\" Namaste files to determine the directory type.\n    \"\"\"\n    try:\n        pyfs = open_fs(path, create=False)\n    except (fs.opener.errors.OpenerError, fs.errors.CreateFailed):\n        # Failed to open path as a filesystem, try enclosing directory\n        # in case path is a file\n        (parent, filename) = fs.path.split(path)\n        try:\n            pyfs = open_fs(parent, create=False)\n        except (fs.opener.errors.OpenerError, fs.errors.CreateFailed) as e:\n            return \"path cannot be opened, and nor can parent (\" + str(e) + \")\"\n        # Can open parent, is filename a file there?\n        try:\n            info = pyfs.getinfo(filename)\n        except fs.errors.ResourceNotFound:\n            return \"path does not exist\"\n        if info.is_dir:\n            return \"directory that could not be opened as a filesystem, this should not happen\"  # pragma: no cover\n        return 'file'\n    namastes = find_namastes(0, pyfs=pyfs)\n    if len(namastes) == 0:\n        return \"no 0= declaration file\"\n    # Look at the first 0= Namaste file that is of OCFL form to determine type, if there are\n    # multiple declarations this will be caught later\n    for namaste in namastes:\n        m = re.match(r'''ocfl(_object)?_(\\d+\\.\\d+)$''', namaste.tvalue)\n        if m:\n            return 'root' if m.group(1) is None else 'object'\n    return \"unrecognized 0= declaration file or files (first is %s)\" % (namastes[0].tvalue)", "requirement": {"Functionality": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "Arguments": ""}}
{"namespace": "62b45b396decaeff903e1001", "namespace_real": "auto_nag.bzcleaner.amend_bzparams", "type": "class", "project_path": "mozilla/relman-auto-nag", "completion_path": "auto_nag/bzcleaner.py", "ce_id": "62b45b396decaeff903e1001", "signature_position": [355, null], "body_position": [null, 421], "signature": "def amend_bzparams(self, params, bug_ids):", "ground_truth": "    def amend_bzparams(self, params, bug_ids):\n        \"\"\"Amend the Bugzilla params\"\"\"\n        if not self.all_include_fields():\n            if \"include_fields\" in params:\n                fields = params[\"include_fields\"]\n                if isinstance(fields, list):\n                    if \"id\" not in fields:\n                        fields.append(\"id\")\n                elif isinstance(fields, str):\n                    if fields != \"id\":\n                        params[\"include_fields\"] = [fields, \"id\"]\n                else:\n                    params[\"include_fields\"] = [fields, \"id\"]\n            else:\n                params[\"include_fields\"] = [\"id\"]\n\n            params[\"include_fields\"] += [\"summary\", \"groups\"]\n\n            if self.has_assignee() and \"assigned_to\" not in params[\"include_fields\"]:\n                params[\"include_fields\"].append(\"assigned_to\")\n\n            if self.has_product_component():\n                if \"product\" not in params[\"include_fields\"]:\n                    params[\"include_fields\"].append(\"product\")\n                if \"component\" not in params[\"include_fields\"]:\n                    params[\"include_fields\"].append(\"component\")\n\n            if self.has_needinfo() and \"flags\" not in params[\"include_fields\"]:\n                params[\"include_fields\"].append(\"flags\")\n\n        if bug_ids:\n            params[\"bug_id\"] = bug_ids\n\n        if self.filter_no_nag_keyword():\n            n = utils.get_last_field_num(params)\n            params.update(\n                {\n                    \"f\" + n: \"status_whiteboard\",\n                    \"o\" + n: \"notsubstring\",\n                    \"v\" + n: \"[no-nag]\",\n                }\n            )\n\n        if self.ignore_meta():\n            n = utils.get_last_field_num(params)\n            params.update({\"f\" + n: \"keywords\", \"o\" + n: \"nowords\", \"v\" + n: \"meta\"})\n\n        # Limit the checkers to X years. Unlimited if max_years = -1\n        max_years = self.get_max_years()\n        if max_years > 0:\n            n = utils.get_last_field_num(params)\n            params.update(\n                {\n                    f\"f{n}\": \"creation_ts\",\n                    f\"o{n}\": \"greaterthan\",\n                    f\"v{n}\": f\"-{max_years}y\",\n                }\n            )\n\n        if self.has_default_products():\n            params[\"product\"] = self.get_products()\n\n        if not self.has_access_to_sec_bugs():\n            n = utils.get_last_field_num(params)\n            params.update({\"f\" + n: \"bug_group\", \"o\" + n: \"isempty\"})\n\n        self.has_flags = \"flags\" in params.get(\"include_fields\", [])", "requirement": {"Functionality": "Amend the Bugzilla params", "Arguments": ""}}
{"namespace": "62b4567ed7d32e5b55cc83d9", "namespace_real": "borgmatic.config.load.deep_merge_nodes", "type": "function", "project_path": "witten/atticmatic", "completion_path": "borgmatic/config/load.py", "ce_id": "62b4567ed7d32e5b55cc83d9", "signature_position": [68, null], "body_position": [null, 177], "signature": "def deep_merge_nodes(nodes):", "ground_truth": "def deep_merge_nodes(nodes):\n    '''\n    Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        ),\n\n    ... deep merge any node values corresponding to duplicate keys and return the result. If\n    there are colliding keys with non-MappingNode values (e.g., integers or strings), the last\n    of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                    ),\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                    ),\n                ]),\n            ),\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                    ),\n                ]),\n            ),\n        ]\n\n    ... the returned result would be:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                    ),\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                    ),\n                ]),\n            ),\n        ]\n\n    The purpose of deep merging like this is to support, for instance, merging one borgmatic\n    configuration file into another for reuse, such that a configuration section (\"retention\",\n    etc.) does not completely replace the corresponding section in a merged file.\n    '''\n    # Map from original node key/value to the replacement merged node. DELETED_NODE as a replacement\n    # node indications deletion.\n    replaced_nodes = {}\n\n    # To find nodes that require merging, compare each node with each other node.\n    for a_key, a_value in nodes:\n        for b_key, b_value in nodes:\n            # If we've already considered one of the nodes for merging, skip it.\n            if (a_key, a_value) in replaced_nodes or (b_key, b_value) in replaced_nodes:\n                continue\n\n            # If the keys match and the values are different, we need to merge these two A and B nodes.\n            if a_key.tag == b_key.tag and a_key.value == b_key.value and a_value != b_value:\n                # Since we're merging into the B node, consider the A node a duplicate and remove it.\n                replaced_nodes[(a_key, a_value)] = DELETED_NODE\n\n                # If we're dealing with MappingNodes, recurse and merge its values as well.\n                if isinstance(b_value, ruamel.yaml.nodes.MappingNode):\n                    replaced_nodes[(b_key, b_value)] = (\n                        b_key,\n                        ruamel.yaml.nodes.MappingNode(\n                            tag=b_value.tag,\n                            value=deep_merge_nodes(a_value.value + b_value.value),\n                            start_mark=b_value.start_mark,\n                            end_mark=b_value.end_mark,\n                            flow_style=b_value.flow_style,\n                            comment=b_value.comment,\n                            anchor=b_value.anchor,\n                        ),\n                    )\n                # If we're dealing with SequenceNodes, merge by appending one sequence to the other.\n                elif isinstance(b_value, ruamel.yaml.nodes.SequenceNode):\n                    replaced_nodes[(b_key, b_value)] = (\n                        b_key,\n                        ruamel.yaml.nodes.SequenceNode(\n                            tag=b_value.tag,\n                            value=a_value.value + b_value.value,\n                            start_mark=b_value.start_mark,\n                            end_mark=b_value.end_mark,\n                            flow_style=b_value.flow_style,\n                            comment=b_value.comment,\n                            anchor=b_value.anchor,\n                        ),\n                    )\n\n    return [\n        replaced_nodes.get(node, node) for node in nodes if replaced_nodes.get(node) != DELETED_NODE\n    ]", "requirement": {"Functionality": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "Arguments": ""}}
{"namespace": "62b4567ad7d32e5b55cc83af", "namespace_real": "borgmatic.commands.generate_config.parse_arguments", "type": "function", "project_path": "witten/atticmatic", "completion_path": "borgmatic/commands/generate_config.py", "ce_id": "62b4567ad7d32e5b55cc83af", "signature_position": [9, null], "body_position": [null, 37], "signature": "def parse_arguments(*arguments):", "ground_truth": "def parse_arguments(*arguments):\n    '''\n    Given command-line arguments with which this script was invoked, parse the arguments and return\n    them as an ArgumentParser instance.\n    '''\n    parser = ArgumentParser(description='Generate a sample borgmatic YAML configuration file.')\n    parser.add_argument(\n        '-s',\n        '--source',\n        dest='source_filename',\n        help='Optional YAML configuration file to merge into the generated configuration, useful for upgrading your configuration',\n    )\n    parser.add_argument(\n        '-d',\n        '--destination',\n        dest='destination_filename',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Destination YAML configuration file, default: {}'.format(\n            DEFAULT_DESTINATION_CONFIG_FILENAME\n        ),\n    )\n    parser.add_argument(\n        '--overwrite',\n        default=False,\n        action='store_true',\n        help='Whether to overwrite any existing destination file, defaults to false',\n    )\n\n    return parser.parse_args(arguments)", "requirement": {"Functionality": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "Arguments": ""}}
{"namespace": "62b45679d7d32e5b55cc83a9", "namespace_real": "borgmatic.commands.completion.parser_flags", "type": "function", "project_path": "witten/atticmatic", "completion_path": "borgmatic/commands/completion.py", "ce_id": "62b45679d7d32e5b55cc83a9", "signature_position": [13, null], "body_position": [null, 18], "signature": "def parser_flags(parser):", "ground_truth": "def parser_flags(parser):\n    '''\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\n    string.\n    '''\n    return ' '.join(option for action in parser._actions for option in action.option_strings)", "requirement": {"Functionality": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "Arguments": ""}}
{"namespace": "62b45665d7d32e5b55cc8365", "namespace_real": "borgmatic.commands.arguments.parse_arguments", "type": "function", "project_path": "witten/atticmatic", "completion_path": "borgmatic/commands/arguments.py", "ce_id": "62b45665d7d32e5b55cc8365", "signature_position": [677, null], "body_position": [null, 705], "signature": "def parse_arguments(*unparsed_arguments):", "ground_truth": "def parse_arguments(*unparsed_arguments):\n    '''\n    Given command-line arguments with which this script was invoked, parse the arguments and return\n    them as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.\n    '''\n    top_level_parser, subparsers = make_parsers()\n\n    arguments, remaining_arguments = parse_subparser_arguments(\n        unparsed_arguments, subparsers.choices\n    )\n    arguments['global'] = top_level_parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes option has been replaced with exclude_patterns in configuration'\n        )\n\n    if 'init' in arguments and arguments['global'].dry_run:\n        raise ValueError('The init action cannot be used with the --dry-run option')\n\n    if (\n        'list' in arguments\n        and 'info' in arguments\n        and arguments['list'].json\n        and arguments['info'].json\n    ):\n        raise ValueError('With the --json option, list and info actions cannot be used together')\n\n    return arguments", "requirement": {"Functionality": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "Arguments": ""}}
{"namespace": "62b45665d7d32e5b55cc8364", "namespace_real": "borgmatic.commands.arguments.parse_subparser_arguments", "type": "function", "project_path": "witten/atticmatic", "completion_path": "borgmatic/commands/arguments.py", "ce_id": "62b45665d7d32e5b55cc8364", "signature_position": [23, null], "body_position": [null, 95], "signature": "def parse_subparser_arguments(unparsed_arguments, subparsers):", "ground_truth": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    '''\n    Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\n    instance, give each requested action's subparser a shot at parsing all arguments. This allows\n    common arguments like \"--repository\" to be shared across multiple subparsers.\n\n    Return the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\n    arguments, a list of remaining arguments not claimed by any subparser).\n    '''\n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    # If the \"borg\" action is used, skip all other subparsers. This avoids confusion like\n    # \"borg list\" triggering borgmatic's own list action.\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n\n        canonical_name = alias_to_subparser_name.get(subparser_name, subparser_name)\n\n        # If a parsed value happens to be the same as the name of a subparser, remove it from the\n        # remaining arguments. This prevents, for instance, \"check --only extract\" from triggering\n        # the \"extract\" subparser.\n        parsed, unused_remaining = subparser.parse_known_args(unparsed_arguments)\n        for value in vars(parsed).values():\n            if isinstance(value, str):\n                if value in subparsers:\n                    remaining_arguments.remove(value)\n            elif isinstance(value, list):\n                for item in value:\n                    if item in subparsers:\n                        remaining_arguments.remove(item)\n\n        arguments[canonical_name] = parsed\n\n    # If no actions are explicitly requested, assume defaults: prune, compact, create, and check.\n    if not arguments and '--help' not in unparsed_arguments and '-h' not in unparsed_arguments:\n        for subparser_name in ('prune', 'compact', 'create', 'check'):\n            subparser = subparsers[subparser_name]\n            parsed, unused_remaining = subparser.parse_known_args(unparsed_arguments)\n            arguments[subparser_name] = parsed\n\n    remaining_arguments = list(unparsed_arguments)\n\n    # Now ask each subparser, one by one, to greedily consume arguments.\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in arguments.keys():\n            continue\n\n        subparser = subparsers[subparser_name]\n        unused_parsed, remaining_arguments = subparser.parse_known_args(remaining_arguments)\n\n    # Special case: If \"borg\" is present in the arguments, consume all arguments after (+1) the\n    # \"borg\" action.\n    if 'borg' in arguments:\n        borg_options_index = remaining_arguments.index('borg') + 1\n        arguments['borg'].options = remaining_arguments[borg_options_index:]\n        remaining_arguments = remaining_arguments[:borg_options_index]\n\n    # Remove the subparser names themselves.\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name in remaining_arguments:\n            remaining_arguments.remove(subparser_name)\n\n    return (arguments, remaining_arguments)", "requirement": {"Functionality": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "Arguments": ""}}
{"namespace": "62b45665d7d32e5b55cc8363", "namespace_real": "borgmatic.commands.arguments.make_parsers", "type": "function", "project_path": "witten/atticmatic", "completion_path": "borgmatic/commands/arguments.py", "ce_id": "62b45665d7d32e5b55cc8363", "signature_position": [112, null], "body_position": [null, 674], "signature": "def make_parsers():", "ground_truth": "def make_parsers():\n    '''\n    Build a top-level parser and its subparsers and return them as a tuple.\n    '''\n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument(\n        '--excludes',\n        dest='excludes_filename',\n        help='Deprecated in favor of exclude_patterns within configuration',\n    )\n    global_group.add_argument(\n        '-n',\n        '--dry-run',\n        dest='dry_run',\n        action='store_true',\n        help='Go through the motions, but do not actually write to any repositories',\n    )\n    global_group.add_argument(\n        '-nc', '--no-color', dest='no_color', action='store_true', help='Disable colored output'\n    )\n    global_group.add_argument(\n        '-v',\n        '--verbosity',\n        type=int,\n        choices=range(-1, 3),\n        default=0,\n        help='Display verbose progress to the console (from only errors to very verbose: -1, 0, 1, or 2)',\n    )\n    global_group.add_argument(\n        '--syslog-verbosity',\n        type=int,\n        choices=range(-1, 3),\n        default=0,\n        help='Log verbose progress to syslog (from only errors to very verbose: -1, 0, 1, or 2). Ignored when console is interactive or --log-file is given',\n    )\n    global_group.add_argument(\n        '--log-file-verbosity',\n        type=int,\n        choices=range(-1, 3),\n        default=0,\n        help='Log verbose progress to log file (from only errors to very verbose: -1, 0, 1, or 2). Only used when --log-file is given',\n    )\n    global_group.add_argument(\n        '--monitoring-verbosity',\n        type=int,\n        choices=range(-1, 3),\n        default=0,\n        help='Log verbose progress to monitoring integrations that support logging (from only errors to very verbose: -1, 0, 1, or 2)',\n    )\n    global_group.add_argument(\n        '--log-file',\n        type=str,\n        default=None,\n        help='Write log messages to this file instead of syslog',\n    )\n    global_group.add_argument(\n        '--override',\n        metavar='SECTION.OPTION=VALUE',\n        nargs='+',\n        dest='overrides',\n        action='extend',\n        help='One or more configuration file options to override with specified values',\n    )\n    global_group.add_argument(\n        '--no-environment-interpolation',\n        dest='resolve_env',\n        action='store_false',\n        help='Do not resolve environment variables in configuration file',\n    )\n    global_group.add_argument(\n        '--bash-completion',\n        default=False,\n        action='store_true',\n        help='Show bash completion script and exit',\n    )\n    global_group.add_argument(\n        '--version',\n        dest='version',\n        default=False,\n        action='store_true',\n        help='Display installed version number of borgmatic and exit',\n    )\n\n    top_level_parser = ArgumentParser(\n        description='''\n            Simple, configuration-driven backup software for servers and workstations. If none of\n            the action options are given, then borgmatic defaults to: prune, compact, create, and\n            check.\n            ''',\n        parents=[global_parser],\n    )\n\n    subparsers = top_level_parser.add_subparsers(\n        title='actions',\n        metavar='',\n        help='Specify zero or more actions. Defaults to prune, compact, create, and check. Use --help with action for details:',\n    )\n    init_parser = subparsers.add_parser(\n        'init',\n        aliases=SUBPARSER_ALIASES['init'],\n        help='Initialize an empty Borg repository',\n        description='Initialize an empty Borg repository',\n        add_help=False,\n    )\n    init_group = init_parser.add_argument_group('init arguments')\n    init_group.add_argument(\n        '-e',\n        '--encryption',\n        dest='encryption_mode',\n        help='Borg repository encryption mode',\n        required=True,\n    )\n    init_group.add_argument(\n        '--append-only',\n        dest='append_only',\n        action='store_true',\n        help='Create an append-only repository',\n    )\n    init_group.add_argument(\n        '--storage-quota',\n        dest='storage_quota',\n        help='Create a repository with a fixed storage quota',\n    )\n    init_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    prune_parser = subparsers.add_parser(\n        'prune',\n        aliases=SUBPARSER_ALIASES['prune'],\n        help='Prune archives according to the retention policy (with Borg 1.2+, run compact afterwards to actually free space)',\n        description='Prune archives according to the retention policy (with Borg 1.2+, run compact afterwards to actually free space)',\n        add_help=False,\n    )\n    prune_group = prune_parser.add_argument_group('prune arguments')\n    prune_group.add_argument(\n        '--stats',\n        dest='stats',\n        default=False,\n        action='store_true',\n        help='Display statistics of archive',\n    )\n    prune_group.add_argument(\n        '--files', dest='files', default=False, action='store_true', help='Show per-file details'\n    )\n    prune_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    compact_parser = subparsers.add_parser(\n        'compact',\n        aliases=SUBPARSER_ALIASES['compact'],\n        help='Compact segments to free space (Borg 1.2+ only)',\n        description='Compact segments to free space (Borg 1.2+ only)',\n        add_help=False,\n    )\n    compact_group = compact_parser.add_argument_group('compact arguments')\n    compact_group.add_argument(\n        '--progress',\n        dest='progress',\n        default=False,\n        action='store_true',\n        help='Display progress as each segment is compacted',\n    )\n    compact_group.add_argument(\n        '--cleanup-commits',\n        dest='cleanup_commits',\n        default=False,\n        action='store_true',\n        help='Cleanup commit-only 17-byte segment files left behind by Borg 1.1',\n    )\n    compact_group.add_argument(\n        '--threshold',\n        type=int,\n        dest='threshold',\n        help='Minimum saved space percentage threshold for compacting a segment, defaults to 10',\n    )\n    compact_group.add_argument(\n        '-h', '--help', action='help', help='Show this help message and exit'\n    )\n\n    create_parser = subparsers.add_parser(\n        'create',\n        aliases=SUBPARSER_ALIASES['create'],\n        help='Create archives (actually perform backups)',\n        description='Create archives (actually perform backups)',\n        add_help=False,\n    )\n    create_group = create_parser.add_argument_group('create arguments')\n    create_group.add_argument(\n        '--progress',\n        dest='progress',\n        default=False,\n        action='store_true',\n        help='Display progress for each file as it is backed up',\n    )\n    create_group.add_argument(\n        '--stats',\n        dest='stats',\n        default=False,\n        action='store_true',\n        help='Display statistics of archive',\n    )\n    create_group.add_argument(\n        '--files', dest='files', default=False, action='store_true', help='Show per-file details'\n    )\n    create_group.add_argument(\n        '--json', dest='json', default=False, action='store_true', help='Output results as JSON'\n    )\n    create_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    check_parser = subparsers.add_parser(\n        'check',\n        aliases=SUBPARSER_ALIASES['check'],\n        help='Check archives for consistency',\n        description='Check archives for consistency',\n        add_help=False,\n    )\n    check_group = check_parser.add_argument_group('check arguments')\n    check_group.add_argument(\n        '--progress',\n        dest='progress',\n        default=False,\n        action='store_true',\n        help='Display progress for each file as it is checked',\n    )\n    check_group.add_argument(\n        '--repair',\n        dest='repair',\n        default=False,\n        action='store_true',\n        help='Attempt to repair any inconsistencies found (for interactive use)',\n    )\n    check_group.add_argument(\n        '--only',\n        metavar='CHECK',\n        choices=('repository', 'archives', 'data', 'extract'),\n        dest='only',\n        action='append',\n        help='Run a particular consistency check (repository, archives, data, or extract) instead of configured checks (subject to configured frequency, can specify flag multiple times)',\n    )\n    check_group.add_argument(\n        '--force',\n        default=False,\n        action='store_true',\n        help='Ignore configured check frequencies and run checks unconditionally',\n    )\n    check_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    extract_parser = subparsers.add_parser(\n        'extract',\n        aliases=SUBPARSER_ALIASES['extract'],\n        help='Extract files from a named archive to the current directory',\n        description='Extract a named archive to the current directory',\n        add_help=False,\n    )\n    extract_group = extract_parser.add_argument_group('extract arguments')\n    extract_group.add_argument(\n        '--repository',\n        help='Path of repository to extract, defaults to the configured repository if there is only one',\n    )\n    extract_group.add_argument(\n        '--archive', help='Name of archive to extract (or \"latest\")', required=True\n    )\n    extract_group.add_argument(\n        '--path',\n        '--restore-path',\n        metavar='PATH',\n        nargs='+',\n        dest='paths',\n        help='Paths to extract from archive, defaults to the entire archive',\n    )\n    extract_group.add_argument(\n        '--destination',\n        metavar='PATH',\n        dest='destination',\n        help='Directory to extract files into, defaults to the current directory',\n    )\n    extract_group.add_argument(\n        '--strip-components',\n        type=int,\n        metavar='NUMBER',\n        dest='strip_components',\n        help='Number of leading path components to remove from each extracted path. Skip paths with fewer elements',\n    )\n    extract_group.add_argument(\n        '--progress',\n        dest='progress',\n        default=False,\n        action='store_true',\n        help='Display progress for each file as it is extracted',\n    )\n    extract_group.add_argument(\n        '-h', '--help', action='help', help='Show this help message and exit'\n    )\n\n    export_tar_parser = subparsers.add_parser(\n        'export-tar',\n        aliases=SUBPARSER_ALIASES['export-tar'],\n        help='Export an archive to a tar-formatted file or stream',\n        description='Export an archive to a tar-formatted file or stream',\n        add_help=False,\n    )\n    export_tar_group = export_tar_parser.add_argument_group('export-tar arguments')\n    export_tar_group.add_argument(\n        '--repository',\n        help='Path of repository to export from, defaults to the configured repository if there is only one',\n    )\n    export_tar_group.add_argument(\n        '--archive', help='Name of archive to export (or \"latest\")', required=True\n    )\n    export_tar_group.add_argument(\n        '--path',\n        metavar='PATH',\n        nargs='+',\n        dest='paths',\n        help='Paths to export from archive, defaults to the entire archive',\n    )\n    export_tar_group.add_argument(\n        '--destination',\n        metavar='PATH',\n        dest='destination',\n        help='Path to destination export tar file, or \"-\" for stdout (but be careful about dirtying output with --verbosity or --files)',\n        required=True,\n    )\n    export_tar_group.add_argument(\n        '--tar-filter', help='Name of filter program to pipe data through'\n    )\n    export_tar_group.add_argument(\n        '--files', default=False, action='store_true', help='Show per-file details'\n    )\n    export_tar_group.add_argument(\n        '--strip-components',\n        type=int,\n        metavar='NUMBER',\n        dest='strip_components',\n        help='Number of leading path components to remove from each exported path. Skip paths with fewer elements',\n    )\n    export_tar_group.add_argument(\n        '-h', '--help', action='help', help='Show this help message and exit'\n    )\n\n    mount_parser = subparsers.add_parser(\n        'mount',\n        aliases=SUBPARSER_ALIASES['mount'],\n        help='Mount files from a named archive as a FUSE filesystem',\n        description='Mount a named archive as a FUSE filesystem',\n        add_help=False,\n    )\n    mount_group = mount_parser.add_argument_group('mount arguments')\n    mount_group.add_argument(\n        '--repository',\n        help='Path of repository to use, defaults to the configured repository if there is only one',\n    )\n    mount_group.add_argument('--archive', help='Name of archive to mount (or \"latest\")')\n    mount_group.add_argument(\n        '--mount-point',\n        metavar='PATH',\n        dest='mount_point',\n        help='Path where filesystem is to be mounted',\n        required=True,\n    )\n    mount_group.add_argument(\n        '--path',\n        metavar='PATH',\n        nargs='+',\n        dest='paths',\n        help='Paths to mount from archive, defaults to the entire archive',\n    )\n    mount_group.add_argument(\n        '--foreground',\n        dest='foreground',\n        default=False,\n        action='store_true',\n        help='Stay in foreground until ctrl-C is pressed',\n    )\n    mount_group.add_argument('--options', dest='options', help='Extra Borg mount options')\n    mount_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    umount_parser = subparsers.add_parser(\n        'umount',\n        aliases=SUBPARSER_ALIASES['umount'],\n        help='Unmount a FUSE filesystem that was mounted with \"borgmatic mount\"',\n        description='Unmount a mounted FUSE filesystem',\n        add_help=False,\n    )\n    umount_group = umount_parser.add_argument_group('umount arguments')\n    umount_group.add_argument(\n        '--mount-point',\n        metavar='PATH',\n        dest='mount_point',\n        help='Path of filesystem to unmount',\n        required=True,\n    )\n    umount_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    restore_parser = subparsers.add_parser(\n        'restore',\n        aliases=SUBPARSER_ALIASES['restore'],\n        help='Restore database dumps from a named archive',\n        description='Restore database dumps from a named archive. (To extract files instead, use \"borgmatic extract\".)',\n        add_help=False,\n    )\n    restore_group = restore_parser.add_argument_group('restore arguments')\n    restore_group.add_argument(\n        '--repository',\n        help='Path of repository to restore from, defaults to the configured repository if there is only one',\n    )\n    restore_group.add_argument(\n        '--archive', help='Name of archive to restore from (or \"latest\")', required=True\n    )\n    restore_group.add_argument(\n        '--database',\n        metavar='NAME',\n        nargs='+',\n        dest='databases',\n        help='Names of databases to restore from archive, defaults to all databases. Note that any databases to restore must be defined in borgmatic\\'s configuration',\n    )\n    restore_group.add_argument(\n        '-h', '--help', action='help', help='Show this help message and exit'\n    )\n\n    list_parser = subparsers.add_parser(\n        'list',\n        aliases=SUBPARSER_ALIASES['list'],\n        help='List archives',\n        description='List archives or the contents of an archive',\n        add_help=False,\n    )\n    list_group = list_parser.add_argument_group('list arguments')\n    list_group.add_argument(\n        '--repository', help='Path of repository to list, defaults to the configured repositories',\n    )\n    list_group.add_argument('--archive', help='Name of archive to list (or \"latest\")')\n    list_group.add_argument(\n        '--path',\n        metavar='PATH',\n        nargs='+',\n        dest='paths',\n        help='Paths or patterns to list from a single selected archive (via \"--archive\"), defaults to listing the entire archive',\n    )\n    list_group.add_argument(\n        '--find',\n        metavar='PATH',\n        nargs='+',\n        dest='find_paths',\n        help='Partial paths or patterns to search for and list across multiple archives',\n    )\n    list_group.add_argument(\n        '--short', default=False, action='store_true', help='Output only archive or path names'\n    )\n    list_group.add_argument('--format', help='Format for file listing')\n    list_group.add_argument(\n        '--json', default=False, action='store_true', help='Output results as JSON'\n    )\n    list_group.add_argument(\n        '-P', '--prefix', help='Only list archive names starting with this prefix'\n    )\n    list_group.add_argument(\n        '-a', '--glob-archives', metavar='GLOB', help='Only list archive names matching this glob'\n    )\n    list_group.add_argument(\n        '--successful',\n        default=True,\n        action='store_true',\n        help='Deprecated in favor of listing successful (non-checkpoint) backups by default in newer versions of Borg',\n    )\n    list_group.add_argument(\n        '--sort-by', metavar='KEYS', help='Comma-separated list of sorting keys'\n    )\n    list_group.add_argument(\n        '--first', metavar='N', help='List first N archives after other filters are applied'\n    )\n    list_group.add_argument(\n        '--last', metavar='N', help='List last N archives after other filters are applied'\n    )\n    list_group.add_argument(\n        '-e', '--exclude', metavar='PATTERN', help='Exclude paths matching the pattern'\n    )\n    list_group.add_argument(\n        '--exclude-from', metavar='FILENAME', help='Exclude paths from exclude file, one per line'\n    )\n    list_group.add_argument('--pattern', help='Include or exclude paths matching a pattern')\n    list_group.add_argument(\n        '--patterns-from',\n        metavar='FILENAME',\n        help='Include or exclude paths matching patterns from pattern file, one per line',\n    )\n    list_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    info_parser = subparsers.add_parser(\n        'info',\n        aliases=SUBPARSER_ALIASES['info'],\n        help='Display summary information on archives',\n        description='Display summary information on archives',\n        add_help=False,\n    )\n    info_group = info_parser.add_argument_group('info arguments')\n    info_group.add_argument(\n        '--repository',\n        help='Path of repository to show info for, defaults to the configured repository if there is only one',\n    )\n    info_group.add_argument('--archive', help='Name of archive to show info for (or \"latest\")')\n    info_group.add_argument(\n        '--json', dest='json', default=False, action='store_true', help='Output results as JSON'\n    )\n    info_group.add_argument(\n        '-P', '--prefix', help='Only show info for archive names starting with this prefix'\n    )\n    info_group.add_argument(\n        '-a',\n        '--glob-archives',\n        metavar='GLOB',\n        help='Only show info for archive names matching this glob',\n    )\n    info_group.add_argument(\n        '--sort-by', metavar='KEYS', help='Comma-separated list of sorting keys'\n    )\n    info_group.add_argument(\n        '--first',\n        metavar='N',\n        help='Show info for first N archives after other filters are applied',\n    )\n    info_group.add_argument(\n        '--last', metavar='N', help='Show info for last N archives after other filters are applied'\n    )\n    info_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    borg_parser = subparsers.add_parser(\n        'borg',\n        aliases=SUBPARSER_ALIASES['borg'],\n        help='Run an arbitrary Borg command',\n        description='Run an arbitrary Borg command based on borgmatic\\'s configuration',\n        add_help=False,\n    )\n    borg_group = borg_parser.add_argument_group('borg arguments')\n    borg_group.add_argument(\n        '--repository',\n        help='Path of repository to pass to Borg, defaults to the configured repositories',\n    )\n    borg_group.add_argument('--archive', help='Name of archive to pass to Borg (or \"latest\")')\n    borg_group.add_argument(\n        '--',\n        metavar='OPTION',\n        dest='options',\n        nargs='+',\n        help='Options to pass to Borg, command first (\"create\", \"list\", etc). \"--\" is optional. To specify the repository or the archive, you must use --repository or --archive instead of providing them here.',\n    )\n    borg_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    return top_level_parser, subparsers", "requirement": {"Functionality": "Build a top-level parser and its subparsers and return them as a tuple.", "Arguments": ""}}
{"namespace": "62b438ba66fea644fe22cca2", "namespace_real": "borgmatic.config.load.deep_merge_nodes", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/config/load.py", "ce_id": "62b438ba66fea644fe22cca2", "signature_position": [68, null], "body_position": [null, 177], "signature": "def deep_merge_nodes(nodes):", "ground_truth": "def deep_merge_nodes(nodes):\n    '''\n    Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        ),\n\n    ... deep merge any node values corresponding to duplicate keys and return the result. If\n    there are colliding keys with non-MappingNode values (e.g., integers or strings), the last\n    of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                    ),\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                    ),\n                ]),\n            ),\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                    ),\n                ]),\n            ),\n        ]\n\n    ... the returned result would be:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                    ),\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                        ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                    ),\n                ]),\n            ),\n        ]\n\n    The purpose of deep merging like this is to support, for instance, merging one borgmatic\n    configuration file into another for reuse, such that a configuration section (\"retention\",\n    etc.) does not completely replace the corresponding section in a merged file.\n    '''\n    # Map from original node key/value to the replacement merged node. DELETED_NODE as a replacement\n    # node indications deletion.\n    replaced_nodes = {}\n\n    # To find nodes that require merging, compare each node with each other node.\n    for a_key, a_value in nodes:\n        for b_key, b_value in nodes:\n            # If we've already considered one of the nodes for merging, skip it.\n            if (a_key, a_value) in replaced_nodes or (b_key, b_value) in replaced_nodes:\n                continue\n\n            # If the keys match and the values are different, we need to merge these two A and B nodes.\n            if a_key.tag == b_key.tag and a_key.value == b_key.value and a_value != b_value:\n                # Since we're merging into the B node, consider the A node a duplicate and remove it.\n                replaced_nodes[(a_key, a_value)] = DELETED_NODE\n\n                # If we're dealing with MappingNodes, recurse and merge its values as well.\n                if isinstance(b_value, ruamel.yaml.nodes.MappingNode):\n                    replaced_nodes[(b_key, b_value)] = (\n                        b_key,\n                        ruamel.yaml.nodes.MappingNode(\n                            tag=b_value.tag,\n                            value=deep_merge_nodes(a_value.value + b_value.value),\n                            start_mark=b_value.start_mark,\n                            end_mark=b_value.end_mark,\n                            flow_style=b_value.flow_style,\n                            comment=b_value.comment,\n                            anchor=b_value.anchor,\n                        ),\n                    )\n                # If we're dealing with SequenceNodes, merge by appending one sequence to the other.\n                elif isinstance(b_value, ruamel.yaml.nodes.SequenceNode):\n                    replaced_nodes[(b_key, b_value)] = (\n                        b_key,\n                        ruamel.yaml.nodes.SequenceNode(\n                            tag=b_value.tag,\n                            value=a_value.value + b_value.value,\n                            start_mark=b_value.start_mark,\n                            end_mark=b_value.end_mark,\n                            flow_style=b_value.flow_style,\n                            comment=b_value.comment,\n                            anchor=b_value.anchor,\n                        ),\n                    )\n\n    return [\n        replaced_nodes.get(node, node) for node in nodes if replaced_nodes.get(node) != DELETED_NODE\n    ]", "requirement": {"Functionality": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "Arguments": ""}}
{"namespace": "62b438b666fea644fe22cc78", "namespace_real": "borgmatic.commands.generate_config.parse_arguments", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/commands/generate_config.py", "ce_id": "62b438b666fea644fe22cc78", "signature_position": [9, null], "body_position": [null, 37], "signature": "def parse_arguments(*arguments):", "ground_truth": "def parse_arguments(*arguments):\n    '''\n    Given command-line arguments with which this script was invoked, parse the arguments and return\n    them as an ArgumentParser instance.\n    '''\n    parser = ArgumentParser(description='Generate a sample borgmatic YAML configuration file.')\n    parser.add_argument(\n        '-s',\n        '--source',\n        dest='source_filename',\n        help='Optional YAML configuration file to merge into the generated configuration, useful for upgrading your configuration',\n    )\n    parser.add_argument(\n        '-d',\n        '--destination',\n        dest='destination_filename',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Destination YAML configuration file, default: {}'.format(\n            DEFAULT_DESTINATION_CONFIG_FILENAME\n        ),\n    )\n    parser.add_argument(\n        '--overwrite',\n        default=False,\n        action='store_true',\n        help='Whether to overwrite any existing destination file, defaults to false',\n    )\n\n    return parser.parse_args(arguments)", "requirement": {"Functionality": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "Arguments": ""}}
{"namespace": "62b438b666fea644fe22cc72", "namespace_real": "borgmatic.commands.completion.parser_flags", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/commands/completion.py", "ce_id": "62b438b666fea644fe22cc72", "signature_position": [13, null], "body_position": [null, 18], "signature": "def parser_flags(parser):", "ground_truth": "def parser_flags(parser):\n    '''\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\n    string.\n    '''\n    return ' '.join(option for action in parser._actions for option in action.option_strings)", "requirement": {"Functionality": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "Arguments": ""}}
{"namespace": "62b438b566fea644fe22cc70", "namespace_real": "borgmatic.commands.completion.bash_completion", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/commands/completion.py", "ce_id": "62b438b566fea644fe22cc70", "signature_position": [21, null], "body_position": [null, 57], "signature": "def bash_completion():", "ground_truth": "def bash_completion():\n    '''\n    Return a bash completion script for the borgmatic command. Produce this by introspecting\n    borgmatic's command-line argument parsers.\n    '''\n    top_level_parser, subparsers = arguments.make_parsers()\n    global_flags = parser_flags(top_level_parser)\n    actions = ' '.join(subparsers.choices.keys())\n\n    # Avert your eyes.\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script=\"$(borgmatic --bash-completion 2> /dev/null)\"',\n            '    if [ \"$this_script\" != \"$installed_script\" ] && [ \"$installed_script\" != \"\" ];'\n            '        then cat << EOF\\n%s\\nEOF' % UPGRADE_MESSAGE,\n            '    fi',\n            '}',\n            'complete_borgmatic() {',\n        )\n        + tuple(\n            '''    if [[ \" ${COMP_WORDS[*]} \" =~ \" %s \" ]]; then\n        COMPREPLY=($(compgen -W \"%s %s %s\" -- \"${COMP_WORDS[COMP_CWORD]}\"))\n        return 0\n    fi'''\n            % (action, parser_flags(subparser), actions, global_flags)\n            for action, subparser in subparsers.choices.items()\n        )\n        + (\n            '    COMPREPLY=($(compgen -W \"%s %s\" -- \"${COMP_WORDS[COMP_CWORD]}\"))'\n            % (actions, global_flags),\n            '    (check_version &)',\n            '}',\n            '\\ncomplete -o bashdefault -o default -F complete_borgmatic borgmatic',\n        )\n    )", "requirement": {"Functionality": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "Arguments": ""}}
{"namespace": "62b438a266fea644fe22cc2e", "namespace_real": "borgmatic.commands.arguments.parse_arguments", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/commands/arguments.py", "ce_id": "62b438a266fea644fe22cc2e", "signature_position": [677, null], "body_position": [null, 705], "signature": "def parse_arguments(*unparsed_arguments):", "ground_truth": "def parse_arguments(*unparsed_arguments):\n    '''\n    Given command-line arguments with which this script was invoked, parse the arguments and return\n    them as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.\n    '''\n    top_level_parser, subparsers = make_parsers()\n\n    arguments, remaining_arguments = parse_subparser_arguments(\n        unparsed_arguments, subparsers.choices\n    )\n    arguments['global'] = top_level_parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes option has been replaced with exclude_patterns in configuration'\n        )\n\n    if 'init' in arguments and arguments['global'].dry_run:\n        raise ValueError('The init action cannot be used with the --dry-run option')\n\n    if (\n        'list' in arguments\n        and 'info' in arguments\n        and arguments['list'].json\n        and arguments['info'].json\n    ):\n        raise ValueError('With the --json option, list and info actions cannot be used together')\n\n    return arguments", "requirement": {"Functionality": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "Arguments": ""}}
{"namespace": "62b438a266fea644fe22cc2d", "namespace_real": "borgmatic.commands.arguments.parse_subparser_arguments", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/commands/arguments.py", "ce_id": "62b438a266fea644fe22cc2d", "signature_position": [23, null], "body_position": [null, 95], "signature": "def parse_subparser_arguments(unparsed_arguments, subparsers):", "ground_truth": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    '''\n    Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\n    instance, give each requested action's subparser a shot at parsing all arguments. This allows\n    common arguments like \"--repository\" to be shared across multiple subparsers.\n\n    Return the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\n    arguments, a list of remaining arguments not claimed by any subparser).\n    '''\n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    # If the \"borg\" action is used, skip all other subparsers. This avoids confusion like\n    # \"borg list\" triggering borgmatic's own list action.\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n\n        canonical_name = alias_to_subparser_name.get(subparser_name, subparser_name)\n\n        # If a parsed value happens to be the same as the name of a subparser, remove it from the\n        # remaining arguments. This prevents, for instance, \"check --only extract\" from triggering\n        # the \"extract\" subparser.\n        parsed, unused_remaining = subparser.parse_known_args(unparsed_arguments)\n        for value in vars(parsed).values():\n            if isinstance(value, str):\n                if value in subparsers:\n                    remaining_arguments.remove(value)\n            elif isinstance(value, list):\n                for item in value:\n                    if item in subparsers:\n                        remaining_arguments.remove(item)\n\n        arguments[canonical_name] = parsed\n\n    # If no actions are explicitly requested, assume defaults: prune, compact, create, and check.\n    if not arguments and '--help' not in unparsed_arguments and '-h' not in unparsed_arguments:\n        for subparser_name in ('prune', 'compact', 'create', 'check'):\n            subparser = subparsers[subparser_name]\n            parsed, unused_remaining = subparser.parse_known_args(unparsed_arguments)\n            arguments[subparser_name] = parsed\n\n    remaining_arguments = list(unparsed_arguments)\n\n    # Now ask each subparser, one by one, to greedily consume arguments.\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in arguments.keys():\n            continue\n\n        subparser = subparsers[subparser_name]\n        unused_parsed, remaining_arguments = subparser.parse_known_args(remaining_arguments)\n\n    # Special case: If \"borg\" is present in the arguments, consume all arguments after (+1) the\n    # \"borg\" action.\n    if 'borg' in arguments:\n        borg_options_index = remaining_arguments.index('borg') + 1\n        arguments['borg'].options = remaining_arguments[borg_options_index:]\n        remaining_arguments = remaining_arguments[:borg_options_index]\n\n    # Remove the subparser names themselves.\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name in remaining_arguments:\n            remaining_arguments.remove(subparser_name)\n\n    return (arguments, remaining_arguments)", "requirement": {"Functionality": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "Arguments": ""}}
{"namespace": "62b438a266fea644fe22cc2c", "namespace_real": "borgmatic.commands.arguments.make_parsers", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/commands/arguments.py", "ce_id": "62b438a266fea644fe22cc2c", "signature_position": [112, null], "body_position": [null, 674], "signature": "def make_parsers():", "ground_truth": "def make_parsers():\n    '''\n    Build a top-level parser and its subparsers and return them as a tuple.\n    '''\n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument(\n        '--excludes',\n        dest='excludes_filename',\n        help='Deprecated in favor of exclude_patterns within configuration',\n    )\n    global_group.add_argument(\n        '-n',\n        '--dry-run',\n        dest='dry_run',\n        action='store_true',\n        help='Go through the motions, but do not actually write to any repositories',\n    )\n    global_group.add_argument(\n        '-nc', '--no-color', dest='no_color', action='store_true', help='Disable colored output'\n    )\n    global_group.add_argument(\n        '-v',\n        '--verbosity',\n        type=int,\n        choices=range(-1, 3),\n        default=0,\n        help='Display verbose progress to the console (from only errors to very verbose: -1, 0, 1, or 2)',\n    )\n    global_group.add_argument(\n        '--syslog-verbosity',\n        type=int,\n        choices=range(-1, 3),\n        default=0,\n        help='Log verbose progress to syslog (from only errors to very verbose: -1, 0, 1, or 2). Ignored when console is interactive or --log-file is given',\n    )\n    global_group.add_argument(\n        '--log-file-verbosity',\n        type=int,\n        choices=range(-1, 3),\n        default=0,\n        help='Log verbose progress to log file (from only errors to very verbose: -1, 0, 1, or 2). Only used when --log-file is given',\n    )\n    global_group.add_argument(\n        '--monitoring-verbosity',\n        type=int,\n        choices=range(-1, 3),\n        default=0,\n        help='Log verbose progress to monitoring integrations that support logging (from only errors to very verbose: -1, 0, 1, or 2)',\n    )\n    global_group.add_argument(\n        '--log-file',\n        type=str,\n        default=None,\n        help='Write log messages to this file instead of syslog',\n    )\n    global_group.add_argument(\n        '--override',\n        metavar='SECTION.OPTION=VALUE',\n        nargs='+',\n        dest='overrides',\n        action='extend',\n        help='One or more configuration file options to override with specified values',\n    )\n    global_group.add_argument(\n        '--no-environment-interpolation',\n        dest='resolve_env',\n        action='store_false',\n        help='Do not resolve environment variables in configuration file',\n    )\n    global_group.add_argument(\n        '--bash-completion',\n        default=False,\n        action='store_true',\n        help='Show bash completion script and exit',\n    )\n    global_group.add_argument(\n        '--version',\n        dest='version',\n        default=False,\n        action='store_true',\n        help='Display installed version number of borgmatic and exit',\n    )\n\n    top_level_parser = ArgumentParser(\n        description='''\n            Simple, configuration-driven backup software for servers and workstations. If none of\n            the action options are given, then borgmatic defaults to: prune, compact, create, and\n            check.\n            ''',\n        parents=[global_parser],\n    )\n\n    subparsers = top_level_parser.add_subparsers(\n        title='actions',\n        metavar='',\n        help='Specify zero or more actions. Defaults to prune, compact, create, and check. Use --help with action for details:',\n    )\n    init_parser = subparsers.add_parser(\n        'init',\n        aliases=SUBPARSER_ALIASES['init'],\n        help='Initialize an empty Borg repository',\n        description='Initialize an empty Borg repository',\n        add_help=False,\n    )\n    init_group = init_parser.add_argument_group('init arguments')\n    init_group.add_argument(\n        '-e',\n        '--encryption',\n        dest='encryption_mode',\n        help='Borg repository encryption mode',\n        required=True,\n    )\n    init_group.add_argument(\n        '--append-only',\n        dest='append_only',\n        action='store_true',\n        help='Create an append-only repository',\n    )\n    init_group.add_argument(\n        '--storage-quota',\n        dest='storage_quota',\n        help='Create a repository with a fixed storage quota',\n    )\n    init_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    prune_parser = subparsers.add_parser(\n        'prune',\n        aliases=SUBPARSER_ALIASES['prune'],\n        help='Prune archives according to the retention policy (with Borg 1.2+, run compact afterwards to actually free space)',\n        description='Prune archives according to the retention policy (with Borg 1.2+, run compact afterwards to actually free space)',\n        add_help=False,\n    )\n    prune_group = prune_parser.add_argument_group('prune arguments')\n    prune_group.add_argument(\n        '--stats',\n        dest='stats',\n        default=False,\n        action='store_true',\n        help='Display statistics of archive',\n    )\n    prune_group.add_argument(\n        '--files', dest='files', default=False, action='store_true', help='Show per-file details'\n    )\n    prune_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    compact_parser = subparsers.add_parser(\n        'compact',\n        aliases=SUBPARSER_ALIASES['compact'],\n        help='Compact segments to free space (Borg 1.2+ only)',\n        description='Compact segments to free space (Borg 1.2+ only)',\n        add_help=False,\n    )\n    compact_group = compact_parser.add_argument_group('compact arguments')\n    compact_group.add_argument(\n        '--progress',\n        dest='progress',\n        default=False,\n        action='store_true',\n        help='Display progress as each segment is compacted',\n    )\n    compact_group.add_argument(\n        '--cleanup-commits',\n        dest='cleanup_commits',\n        default=False,\n        action='store_true',\n        help='Cleanup commit-only 17-byte segment files left behind by Borg 1.1',\n    )\n    compact_group.add_argument(\n        '--threshold',\n        type=int,\n        dest='threshold',\n        help='Minimum saved space percentage threshold for compacting a segment, defaults to 10',\n    )\n    compact_group.add_argument(\n        '-h', '--help', action='help', help='Show this help message and exit'\n    )\n\n    create_parser = subparsers.add_parser(\n        'create',\n        aliases=SUBPARSER_ALIASES['create'],\n        help='Create archives (actually perform backups)',\n        description='Create archives (actually perform backups)',\n        add_help=False,\n    )\n    create_group = create_parser.add_argument_group('create arguments')\n    create_group.add_argument(\n        '--progress',\n        dest='progress',\n        default=False,\n        action='store_true',\n        help='Display progress for each file as it is backed up',\n    )\n    create_group.add_argument(\n        '--stats',\n        dest='stats',\n        default=False,\n        action='store_true',\n        help='Display statistics of archive',\n    )\n    create_group.add_argument(\n        '--files', dest='files', default=False, action='store_true', help='Show per-file details'\n    )\n    create_group.add_argument(\n        '--json', dest='json', default=False, action='store_true', help='Output results as JSON'\n    )\n    create_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    check_parser = subparsers.add_parser(\n        'check',\n        aliases=SUBPARSER_ALIASES['check'],\n        help='Check archives for consistency',\n        description='Check archives for consistency',\n        add_help=False,\n    )\n    check_group = check_parser.add_argument_group('check arguments')\n    check_group.add_argument(\n        '--progress',\n        dest='progress',\n        default=False,\n        action='store_true',\n        help='Display progress for each file as it is checked',\n    )\n    check_group.add_argument(\n        '--repair',\n        dest='repair',\n        default=False,\n        action='store_true',\n        help='Attempt to repair any inconsistencies found (for interactive use)',\n    )\n    check_group.add_argument(\n        '--only',\n        metavar='CHECK',\n        choices=('repository', 'archives', 'data', 'extract'),\n        dest='only',\n        action='append',\n        help='Run a particular consistency check (repository, archives, data, or extract) instead of configured checks (subject to configured frequency, can specify flag multiple times)',\n    )\n    check_group.add_argument(\n        '--force',\n        default=False,\n        action='store_true',\n        help='Ignore configured check frequencies and run checks unconditionally',\n    )\n    check_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    extract_parser = subparsers.add_parser(\n        'extract',\n        aliases=SUBPARSER_ALIASES['extract'],\n        help='Extract files from a named archive to the current directory',\n        description='Extract a named archive to the current directory',\n        add_help=False,\n    )\n    extract_group = extract_parser.add_argument_group('extract arguments')\n    extract_group.add_argument(\n        '--repository',\n        help='Path of repository to extract, defaults to the configured repository if there is only one',\n    )\n    extract_group.add_argument(\n        '--archive', help='Name of archive to extract (or \"latest\")', required=True\n    )\n    extract_group.add_argument(\n        '--path',\n        '--restore-path',\n        metavar='PATH',\n        nargs='+',\n        dest='paths',\n        help='Paths to extract from archive, defaults to the entire archive',\n    )\n    extract_group.add_argument(\n        '--destination',\n        metavar='PATH',\n        dest='destination',\n        help='Directory to extract files into, defaults to the current directory',\n    )\n    extract_group.add_argument(\n        '--strip-components',\n        type=int,\n        metavar='NUMBER',\n        dest='strip_components',\n        help='Number of leading path components to remove from each extracted path. Skip paths with fewer elements',\n    )\n    extract_group.add_argument(\n        '--progress',\n        dest='progress',\n        default=False,\n        action='store_true',\n        help='Display progress for each file as it is extracted',\n    )\n    extract_group.add_argument(\n        '-h', '--help', action='help', help='Show this help message and exit'\n    )\n\n    export_tar_parser = subparsers.add_parser(\n        'export-tar',\n        aliases=SUBPARSER_ALIASES['export-tar'],\n        help='Export an archive to a tar-formatted file or stream',\n        description='Export an archive to a tar-formatted file or stream',\n        add_help=False,\n    )\n    export_tar_group = export_tar_parser.add_argument_group('export-tar arguments')\n    export_tar_group.add_argument(\n        '--repository',\n        help='Path of repository to export from, defaults to the configured repository if there is only one',\n    )\n    export_tar_group.add_argument(\n        '--archive', help='Name of archive to export (or \"latest\")', required=True\n    )\n    export_tar_group.add_argument(\n        '--path',\n        metavar='PATH',\n        nargs='+',\n        dest='paths',\n        help='Paths to export from archive, defaults to the entire archive',\n    )\n    export_tar_group.add_argument(\n        '--destination',\n        metavar='PATH',\n        dest='destination',\n        help='Path to destination export tar file, or \"-\" for stdout (but be careful about dirtying output with --verbosity or --files)',\n        required=True,\n    )\n    export_tar_group.add_argument(\n        '--tar-filter', help='Name of filter program to pipe data through'\n    )\n    export_tar_group.add_argument(\n        '--files', default=False, action='store_true', help='Show per-file details'\n    )\n    export_tar_group.add_argument(\n        '--strip-components',\n        type=int,\n        metavar='NUMBER',\n        dest='strip_components',\n        help='Number of leading path components to remove from each exported path. Skip paths with fewer elements',\n    )\n    export_tar_group.add_argument(\n        '-h', '--help', action='help', help='Show this help message and exit'\n    )\n\n    mount_parser = subparsers.add_parser(\n        'mount',\n        aliases=SUBPARSER_ALIASES['mount'],\n        help='Mount files from a named archive as a FUSE filesystem',\n        description='Mount a named archive as a FUSE filesystem',\n        add_help=False,\n    )\n    mount_group = mount_parser.add_argument_group('mount arguments')\n    mount_group.add_argument(\n        '--repository',\n        help='Path of repository to use, defaults to the configured repository if there is only one',\n    )\n    mount_group.add_argument('--archive', help='Name of archive to mount (or \"latest\")')\n    mount_group.add_argument(\n        '--mount-point',\n        metavar='PATH',\n        dest='mount_point',\n        help='Path where filesystem is to be mounted',\n        required=True,\n    )\n    mount_group.add_argument(\n        '--path',\n        metavar='PATH',\n        nargs='+',\n        dest='paths',\n        help='Paths to mount from archive, defaults to the entire archive',\n    )\n    mount_group.add_argument(\n        '--foreground',\n        dest='foreground',\n        default=False,\n        action='store_true',\n        help='Stay in foreground until ctrl-C is pressed',\n    )\n    mount_group.add_argument('--options', dest='options', help='Extra Borg mount options')\n    mount_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    umount_parser = subparsers.add_parser(\n        'umount',\n        aliases=SUBPARSER_ALIASES['umount'],\n        help='Unmount a FUSE filesystem that was mounted with \"borgmatic mount\"',\n        description='Unmount a mounted FUSE filesystem',\n        add_help=False,\n    )\n    umount_group = umount_parser.add_argument_group('umount arguments')\n    umount_group.add_argument(\n        '--mount-point',\n        metavar='PATH',\n        dest='mount_point',\n        help='Path of filesystem to unmount',\n        required=True,\n    )\n    umount_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    restore_parser = subparsers.add_parser(\n        'restore',\n        aliases=SUBPARSER_ALIASES['restore'],\n        help='Restore database dumps from a named archive',\n        description='Restore database dumps from a named archive. (To extract files instead, use \"borgmatic extract\".)',\n        add_help=False,\n    )\n    restore_group = restore_parser.add_argument_group('restore arguments')\n    restore_group.add_argument(\n        '--repository',\n        help='Path of repository to restore from, defaults to the configured repository if there is only one',\n    )\n    restore_group.add_argument(\n        '--archive', help='Name of archive to restore from (or \"latest\")', required=True\n    )\n    restore_group.add_argument(\n        '--database',\n        metavar='NAME',\n        nargs='+',\n        dest='databases',\n        help='Names of databases to restore from archive, defaults to all databases. Note that any databases to restore must be defined in borgmatic\\'s configuration',\n    )\n    restore_group.add_argument(\n        '-h', '--help', action='help', help='Show this help message and exit'\n    )\n\n    list_parser = subparsers.add_parser(\n        'list',\n        aliases=SUBPARSER_ALIASES['list'],\n        help='List archives',\n        description='List archives or the contents of an archive',\n        add_help=False,\n    )\n    list_group = list_parser.add_argument_group('list arguments')\n    list_group.add_argument(\n        '--repository', help='Path of repository to list, defaults to the configured repositories',\n    )\n    list_group.add_argument('--archive', help='Name of archive to list (or \"latest\")')\n    list_group.add_argument(\n        '--path',\n        metavar='PATH',\n        nargs='+',\n        dest='paths',\n        help='Paths or patterns to list from a single selected archive (via \"--archive\"), defaults to listing the entire archive',\n    )\n    list_group.add_argument(\n        '--find',\n        metavar='PATH',\n        nargs='+',\n        dest='find_paths',\n        help='Partial paths or patterns to search for and list across multiple archives',\n    )\n    list_group.add_argument(\n        '--short', default=False, action='store_true', help='Output only archive or path names'\n    )\n    list_group.add_argument('--format', help='Format for file listing')\n    list_group.add_argument(\n        '--json', default=False, action='store_true', help='Output results as JSON'\n    )\n    list_group.add_argument(\n        '-P', '--prefix', help='Only list archive names starting with this prefix'\n    )\n    list_group.add_argument(\n        '-a', '--glob-archives', metavar='GLOB', help='Only list archive names matching this glob'\n    )\n    list_group.add_argument(\n        '--successful',\n        default=True,\n        action='store_true',\n        help='Deprecated in favor of listing successful (non-checkpoint) backups by default in newer versions of Borg',\n    )\n    list_group.add_argument(\n        '--sort-by', metavar='KEYS', help='Comma-separated list of sorting keys'\n    )\n    list_group.add_argument(\n        '--first', metavar='N', help='List first N archives after other filters are applied'\n    )\n    list_group.add_argument(\n        '--last', metavar='N', help='List last N archives after other filters are applied'\n    )\n    list_group.add_argument(\n        '-e', '--exclude', metavar='PATTERN', help='Exclude paths matching the pattern'\n    )\n    list_group.add_argument(\n        '--exclude-from', metavar='FILENAME', help='Exclude paths from exclude file, one per line'\n    )\n    list_group.add_argument('--pattern', help='Include or exclude paths matching a pattern')\n    list_group.add_argument(\n        '--patterns-from',\n        metavar='FILENAME',\n        help='Include or exclude paths matching patterns from pattern file, one per line',\n    )\n    list_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    info_parser = subparsers.add_parser(\n        'info',\n        aliases=SUBPARSER_ALIASES['info'],\n        help='Display summary information on archives',\n        description='Display summary information on archives',\n        add_help=False,\n    )\n    info_group = info_parser.add_argument_group('info arguments')\n    info_group.add_argument(\n        '--repository',\n        help='Path of repository to show info for, defaults to the configured repository if there is only one',\n    )\n    info_group.add_argument('--archive', help='Name of archive to show info for (or \"latest\")')\n    info_group.add_argument(\n        '--json', dest='json', default=False, action='store_true', help='Output results as JSON'\n    )\n    info_group.add_argument(\n        '-P', '--prefix', help='Only show info for archive names starting with this prefix'\n    )\n    info_group.add_argument(\n        '-a',\n        '--glob-archives',\n        metavar='GLOB',\n        help='Only show info for archive names matching this glob',\n    )\n    info_group.add_argument(\n        '--sort-by', metavar='KEYS', help='Comma-separated list of sorting keys'\n    )\n    info_group.add_argument(\n        '--first',\n        metavar='N',\n        help='Show info for first N archives after other filters are applied',\n    )\n    info_group.add_argument(\n        '--last', metavar='N', help='Show info for last N archives after other filters are applied'\n    )\n    info_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    borg_parser = subparsers.add_parser(\n        'borg',\n        aliases=SUBPARSER_ALIASES['borg'],\n        help='Run an arbitrary Borg command',\n        description='Run an arbitrary Borg command based on borgmatic\\'s configuration',\n        add_help=False,\n    )\n    borg_group = borg_parser.add_argument_group('borg arguments')\n    borg_group.add_argument(\n        '--repository',\n        help='Path of repository to pass to Borg, defaults to the configured repositories',\n    )\n    borg_group.add_argument('--archive', help='Name of archive to pass to Borg (or \"latest\")')\n    borg_group.add_argument(\n        '--',\n        metavar='OPTION',\n        dest='options',\n        nargs='+',\n        help='Options to pass to Borg, command first (\"create\", \"list\", etc). \"--\" is optional. To specify the repository or the archive, you must use --repository or --archive instead of providing them here.',\n    )\n    borg_group.add_argument('-h', '--help', action='help', help='Show this help message and exit')\n\n    return top_level_parser, subparsers", "requirement": {"Functionality": "Build a top-level parser and its subparsers and return them as a tuple.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd5f", "namespace_real": "infoblox_client.utils.paging", "type": "function", "project_path": "infobloxopen/infoblox-client", "completion_path": "infoblox_client/utils.py", "ce_id": "62ece4982e6aefcf4aabbd5f", "signature_position": [120, null], "body_position": [null, 132], "signature": "def paging(response, max_results):", "ground_truth": "def paging(response, max_results):\n    \"\"\"Returns WAPI response page by page\n\n    Args:\n        response (list): WAPI response.\n        max_results (int): Maximum number of objects to be returned in one page.\n    Returns:\n        Generator object with WAPI response split page by page.\n    \"\"\"\n    i = 0\n    while i < len(response):\n        yield response[i:i + max_results]\n        i = i + max_results", "requirement": {"Functionality": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd60", "namespace_real": "swh.lister.arch.lister.size_to_bytes", "type": "function", "project_path": "SoftwareHeritage/swh-lister", "completion_path": "swh/lister/arch/lister.py", "ce_id": "62ece4982e6aefcf4aabbd60", "signature_position": [28, null], "body_position": [null, 60], "signature": "def size_to_bytes(size: str) -> int:", "ground_truth": "def size_to_bytes(size: str) -> int:\n    \"\"\"Convert human readable file size to bytes.\n\n    Resulting value is an approximation as input value is in most case rounded.\n\n    Args:\n        size: A string representing a human readable file size (eg: '500K')\n\n    Returns:\n        A decimal representation of file size\n\n        Examples::\n\n            >>> size_to_bytes(\"500\")\n            500\n            >>> size_to_bytes(\"1K\")\n            1000\n    \"\"\"\n    units = {\n        \"K\": 1000,\n        \"M\": 1000**2,\n        \"G\": 1000**3,\n        \"T\": 1000**4,\n        \"P\": 1000**5,\n        \"E\": 1000**6,\n        \"Z\": 1000**7,\n        \"Y\": 1000**8,\n    }\n    if size.endswith(tuple(units)):\n        v, u = (size[:-1], size[-1])\n        return int(v) * units[u]\n    else:\n        return int(size)", "requirement": {"Functionality": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd61", "namespace_real": "contrib.planb-swiftsync._dictsum", "type": "function", "project_path": "ossobv/planb", "completion_path": "contrib/planb-swiftsync.py", "ce_id": "62ece4982e6aefcf4aabbd61", "signature_position": [1201, null], "body_position": [null, 1213], "signature": "def _dictsum(dicts):", "ground_truth": "def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n\n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2}\n    \"\"\"\n    it = iter(dicts)\n    first = next(it).copy()\n    for d in it:\n        for k, v in d.items():\n            first[k] += v\n    return first", "requirement": {"Functionality": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd62", "namespace_real": "pyseed.apibase._replace_url_args", "type": "function", "project_path": "SEED-platform/py-seed", "completion_path": "pyseed/apibase.py", "ce_id": "62ece4982e6aefcf4aabbd62", "signature_position": [41, null], "body_position": [null, 46], "signature": "def _replace_url_args(url, url_args):", "ground_truth": "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace(f\"{key}/\", f\"{value}/\")\n    return url", "requirement": {"Functionality": "Replace any custom string URL items with values in args", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd63", "namespace_real": "cinder.api.api_utils.is_none_string", "type": "function", "project_path": "openstack/cinder", "completion_path": "cinder/api/api_utils.py", "ce_id": "62ece4982e6aefcf4aabbd63", "signature_position": [62, null], "body_position": [null, 67], "signature": "def is_none_string(val: Any) -> bool:", "ground_truth": "def is_none_string(val: Any) -> bool:\n    \"\"\"Check if a string represents a None value.\"\"\"\n    if not isinstance(val, str):\n        return False\n\n    return val.lower() == 'none'", "requirement": {"Functionality": "Check if a string represents a None value.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd65", "namespace_real": "borgmatic.commands.completion.parser_flags", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/commands/completion.py", "ce_id": "62ece4982e6aefcf4aabbd65", "signature_position": [15, null], "body_position": [null, 20], "signature": "def parser_flags(parser):", "ground_truth": "def parser_flags(parser):\n    '''\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\n    string.\n    '''\n    return ' '.join(option for action in parser._actions for option in action.option_strings)", "requirement": {"Functionality": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd66", "namespace_real": "makeprojects.util.was_processed", "type": "function", "project_path": "burgerbecky/makeprojects", "completion_path": "makeprojects/util.py", "ce_id": "62ece4982e6aefcf4aabbd66", "signature_position": [347, null], "body_position": [null, 376], "signature": "def was_processed(processed, path_name, verbose):", "ground_truth": "def was_processed(processed, path_name, verbose):\n    \"\"\"\n    Check if a file or directory has already been processed.\n\n    To prevent recursion, expand the path name to an absolution path\n    call this function with a set that will store all the entries and\n    the entry to test. If the entry is already in the set, report the issue\n    and return ``True``. Otherwise, add the entry to the set and return\n    ``False`` to allow the path to be processed.\n\n    Args:\n        processed: Set to store processed pathnames\n        path_name: Path to a directory or file\n        verbose: True if verbose output is requested\n\n    Returns:\n        True if it's already in the set. False if not.\n    \"\"\"\n\n    # Test for recursion\n    if path_name in processed:\n        if verbose:\n            print('{} has already been processed'.format(path_name))\n        return True\n\n    # Mark this list as \"processed\" to prevent recursion\n    if verbose:\n        print('Processing {}.'.format(path_name))\n    processed.add(path_name)\n    return False", "requirement": {"Functionality": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd67", "namespace_real": "eppy.geometry.surface.vertex3tuple", "type": "function", "project_path": "santoshphilip/eppy", "completion_path": "eppy/geometry/surface.py", "ce_id": "62ece4982e6aefcf4aabbd67", "signature_position": [60, null], "body_position": [null, 74], "signature": "def vertex3tuple(vertices):", "ground_truth": "def vertex3tuple(vertices):\n    \"\"\"return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\n        polygon with vertices ABCD\n        Will return\n        DAB, ABC, BCD, CDA -> returns 3tuples\n        #A    B    C    D  -> of vertices\n    \"\"\"\n    asvertex_list = []\n    for i in range(len(vertices)):\n        try:\n            asvertex_list.append((vertices[i-1], vertices[i], vertices[i+1]))\n        except IndexError as e:\n           asvertex_list.append((vertices[i-1], vertices[i], vertices[0]))\n    return asvertex_list", "requirement": {"Functionality": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd68", "namespace_real": "shortuuid.main.int_to_string", "type": "function", "project_path": "skorokithakis/shortuuid", "completion_path": "shortuuid/main.py", "ce_id": "62ece4982e6aefcf4aabbd68", "signature_position": [10, null], "body_position": [null, 24], "signature": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int]=None) -> str:", "ground_truth": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \"\"\"\n    Convert a number to a string, using the given alphabet.\n\n    The output has the most significant digit first.\n    \"\"\"\n    output = \"\"\n    alpha_len = len(alphabet)\n    while number:\n        number, digit = divmod(number, alpha_len)\n        output += alphabet[digit]\n    if padding:\n        remainder = max(padding - len(output), 0)\n        output = output + alphabet[0] * remainder\n    return output[::-1]", "requirement": {"Functionality": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd69", "namespace_real": "neutron_lib.agent.common.utils._replace_register", "type": "function", "project_path": "openstack/neutron-lib", "completion_path": "neutron_lib/agent/common/utils.py", "ce_id": "62ece4982e6aefcf4aabbd69", "signature_position": [19, null], "body_position": [null, 35], "signature": "def _replace_register(flow_params, register_number, register_value):", "ground_truth": "def _replace_register(flow_params, register_number, register_value):\n    \"\"\"Replace value from flows to given register number\n\n    'register_value' key in dictionary will be replaced by register number\n    given by 'register_number'\n\n    :param flow_params: Dictionary containing defined flows\n    :param register_number: The number of register where value will be stored\n    :param register_value: Key to be replaced by register number\n\n    \"\"\"\n    try:\n        reg_port = flow_params[register_value]\n        del flow_params[register_value]\n        flow_params['reg{:d}'.format(register_number)] = reg_port\n    except KeyError:\n        pass", "requirement": {"Functionality": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd6a", "namespace_real": "release_dashboard.templatetags.rd_extras.replace_dots", "type": "function", "project_path": "sipwise/repoapi", "completion_path": "release_dashboard/templatetags/rd_extras.py", "ce_id": "62ece4982e6aefcf4aabbd6a", "signature_position": [23, null], "body_position": [null, 25], "signature": "@register.filter\n@stringfilter\ndef replace_dots(value, arg):", "ground_truth": "def replace_dots(value, arg):\n    \"\"\"Replaces all values of '.' to arg from the given string\"\"\"\n    return value.replace(\".\", arg)", "requirement": {"Functionality": "Replaces all values of '.' to arg from the given string", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd6b", "namespace_real": "rows.utils.__init__.subclasses", "type": "function", "project_path": "turicas/rows", "completion_path": "rows/utils/__init__.py", "ce_id": "62ece4982e6aefcf4aabbd6b", "signature_position": [136, null], "body_position": [null, 141], "signature": "def subclasses(cls):", "ground_truth": "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively\"\"\"\n    children = cls.__subclasses__()\n    return set(children).union(\n        set(grandchild for child in children for grandchild in subclasses(child))\n    )", "requirement": {"Functionality": "Return all subclasses of a class, recursively", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd6d", "namespace_real": "shortuuid.main.string_to_int", "type": "function", "project_path": "skorokithakis/shortuuid", "completion_path": "shortuuid/main.py", "ce_id": "62ece4982e6aefcf4aabbd6d", "signature_position": [27, null], "body_position": [null, 37], "signature": "def string_to_int(string: str, alphabet: List[str]) -> int:", "ground_truth": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \"\"\"\n    Convert a string to a number, using the given alphabet.\n\n    The input is assumed to have the most significant digit first.\n    \"\"\"\n    number = 0\n    alpha_len = len(alphabet)\n    for char in string:\n        number = number * alpha_len + alphabet.index(char)\n    return number", "requirement": {"Functionality": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd6f", "namespace_real": "swh.lister.arch.lister.get_repo_archive", "type": "class", "project_path": "SoftwareHeritage/swh-lister", "completion_path": "swh/lister/arch/lister.py", "ce_id": "62ece4982e6aefcf4aabbd6f", "signature_position": [226, null], "body_position": [null, 247], "signature": "def get_repo_archive(self, url: str, destination_path: Path) -> Path:", "ground_truth": "    def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \"\"\"Given an url and a destination path, retrieve and extract .tar.gz archive\n        which contains 'desc' file for each package.\n        Each .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\n        Args:\n            url: url of the .tar.gz archive to download\n            destination_path: the path on disk where to extract archive\n\n        Returns:\n            a directory Path where the archive has been extracted to.\n        \"\"\"\n        res = requests.get(url)\n        destination_path.parent.mkdir(parents=True, exist_ok=True)\n        destination_path.write_bytes(res.content)\n\n        extract_to = Path(str(destination_path).split(\".tar.gz\")[0])\n        tar = tarfile.open(destination_path)\n        tar.extractall(path=extract_to)\n        tar.close()\n\n        return extract_to", "requirement": {"Functionality": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd70", "namespace_real": "cloudmesh.common.systeminfo.os_is_mac", "type": "function", "project_path": "cloudmesh/cloudmesh-common", "completion_path": "cloudmesh/common/systeminfo.py", "ce_id": "62ece4982e6aefcf4aabbd70", "signature_position": [39, null], "body_position": [null, 46], "signature": "def os_is_mac():", "ground_truth": "def os_is_mac():\n    \"\"\"\n    Checks if the os is macOS\n\n    :return: True is macOS\n    :rtype: bool\n    \"\"\"\n    return platform.system() == \"Darwin\"", "requirement": {"Functionality": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd71", "namespace_real": "makeprojects.util.regex_dict", "type": "function", "project_path": "burgerbecky/makeprojects", "completion_path": "makeprojects/util.py", "ce_id": "62ece4982e6aefcf4aabbd71", "signature_position": [57, null], "body_position": [null, 83], "signature": "def regex_dict(item):", "ground_truth": "def regex_dict(item):\n    \"\"\"\n    Convert *.cpp keys to regex keys\n\n    Given a dict where the keys are all filenames with wildcards, convert only\n    the keys into equivalent regexes and leave the values intact.\n\n    Example:\n\n    rules = {\n        '*.cpp':\n            {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n        '*.h':\n            {'h': 'help'}\n    }\n    regex_keys = regex_dict(rules)\n\n    Args:\n        item: dict to convert\n    Returns:\n        dict with keys converted to regexes\n    \"\"\"\n\n    output = {}\n    for key in item:\n        output[re.compile(fnmatch.translate(key)).match] = item[key]\n    return output", "requirement": {"Functionality": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd72", "namespace_real": "rdiffweb.core.librdiff.unquote", "type": "function", "project_path": "ikus060/rdiffweb", "completion_path": "rdiffweb/core/librdiff.py", "ce_id": "62ece4982e6aefcf4aabbd72", "signature_position": [92, null], "body_position": [null, 107], "signature": "def unquote(name):", "ground_truth": "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    assert isinstance(name, bytes)\n\n    # This function just gives back the original text if it can decode it\n    def unquoted_char(match):\n        \"\"\"For each ;000 return the corresponding byte.\"\"\"\n        if len(match.group()) != 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:\n            return match.group\n\n    # Remove quote using regex\n    return re.sub(b\";[0-9]{3}\", unquoted_char, name, re.S)", "requirement": {"Functionality": "Remove quote from the given name.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd73", "namespace_real": "cloudmesh.common.shlex.split", "type": "function", "project_path": "cloudmesh/cloudmesh-common", "completion_path": "cloudmesh/common/shlex.py", "ce_id": "62ece4982e6aefcf4aabbd73", "signature_position": [6, null], "body_position": [null, 52], "signature": "def split(s, platform='this'):", "ground_truth": "def split(s, platform='this'):\n    \"\"\"Multi-platform variant of shlex.split() for command-line splitting.\n    For use with subprocess, for argv injection etc. Using fast REGEX.\n\n    platform: 'this' = auto from current platform;\n              1 = POSIX;\n              0 = Windows/CMD\n              (other values reserved)\n    \"\"\"\n    if platform == 'this':\n        platform = (sys.platform != 'win32')\n    if platform == 1:\n        RE_CMD_LEX = r'''\"((?:\\\\[\"\\\\]|[^\"])*)\"|'([^']*)'|(\\\\.)|(&&?|\\|\\|?|\\d?\\>|[<])|([^\\s'\"\\\\&|<>]+)|(\\s+)|(.)'''\n    elif platform == 0:\n        RE_CMD_LEX = r'''\"((?:\"\"|\\\\[\"\\\\]|[^\"])*)\"?()|(\\\\\\\\(?=\\\\*\")|\\\\\")|(&&?|\\|\\|?|\\d?>|[<])|([^\\s\"&|<>]+)|(\\s+)|(.)'''\n    else:\n        raise AssertionError('unkown platform %r' % platform)\n\n    args = []\n    accu = None   # collects pieces of one arg\n    for qs, qss, esc, pipe, word, white, fail in re.findall(RE_CMD_LEX, s):\n        if word:\n            pass   # most frequent\n        elif esc:\n            word = esc[1]\n        elif white or pipe:\n            if accu is not None:\n                args.append(accu)\n            if pipe:\n                args.append(pipe)\n            accu = None\n            continue\n        elif fail:\n            raise ValueError(\"invalid or incomplete shell string\")\n        elif qs:\n            word = qs.replace('\\\\\"', '\"').replace('\\\\\\\\', '\\\\')\n            if platform == 0:\n                word = word.replace('\"\"', '\"')\n        else:\n            word = qss   # may be even empty; must be last\n\n        accu = (accu or '') + word\n\n    if accu is not None:\n        args.append(accu)\n\n    return args", "requirement": {"Functionality": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd74", "namespace_real": "swh.lister.arch.tests.__init__.prepare_repository_from_archive", "type": "function", "project_path": "SoftwareHeritage/swh-lister", "completion_path": "swh/lister/arch/tests/__init__.py", "ce_id": "62ece4982e6aefcf4aabbd74", "signature_position": [14, null], "body_position": [null, 31], "signature": "def prepare_repository_from_archive(archive_path: str, filename: Optional[str]=None, tmp_path: Union[PosixPath, str]='/tmp') -> str:", "ground_truth": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \"\"\"Given an existing archive_path, uncompress it.\n    Returns a file repo url which can be used as origin url.\n\n    This does not deal with the case where the archive passed along does not exist.\n    \"\"\"\n    if not isinstance(tmp_path, str):\n        tmp_path = str(tmp_path)\n    # uncompress folder/repositories/dump for the loader to ingest\n    subprocess.check_output([\"tar\", \"xf\", archive_path, \"-C\", tmp_path])\n    # build the origin url (or some derivative form)\n    _fname = filename if filename else os.path.basename(archive_path)\n    repo_url = f\"file://{tmp_path}/{_fname}\"\n    return repo_url", "requirement": {"Functionality": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd75", "namespace_real": "src.flashbake.plugins.ignored.addignored", "type": "class", "project_path": "commandline/flashbake", "completion_path": "src/flashbake/plugins/ignored.py", "ce_id": "62ece4982e6aefcf4aabbd75", "signature_position": [37, null], "body_position": [null, 45], "signature": "def addignored(self, ignored):", "ground_truth": "    def addignored(self, ignored):\n        ''' Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.'''\n        fldr=subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True, text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = ([s for s in x if sub in s])\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        return t", "requirement": {"Functionality": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd76", "namespace_real": "docopt.__init__.match", "type": "class", "project_path": "bazaar-projects/docopt-ng", "completion_path": "docopt/__init__.py", "ce_id": "62ece4982e6aefcf4aabbd76", "signature_position": [184, null], "body_position": [null, 212], "signature": "def match(self, left: list[LeafPattern], collected: list[Pattern]=None) -> tuple[bool, list[LeafPattern], list[Pattern]]:", "ground_truth": "    def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        collected = [] if collected is None else collected\n        increment: Any | None = None\n        pos, match = self.single_match(left)\n        if match is None or pos is None:\n            return False, left, collected\n        left_ = left[:pos] + left[(pos + 1) :]\n        same_name = [a for a in collected if a.name == self.name]\n        if type(self.value) == int and len(same_name) > 0:\n            if isinstance(same_name[0].value, int):\n                same_name[0].value += 1\n            return True, left_, collected\n        if type(self.value) == int and not same_name:\n            match.value = 1\n            return True, left_, collected + [match]\n        if same_name and type(self.value) == list:\n            if type(match.value) == str:\n                increment = [match.value]\n            if same_name[0].value is not None and increment is not None:\n                if isinstance(same_name[0].value, type(increment)):\n                    same_name[0].value += increment\n            return True, left_, collected\n        elif not same_name and type(self.value) == list:\n            if isinstance(match.value, str):\n                match.value = [match.value]\n            return True, left_, collected + [match]\n        return True, left_, collected + [match]", "requirement": {"Functionality": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd77", "namespace_real": "borgmatic.borg.check.parse_frequency", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/borg/check.py", "ce_id": "62ece4982e6aefcf4aabbd77", "signature_position": [57, null], "body_position": [null, 93], "signature": "def parse_frequency(frequency):", "ground_truth": "def parse_frequency(frequency):\n    '''\n    Given a frequency string with a number and a unit of time, return a corresponding\n    datetime.timedelta instance or None if the frequency is None or \"always\".\n\n    For instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\n    Raise ValueError if the given frequency cannot be parsed.\n    '''\n    if not frequency:\n        return None\n\n    frequency = frequency.strip().lower()\n\n    if frequency == 'always':\n        return None\n\n    try:\n        number, time_unit = frequency.split(' ')\n        number = int(number)\n    except ValueError:\n        raise ValueError(f\"Could not parse consistency check frequency '{frequency}'\")\n\n    if not time_unit.endswith('s'):\n        time_unit += 's'\n\n    if time_unit == 'months':\n        number *= 4\n        time_unit = 'weeks'\n    elif time_unit == 'years':\n        number *= 365\n        time_unit = 'days'\n\n    try:\n        return datetime.timedelta(**{time_unit: number})\n    except TypeError:\n        raise ValueError(f\"Could not parse consistency check frequency '{frequency}'\")", "requirement": {"Functionality": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd78", "namespace_real": "cloudmesh.common.util.is_local", "type": "function", "project_path": "cloudmesh/cloudmesh-common", "completion_path": "cloudmesh/common/util.py", "ce_id": "62ece4992e6aefcf4aabbd78", "signature_position": [142, null], "body_position": [null, 155], "signature": "def is_local(host):", "ground_truth": "def is_local(host):\n    \"\"\"\n    Checks if the host is the localhost\n\n    :param host: The hostname or ip\n    :return: True if the host is the localhost\n    \"\"\"\n    return host in [\"127.0.0.1\",\n                    \"localhost\",\n                    socket.gethostname(),\n                    # just in case socket.gethostname() does not work  we also try the following:\n                    platform.node(),\n                    socket.gethostbyaddr(socket.gethostname())[0]\n                    ]", "requirement": {"Functionality": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd79", "namespace_real": "borgmatic.borg.list.make_find_paths", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/borg/list.py", "ce_id": "62ece4992e6aefcf4aabbd79", "signature_position": [82, null], "body_position": [null, 101], "signature": "def make_find_paths(find_paths):", "ground_truth": "def make_find_paths(find_paths):\n    '''\n    Given a sequence of path fragments or patterns as passed to `--find`, transform all path\n    fragments into glob patterns. Pass through existing patterns untouched.\n\n    For example, given find_paths of:\n\n      ['foo.txt', 'pp:root/somedir']\n\n    ... transform that into:\n\n      ['sh:**/*foo.txt*/**', 'pp:root/somedir']\n    '''\n\n    return tuple(\n        find_path\n        if re.compile(r'([-!+RrPp] )|(\\w\\w:)').match(find_path)\n        else f'sh:**/*{find_path}*/**'\n        for find_path in find_paths\n    )", "requirement": {"Functionality": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd7a", "namespace_real": "cloudmesh.common.util.is_gitbash", "type": "function", "project_path": "cloudmesh/cloudmesh-common", "completion_path": "cloudmesh/common/util.py", "ce_id": "62ece4992e6aefcf4aabbd7a", "signature_position": [159, null], "body_position": [null, 169], "signature": "def is_gitbash():", "ground_truth": "def is_gitbash():\n    \"\"\"\n    returns True if you run in a Windows gitbash\n\n    :return: True if gitbash\n    \"\"\"\n    try:\n        exepath = os.environ['EXEPATH']\n        return \"Git\" in exepath\n    except:\n        return False", "requirement": {"Functionality": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd7b", "namespace_real": "borgmatic.config.generate.write_configuration", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/config/generate.py", "ce_id": "62ece4992e6aefcf4aabbd7b", "signature_position": [112, null], "body_position": [null, 133], "signature": "def write_configuration(config_filename, rendered_config, mode=384, overwrite=False):", "ground_truth": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    '''\n    Given a target config filename and rendered config YAML, write it out to file. Create any\n    containing directories as needed. But if the file already exists and overwrite is False,\n    abort before writing anything.\n    '''\n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(\n            '{} already exists. Aborting. Use --overwrite to replace the file.'.format(\n                config_filename\n            )\n        )\n\n    try:\n        os.makedirs(os.path.dirname(config_filename), mode=0o700)\n    except (FileExistsError, FileNotFoundError):\n        pass\n\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n\n    os.chmod(config_filename, mode)", "requirement": {"Functionality": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd7c", "namespace_real": "cloudmesh.common.Shell.oneline", "type": "class", "project_path": "cloudmesh/cloudmesh-common", "completion_path": "cloudmesh/common/Shell.py", "ce_id": "62ece4992e6aefcf4aabbd7c", "signature_position": [416, null], "body_position": [null, 424], "signature": "@staticmethod\ndef oneline(script, seperator=' && '):", "ground_truth": "    def oneline(script, seperator=\" && \"):\n        \"\"\"\n        converts a script to one line command.\n        THis is useful to run a single ssh command and pass a one line script.\n\n        :param script:\n        :return:\n        \"\"\"\n        return seperator.join(textwrap.dedent(script).strip().splitlines())", "requirement": {"Functionality": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd7d", "namespace_real": "lib.matplotlib.testing.__init__.subprocess_run_helper", "type": "function", "project_path": "rougier/matplotlib", "completion_path": "lib/matplotlib/testing/__init__.py", "ce_id": "62ece4992e6aefcf4aabbd7d", "signature_position": [53, null], "body_position": [null, 79], "signature": "def subprocess_run_helper(func, *args, timeout, extra_env=None):", "ground_truth": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \"\"\"\n    Run a function in a sub-process.\n\n    Parameters\n    ----------\n    func : function\n        The function to be run.  It must be in a module that is importable.\n    *args : str\n        Any additional command line arguments to be passed in\n        the first argument to ``subprocess.run``.\n    extra_env : dict[str, str]\n        Any additional environment variables to be set for the subprocess.\n    \"\"\"\n    target = func.__name__\n    module = func.__module__\n    proc = subprocess.run(\n        [sys.executable,\n         \"-c\",\n         f\"from {module} import {target}; {target}()\",\n         *args],\n        env={**os.environ, \"SOURCE_DATE_EPOCH\": \"0\", **(extra_env or {})},\n        timeout=timeout, check=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        universal_newlines=True)\n    return proc", "requirement": {"Functionality": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd7e", "namespace_real": "borgmatic.config.override._resolve_string", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/config/override.py", "ce_id": "62ece4992e6aefcf4aabbd7e", "signature_position": [86, null], "body_position": [null, 95], "signature": "def _resolve_string(matcher):", "ground_truth": "def _resolve_string(matcher):\n    '''\n    Get the value from environment given a matcher containing a name and an optional default value.\n    If the variable is not defined in environment and no default value is provided, an Error is raised.\n    '''\n    name, default = matcher.group(\"name\"), matcher.group(\"default\")\n    out = os.getenv(name, default=default)\n    if out is None:\n        raise ValueError(\"Cannot find variable ${name} in envivonment\".format(name=name))\n    return out", "requirement": {"Functionality": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd7f", "namespace_real": "cinder.image.glance._parse_image_ref", "type": "function", "project_path": "openstack/cinder", "completion_path": "cinder/image/glance.py", "ce_id": "62ece4992e6aefcf4aabbd7f", "signature_position": [96, null], "body_position": [null, 108], "signature": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:", "ground_truth": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \"\"\"Parse an image href into composite parts.\n\n    :param image_href: href of an image\n    :returns: a tuple of the form (image_id, netloc, use_ssl)\n    :raises ValueError:\n\n    \"\"\"\n    url = urllib.parse.urlparse(image_href)\n    netloc = url.netloc\n    image_id = url.path.split('/')[-1]\n    use_ssl = (url.scheme == 'https')\n    return (image_id, netloc, use_ssl)", "requirement": {"Functionality": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd80", "namespace_real": "makeprojects.util.remove_ending_os_sep", "type": "function", "project_path": "burgerbecky/makeprojects", "completion_path": "makeprojects/util.py", "ce_id": "62ece4992e6aefcf4aabbd80", "signature_position": [319, null], "body_position": [null, 342], "signature": "def remove_ending_os_sep(input_list):", "ground_truth": "def remove_ending_os_sep(input_list):\n    \"\"\"\n    Iterate over a string list and remove trailing os seperator characters.\n\n    Each string is tested if its length is greater than one and if the last\n    character is the pathname seperator. If so, the pathname seperator character\n    is removed.\n\n    Args:\n        input_list: list of strings\n\n    Returns:\n        Processed list of strings\n\n    Raises:\n        TypeError\n    \"\"\"\n\n    # Input could be None, so test for that case\n    if input_list is None:\n        return []\n\n    return [item[:-1] if len(item) >= 2 and item.endswith(os.sep)\n            else item for item in input_list]", "requirement": {"Functionality": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd82", "namespace_real": "shconfparser.search.get_pattern", "type": "class", "project_path": "kirankotari/shconfparser", "completion_path": "shconfparser/search.py", "ce_id": "62ece4992e6aefcf4aabbd82", "signature_position": [25, null], "body_position": [null, 35], "signature": "def get_pattern(self, pattern, strip=True):", "ground_truth": "    def get_pattern(self, pattern, strip=True):\n        \"\"\"\n        This method converts the given string to regex pattern\n        \"\"\"\n        if type(pattern) == re.Pattern:\n            return pattern\n\n        if strip and type(pattern) == str:\n            pattern = pattern.strip()\n\n        return re.compile(pattern)", "requirement": {"Functionality": "This method converts the given string to regex pattern", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd83", "namespace_real": "makeprojects.core.run_command", "type": "class", "project_path": "burgerbecky/makeprojects", "completion_path": "makeprojects/core.py", "ce_id": "62ece4992e6aefcf4aabbd83", "signature_position": [152, null], "body_position": [null, 176], "signature": "def run_command(self, cmd, verbose):", "ground_truth": "    def run_command(self, cmd, verbose):\n        \"\"\"\n        Issue a command and return the generated BuildError\n\n        Args:\n            cmd: command line to execute\n            verbose: True if verbose output is required\n        Returns:\n            BuildError object with error condition, if any.\n        \"\"\"\n\n        # Perform the command\n        try:\n            error_code = run_command(\n                cmd, working_dir=os.path.dirname(self.file_name),\n                quiet=not verbose)[0]\n            msg = None\n        except OSError as error:\n            error_code = getattr(error, 'winerror', error.errno)\n            msg = str(error)\n            print(msg, file=sys.stderr)\n\n        # Return the results\n        return BuildError(error_code, self.file_name,\n                          configuration=self.configuration, msg=msg)", "requirement": {"Functionality": "Call the given command(s).", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd84", "namespace_real": "gopad.rest.is_ipv4", "type": "function", "project_path": "gopad/gopad-python", "completion_path": "gopad/rest.py", "ce_id": "62ece4992e6aefcf4aabbd84", "signature_position": [297, null], "body_position": [null, 304], "signature": "def is_ipv4(target):", "ground_truth": "def is_ipv4(target):\n    \"\"\" Test if IPv4 address or not\n    \"\"\"\n    try:\n       chk = ipaddress.IPv4Address(target)\n       return True\n    except ipaddress.AddressValueError:\n       return False", "requirement": {"Functionality": "Test if IPv4 address or not\n    ", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd85", "namespace_real": "rdflib.util.find_roots", "type": "function", "project_path": "mwatts15/rdflib", "completion_path": "rdflib/util.py", "ce_id": "62ece4992e6aefcf4aabbd85", "signature_position": [382, null], "body_position": [null, 405], "signature": "def find_roots(graph: 'Graph', prop: 'URIRef', roots: Optional[Set['Node']]=None) -> Set['Node']:", "ground_truth": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf)\n    will return a set of all roots of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    \"\"\"\n\n    non_roots: Set[Node] = set()\n    if roots is None:\n        roots = set()\n    for x, y in graph.subject_objects(prop):\n        non_roots.add(x)\n        if x in roots:\n            roots.remove(x)\n        if y not in non_roots:\n            roots.add(y)\n    return roots", "requirement": {"Functionality": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd86", "namespace_real": "tests.unit.mock.yaml_helper._dump_string", "type": "class", "project_path": "ansible-security/ansible_collections.ibm.qradar", "completion_path": "tests/unit/mock/yaml_helper.py", "ce_id": "62ece4992e6aefcf4aabbd86", "signature_position": [28, null], "body_position": [null, 33], "signature": "def _dump_string(self, obj, dumper=None):", "ground_truth": "    def _dump_string(self, obj, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string\"\"\"\n        if PY3:\n            return yaml.dump(obj, Dumper=dumper)\n        else:\n            return yaml.dump(obj, Dumper=dumper, encoding=None)", "requirement": {"Functionality": "Dump to a py2-unicode or py3-string", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd87", "namespace_real": "apphelpers.loggers.build_app_logger", "type": "function", "project_path": "scrolltech/apphelpers", "completion_path": "apphelpers/loggers.py", "ce_id": "62ece4992e6aefcf4aabbd87", "signature_position": [23, null], "body_position": [null, 40], "signature": "def build_app_logger(name='app', logfile='app.log', debug=True):", "ground_truth": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n    \"\"\"\n    level = logging.DEBUG if settings.DEBUG else logging.INFO\n    logdir = 'logs'  # TODO: move this to settings\n    if not os.path.exists(logdir):\n        os.mkdir(logdir)\n    logpath = os.path.join(logdir, logfile)\n    maxBytes = 1024 * 1024 * 10\n    handler = RotatingFileHandler(logpath, maxBytes=maxBytes, backupCount=100)\n    handler.setLevel(level)\n    formatter = logging.Formatter('[%(levelname)s] %(asctime)s: %(message)s')\n    handler.setFormatter(formatter)\n    logger = logging.getLogger(name)\n    logger.addHandler(handler)\n    logger.setLevel(level)\n    return logger", "requirement": {"Functionality": "General purpose application logger. Useful mainly for debugging", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd88", "namespace_real": "radiospectra.spectrogram.make_array", "type": "class", "project_path": "sunpy/radiospectra", "completion_path": "radiospectra/spectrogram.py", "ce_id": "62ece4992e6aefcf4aabbd88", "signature_position": [929, null], "body_position": [null, 940], "signature": "@staticmethod\ndef make_array(shape, dtype=np.dtype('float32')):", "ground_truth": "    def make_array(shape, dtype=np.dtype(\"float32\")):\n        \"\"\"\n        Function to create an array with shape and dtype.\n\n        Parameters\n        ----------\n        shape : tuple\n            shape of the array to create\n        dtype : `numpy.dtype`\n            data-type of the array to create\n        \"\"\"\n        return np.zeros(shape, dtype=dtype)", "requirement": {"Functionality": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd89", "namespace_real": "concert.tests.unit.devices.test_monochromator.gaussian", "type": "class", "project_path": "ufo-kit/concert", "completion_path": "concert/tests/unit/devices/test_monochromator.py", "ce_id": "62ece4992e6aefcf4aabbd89", "signature_position": [88, null], "body_position": [null, 94], "signature": "def gaussian(self, x):", "ground_truth": "    def gaussian(self, x):\n        \"\"\"\n        Gaussian centered around 0.2 with a sigma of 0.1.\n        \"\"\"\n        mu = 0.2\n        sigma = 0.1\n        return np.exp(-(x-mu)**2/sigma**2)", "requirement": {"Functionality": "Gaussian centered around 0.2 with a sigma of 0.1.", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd8a", "namespace_real": "borgmatic.commands.borgmatic.load_configurations", "type": "function", "project_path": "witten/borgmatic", "completion_path": "borgmatic/commands/borgmatic.py", "ce_id": "62ece4992e6aefcf4aabbd8a", "signature_position": [653, null], "body_position": [null, 699], "signature": "def load_configurations(config_filenames, overrides=None, resolve_env=True):", "ground_truth": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    '''\n    Given a sequence of configuration filenames, load and validate each configuration file. Return\n    the results as a tuple of: dict of configuration filename to corresponding parsed configuration,\n    and sequence of logging.LogRecord instances containing any parse errors.\n    '''\n    # Dict mapping from config filename to corresponding parsed config dict.\n    configs = collections.OrderedDict()\n    logs = []\n\n    # Parse and load each configuration file.\n    for config_filename in config_filenames:\n        try:\n            configs[config_filename] = validate.parse_configuration(\n                config_filename, validate.schema_filename(), overrides, resolve_env\n            )\n        except PermissionError:\n            logs.extend(\n                [\n                    logging.makeLogRecord(\n                        dict(\n                            levelno=logging.WARNING,\n                            levelname='WARNING',\n                            msg='{}: Insufficient permissions to read configuration file'.format(\n                                config_filename\n                            ),\n                        )\n                    ),\n                ]\n            )\n        except (ValueError, OSError, validate.Validation_error) as error:\n            logs.extend(\n                [\n                    logging.makeLogRecord(\n                        dict(\n                            levelno=logging.CRITICAL,\n                            levelname='CRITICAL',\n                            msg='{}: Error parsing configuration file'.format(config_filename),\n                        )\n                    ),\n                    logging.makeLogRecord(\n                        dict(levelno=logging.CRITICAL, levelname='CRITICAL', msg=error)\n                    ),\n                ]\n            )\n\n    return (configs, logs)", "requirement": {"Functionality": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "Arguments": ""}}
{"namespace": "62ece4992e6aefcf4aabbd8b", "namespace_real": "o2sclpy.utils.force_string", "type": "function", "project_path": "awsteiner/o2sclpy", "completion_path": "o2sclpy/utils.py", "ce_id": "62ece4992e6aefcf4aabbd8b", "signature_position": [262, null], "body_position": [null, 269], "signature": "def force_string(obj):", "ground_truth": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj``\n    in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj,numpy.bytes_)==True or isinstance(obj,bytes)==True:\n        return obj.decode('utf-8')\n    return obj", "requirement": {"Functionality": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "Arguments": ""}}
{"namespace": "62e60723d76274f8a4026b76", "namespace_real": "neo4j.time.__init__.from_ticks", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/time/__init__.py", "ce_id": "62e60723d76274f8a4026b76", "signature_position": [1508, null], "body_position": [null, 1529], "signature": "@classmethod\ndef from_ticks(cls, ticks, tz=None):", "ground_truth": "    @classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \"\"\"Create a time from ticks (nanoseconds since midnight).\n\n        :param ticks: nanoseconds since midnight\n        :type ticks: int\n        :param tz: optional timezone\n        :type tz: datetime.tzinfo\n\n        :rtype: Time\n\n        :raises ValueError: if ticks is out of bounds\n            (0 <= ticks < 86400000000000)\n        \"\"\"\n        if not isinstance(ticks, int):\n            raise TypeError(\"Ticks must be int\")\n        if 0 <= ticks < 86400000000000:\n            second, nanosecond = divmod(ticks, NANO_SECONDS)\n            minute, second = divmod(second, 60)\n            hour, minute = divmod(minute, 60)\n            return cls.__new(ticks, hour, minute, second, nanosecond, tz)\n        raise ValueError(\"Ticks out of range (0..86400000000000)\")", "requirement": {"Functionality": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "Arguments": ""}}
{"namespace": "62e60873d76274f8a4026bd8", "namespace_real": "neo4j._async.io._bolt.protocol_handlers", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/_async/io/_bolt.py", "ce_id": "62e60873d76274f8a4026bd8", "signature_position": [179, null], "body_position": [null, 223], "signature": "@classmethod\ndef protocol_handlers(cls, protocol_version=None):", "ground_truth": "    @classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \"\"\" Return a dictionary of available Bolt protocol handlers,\n        keyed by version tuple. If an explicit protocol version is\n        provided, the dictionary will contain either zero or one items,\n        depending on whether that version is supported. If no protocol\n        version is provided, all available versions will be returned.\n\n        :param protocol_version: tuple identifying a specific protocol\n            version (e.g. (3, 5)) or None\n        :return: dictionary of version tuple to handler class for all\n            relevant and supported protocol versions\n        :raise TypeError: if protocol version is not passed in a tuple\n        \"\"\"\n\n        # Carry out Bolt subclass imports locally to avoid circular dependency issues.\n        from ._bolt3 import AsyncBolt3\n        from ._bolt4 import (\n            AsyncBolt4x1,\n            AsyncBolt4x2,\n            AsyncBolt4x3,\n            AsyncBolt4x4,\n        )\n        from ._bolt5 import AsyncBolt5x0\n\n        handlers = {\n            AsyncBolt3.PROTOCOL_VERSION: AsyncBolt3,\n            # 4.0 unsupported because no space left in the handshake\n            AsyncBolt4x1.PROTOCOL_VERSION: AsyncBolt4x1,\n            AsyncBolt4x2.PROTOCOL_VERSION: AsyncBolt4x2,\n            AsyncBolt4x3.PROTOCOL_VERSION: AsyncBolt4x3,\n            AsyncBolt4x4.PROTOCOL_VERSION: AsyncBolt4x4,\n            AsyncBolt5x0.PROTOCOL_VERSION: AsyncBolt5x0,\n        }\n\n        if protocol_version is None:\n            return handlers\n\n        if not isinstance(protocol_version, tuple):\n            raise TypeError(\"Protocol version must be specified as a tuple\")\n\n        if protocol_version in handlers:\n            return {protocol_version: handlers[protocol_version]}\n\n        return {}", "requirement": {"Functionality": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "Arguments": ""}}
{"namespace": "62e60e3bd76274f8a4026d1a", "namespace_real": "neo4j.api.from_raw_values", "type": "class", "project_path": "neo4j/neo4j-python-driver", "completion_path": "neo4j/api.py", "ce_id": "62e60e3bd76274f8a4026d1a", "signature_position": [259, null], "body_position": [null, 281], "signature": "@classmethod\ndef from_raw_values(cls, values):", "ground_truth": "    @classmethod\n    def from_raw_values(cls, values):\n        \"\"\"Create a Bookmarks object from a list of raw bookmark string values.\n\n        You should not need to use this method unless you want to deserialize\n        bookmarks.\n\n        :param values: ASCII string values (raw bookmarks)\n        :type values: Iterable[str]\n        \"\"\"\n        obj = cls()\n        bookmarks = []\n        for value in values:\n            if not isinstance(value, str):\n                raise TypeError(\"Raw bookmark values must be str. \"\n                                \"Found {}\".format(type(value)))\n            try:\n                value.encode(\"ascii\")\n            except UnicodeEncodeError as e:\n                raise ValueError(f\"The value {value} is not ASCII\") from e\n            bookmarks.append(value)\n        obj._raw_values = frozenset(bookmarks)\n        return obj", "requirement": {"Functionality": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "Arguments": ""}}
{"namespace": "62b87b199a0c4fa8b80b354c", "namespace_real": "lena.core.split._get_seq_with_type", "type": "function", "project_path": "ynikitenko/lena", "completion_path": "lena/core/split.py", "ce_id": "62b87b199a0c4fa8b80b354c", "signature_position": [14, null], "body_position": [null, 66], "signature": "def _get_seq_with_type(seq, bufsize=None):", "ground_truth": "def _get_seq_with_type(seq, bufsize=None):\n    \"\"\"Return a (sequence, type) pair.\n    Sequence is derived from *seq*\n    (or is *seq*, if that is of a sequence type).\n    \"\"\"\n    seq_type = \"\"\n    if isinstance(seq, source.Source):\n        seq_type = \"source\"\n    elif isinstance(seq, fill_compute_seq.FillComputeSeq):\n        seq_type = \"fill_compute\"\n    elif isinstance(seq, fill_request_seq.FillRequestSeq):\n        seq_type = \"fill_request\"\n    elif isinstance(seq, sequence.Sequence):\n        seq_type = \"sequence\"\n\n    if seq_type:\n        # append later\n        pass\n    ## If no explicit type is given, check seq's methods\n    elif ct.is_fill_compute_seq(seq):\n        seq_type = \"fill_compute\"\n        if not ct.is_fill_compute_el(seq):\n            seq = fill_compute_seq.FillComputeSeq(*seq)\n    elif ct.is_fill_request_seq(seq):\n        seq_type = \"fill_request\"\n        if not ct.is_fill_request_el(seq):\n            seq = fill_request_seq.FillRequestSeq(\n                *seq, bufsize=bufsize,\n                # if we have a FillRequest element inside,\n                # it decides itself when to reset.\n                reset=False,\n                # todo: change the interface, because\n                # no difference with buffer_output: we fill\n                # without a buffer\n                buffer_input=True\n            )\n    # Source is not checked,\n    # because it must be Source explicitly.\n    else:\n        try:\n            if isinstance(seq, tuple):\n                seq = sequence.Sequence(*seq)\n            else:\n                seq = sequence.Sequence(seq)\n        except exceptions.LenaTypeError:\n            raise exceptions.LenaTypeError(\n                \"unknown argument type. Must be a \"\n                \"FillComputeSeq, FillRequestSeq or Source, \"\n                \"{} provided\".format(seq)\n            )\n        else:\n            seq_type = \"sequence\"\n    return (seq, seq_type)", "requirement": {"Functionality": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "Arguments": ""}}
{"namespace": "62b87b4f9a0c4fa8b80b3581", "namespace_real": "lena.structures.histogram.scale", "type": "class", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/histogram.py", "ce_id": "62b87b4f9a0c4fa8b80b3581", "signature_position": [187, null], "body_position": [null, 222], "signature": "def scale(self, other=None, recompute=False):", "ground_truth": "    def scale(self, other=None, recompute=False):\n        \"\"\"Compute or set scale (integral of the histogram).\n\n        If *other* is ``None``, return scale of this histogram.\n        If its scale was not computed before,\n        it is computed and stored for subsequent use\n        (unless explicitly asked to *recompute*).\n        Note that after changing (filling) the histogram\n        one must explicitly recompute the scale\n        if it was computed before.\n\n        If a float *other* is provided, rescale self to *other*.\n\n        Histograms with scale equal to zero can't be rescaled.\n        :exc:`.LenaValueError` is raised if one tries to do that.\n        \"\"\"\n        # see graph.scale comments why this is called simply \"scale\"\n        # (not set_scale, get_scale, etc.)\n        if other is None:\n            # return scale\n            if self._scale is None or recompute:\n                self._scale = hf.integral(\n                    *hf.unify_1_md(self.bins, self.edges)\n                )\n            return self._scale\n        else:\n            # rescale from other\n            scale = self.scale()\n            if scale == 0:\n                raise lena.core.LenaValueError(\n                    \"can not rescale histogram with zero scale\"\n                )\n            self.bins = lena.math.md_map(lambda binc: binc*float(other) / scale,\n                                         self.bins)\n            self._scale = other\n            return None", "requirement": {"Functionality": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "Arguments": ""}}
{"namespace": "62b87b519a0c4fa8b80b3583", "namespace_real": "lena.structures.graph.scale", "type": "class", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/graph.py", "ce_id": "62b87b519a0c4fa8b80b3583", "signature_position": [192, null], "body_position": [null, 268], "signature": "def scale(self, other=None):", "ground_truth": "    def scale(self, other=None):\n        \"\"\"Get or set the scale of the graph.\n\n        If *other* is ``None``, return the scale of this graph.\n\n        If a numeric *other* is provided, rescale to that value.\n        If the graph has unknown or zero scale,\n        rescaling that will raise :exc:`~.LenaValueError`.\n\n        To get meaningful results, graph's fields are used.\n        Only the last coordinate is rescaled.\n        For example, if the graph has *x* and *y* coordinates,\n        then *y* will be rescaled, and for a 3-dimensional graph\n        *z* will be rescaled.\n        All errors are rescaled together with their coordinate.\n        \"\"\"\n        # this method is called scale() for uniformity with histograms\n        # And this looks really good: explicit for computations\n        # (not a subtle graph.scale, like a constant field (which is,\n        #  however, the case in graph - but not in other structures))\n        # and easy to remember (set_scale? rescale? change_scale_to?..)\n\n        # We modify the graph in place,\n        # because that would be redundant (not optimal)\n        # to create a new graph\n        # if we only want to change the scale of the existing one.\n\n        if other is None:\n            return self._scale\n\n        if not self._scale:\n            raise lena.core.LenaValueError(\n                \"can't rescale a graph with zero or unknown scale\"\n            )\n\n        last_coord_ind = self.dim - 1\n        last_coord_name = self.field_names[last_coord_ind]\n\n        last_coord_indices = ([last_coord_ind] +\n                self._get_err_indices(last_coord_name)\n        )\n\n        # In Python 2 3/2 is 1, so we want to be safe;\n        # the downside is that integer-valued graphs\n        # will become floating, but that is doubtfully an issue.\n        # Remove when/if dropping support for Python 2.\n        rescale = float(other) / self._scale\n\n        mul = operator.mul\n        partial = functools.partial\n\n        # a version with lambda is about 50% slower:\n        # timeit.timeit('[*map(lambda val: val*2, vals)]', \\\n        #     setup='vals = list(range(45)); from operator import mul; \\\n        #     from functools import partial')\n        # 3.159\n        # same setup for\n        # timeit.timeit('[*map(partial(mul, 2), vals)]',...):\n        # 2.075\n        # \n        # [*map(...)] is very slightly faster than list(map(...)),\n        # but it's unavailable in Python 2 (and anyway less readable).\n\n        # rescale arrays of values and errors\n        for ind, arr in enumerate(self.coords):\n            if ind in last_coord_indices:\n                # Python lists are faster than arrays,\n                # https://stackoverflow.com/a/62399645/952234\n                # (because each time taking a value from an array\n                #  creates a Python object)\n                self.coords[ind] = list(map(partial(mul, rescale),\n                                            arr))\n\n        self._scale = other\n\n        # as suggested in PEP 8\n        return None", "requirement": {"Functionality": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "Arguments": ""}}
{"namespace": "62b87b869a0c4fa8b80b35e1", "namespace_real": "lena.structures.hist_functions.hist_to_graph", "type": "function", "project_path": "ynikitenko/lena", "completion_path": "lena/structures/hist_functions.py", "ce_id": "62b87b869a0c4fa8b80b35e1", "signature_position": [299, null], "body_position": [null, 391], "signature": "def hist_to_graph(hist, make_value=None, get_coordinate='left', field_names=('x', 'y'), scale=None):", "ground_truth": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"Convert a :class:`.histogram` to a :class:`.graph`.\n\n    *make_value* is a function to set the value of a graph's point.\n    By default it is bin content.\n    *make_value* accepts a single value (bin content) without context.\n\n    This option could be used to create graph's error bars.\n    For example, to create a graph with errors\n    from a histogram where bins contain\n    a named tuple with fields *mean*, *mean_error* and a context\n    one could use\n\n    >>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n    *get_coordinate* defines what the coordinate\n    of a graph point created from a histogram bin will be.\n    It can be \"left\" (default), \"right\" and \"middle\".\n\n    *field_names* set field names of the graph. Their number\n    must be the same as the dimension of the result.\n    For a *make_value* above they would be\n    *(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n    *scale* becomes the graph's scale (unknown by default).\n    If it is ``True``, it uses the histogram scale.\n\n    *hist* must contain only numeric bins (without context)\n    or *make_value* must remove context when creating a numeric graph.\n\n    Return the resulting graph.\n    \"\"\"\n    ## Could have allowed get_coordinate to be callable\n    # (for generality), but 1) first find a use case,\n    # 2) histogram bins could be adjusted in the first place.\n    # -- don't understand 2.\n    if get_coordinate == \"left\":\n        get_coord = lambda edges: tuple(coord[0] for coord in edges)\n    elif get_coordinate == \"right\":\n        get_coord = lambda edges: tuple(coord[1] for coord in edges)\n    # *middle* between the two edges, not the *center* of the bin\n    # as a whole (because the graph corresponds to a point)\n    elif get_coordinate == \"middle\":\n        get_coord = lambda edges: tuple(0.5*(coord[0] + coord[1])\n                                        for coord in edges)\n    else:\n        raise lena.core.LenaValueError(\n            'get_coordinate must be one of \"left\", \"right\" or \"middle\"; '\n            '\"{}\" provided'.format(get_coordinate)\n        )\n\n    # todo: make_value may be bad design.\n    # Maybe allow to change the graph in the sequence.\n    # However, make_value allows not to recreate a graph\n    # or its coordinates (if that is not needed).\n\n    if isinstance(field_names, str):\n        # copied from graph.__init__\n        field_names = tuple(re.findall(r'[^,\\s]+', field_names))\n    elif not isinstance(field_names, tuple):\n        raise lena.core.LenaTypeError(\n            \"field_names must be a string or a tuple\"\n        )\n    coords = [[] for _ in field_names]\n\n    chain = itertools.chain\n\n    if scale is True:\n        scale = hist.scale()\n\n    for value, edges in iter_bins_with_edges(hist.bins, hist.edges):\n        coord = get_coord(edges)\n\n        # Since we never use contexts here, it will be optimal\n        # to ignore them completely (remove them elsewhere).\n        # bin_value = lena.flow.get_data(value)\n        bin_value = value\n\n        if make_value is None:\n            graph_value = bin_value\n        else:\n            graph_value = make_value(bin_value)\n\n        # for iteration below\n        if not hasattr(graph_value, \"__iter__\"):\n            graph_value = (graph_value,)\n\n        # add each coordinate to respective array\n        for arr, coord_ in zip(coords, chain(coord, graph_value)):\n            arr.append(coord_)\n\n    return _graph(coords, field_names=field_names, scale=scale)", "requirement": {"Functionality": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "Arguments": ""}}
{"namespace": "62b8b4baeb7e40a82d2d1136", "namespace_real": "src.zope.interface.verify._verify", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/verify.py", "ce_id": "62b8b4baeb7e40a82d2d1136", "signature_position": [42, null], "body_position": [null, 94], "signature": "def _verify(iface, candidate, tentative=False, vtype=None):", "ground_truth": "def _verify(iface, candidate, tentative=False, vtype=None):\n    \"\"\"\n    Verify that *candidate* might correctly provide *iface*.\n\n    This involves:\n\n    - Making sure the candidate claims that it provides the\n      interface using ``iface.providedBy`` (unless *tentative* is `True`,\n      in which case this step is skipped). This means that the candidate's class\n      declares that it `implements <zope.interface.implementer>` the interface,\n      or the candidate itself declares that it `provides <zope.interface.provider>`\n      the interface\n\n    - Making sure the candidate defines all the necessary methods\n\n    - Making sure the methods have the correct signature (to the\n      extent possible)\n\n    - Making sure the candidate defines all the necessary attributes\n\n    :return bool: Returns a true value if everything that could be\n       checked passed.\n    :raises zope.interface.Invalid: If any of the previous\n       conditions does not hold.\n\n    .. versionchanged:: 5.0\n        If multiple methods or attributes are invalid, all such errors\n        are collected and reported. Previously, only the first error was reported.\n        As a special case, if only one such error is present, it is raised\n        alone, like before.\n    \"\"\"\n\n    if vtype == 'c':\n        tester = iface.implementedBy\n    else:\n        tester = iface.providedBy\n\n    excs = []\n    if not tentative and not tester(candidate):\n        excs.append(DoesNotImplement(iface, candidate))\n\n    for name, desc in iface.namesAndDescriptions(all=True):\n        try:\n            _verify_element(iface, name, desc, candidate, vtype)\n        except Invalid as e:\n            excs.append(e)\n\n    if excs:\n        if len(excs) == 1:\n            raise excs[0]\n        raise MultipleInvalid(iface, candidate, excs)\n\n    return True", "requirement": {"Functionality": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "Arguments": ""}}
{"namespace": "62b8b4baeb7e40a82d2d1137", "namespace_real": "src.zope.interface.verify.verifyObject", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/verify.py", "ce_id": "62b8b4baeb7e40a82d2d1137", "signature_position": [171, null], "body_position": [null, 172], "signature": "def verifyObject(iface, candidate, tentative=False):", "ground_truth": "def verifyObject(iface, candidate, tentative=False):\n    return _verify(iface, candidate, tentative, vtype='o')", "requirement": {"Functionality": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "Arguments": ""}}
{"namespace": "62b8b4c1eb7e40a82d2d1139", "namespace_real": "src.zope.interface.verify.verifyClass", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/verify.py", "ce_id": "62b8b4c1eb7e40a82d2d1139", "signature_position": [165, null], "body_position": [null, 169], "signature": "def verifyClass(iface, candidate, tentative=False):", "ground_truth": "def verifyClass(iface, candidate, tentative=False):\n    \"\"\"\n    Verify that the *candidate* might correctly provide *iface*.\n    \"\"\"\n    return _verify(iface, candidate, tentative, vtype='c')", "requirement": {"Functionality": "Verify that the *candidate* might correctly provide *iface*.", "Arguments": ""}}
{"namespace": "62b8b559eb7e40a82d2d11f6", "namespace_real": "src.zope.interface.advice.determineMetaclass", "type": "function", "project_path": "pexip/os-zope", "completion_path": "src/zope/interface/advice.py", "ce_id": "62b8b559eb7e40a82d2d11f6", "signature_position": [167, null], "body_position": [null, 193], "signature": "def determineMetaclass(bases, explicit_mc=None):", "ground_truth": "def determineMetaclass(bases, explicit_mc=None):\n    \"\"\"Determine metaclass from 1+ bases and optional explicit __metaclass__\"\"\"\n\n    meta = [getattr(b,'__class__',type(b)) for b in bases]\n\n    if explicit_mc is not None:\n        # The explicit metaclass needs to be verified for compatibility\n        # as well, and allowed to resolve the incompatible bases, if any\n        meta.append(explicit_mc)\n\n    if len(meta)==1:\n        # easy case\n        return meta[0]\n\n    candidates = minimalBases(meta) # minimal set of metaclasses\n\n    if not candidates: # pragma: no cover\n        # they're all \"classic\" classes\n        assert(not __python3) # This should not happen under Python 3\n        return ClassType\n\n    elif len(candidates)>1:\n        # We could auto-combine, but for now we won't...\n        raise TypeError(\"Incompatible metatypes\",bases)\n\n    # Just one, return it\n    return candidates[0]", "requirement": {"Functionality": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "Arguments": ""}}
{"namespace": "62b8d22a48ba5a41d1c3f47d", "namespace_real": "cachetools.cache.pop", "type": "class", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/cache.py", "ce_id": "62b8d22a48ba5a41d1c3f47d", "signature_position": [87, null], "body_position": [null, 95], "signature": "def pop(self, key, default=__marker):", "ground_truth": "    def pop(self, key, default=__marker):\n        if key in self:\n            value = self[key]\n            del self[key]\n        elif default is self.__marker:\n            raise KeyError(key)\n        else:\n            value = default\n        return value", "requirement": {"Functionality": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "Arguments": ""}}
{"namespace": "62b8d23748ba5a41d1c3f497", "namespace_real": "cachetools.lfu.popitem", "type": "class", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/lfu.py", "ce_id": "62b8d23748ba5a41d1c3f497", "signature_position": [27, null], "body_position": [null, 34], "signature": "def popitem(self):", "ground_truth": "    def popitem(self):\n        \"\"\"Remove and return the `(key, value)` pair least frequently used.\"\"\"\n        try:\n            (key, _), = self.__counter.most_common(1)\n        except ValueError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))", "requirement": {"Functionality": "Remove and return the `(key, value)` pair least frequently used.", "Arguments": ""}}
{"namespace": "62b8d23a48ba5a41d1c3f499", "namespace_real": "cachetools.lru.popitem", "type": "class", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/lru.py", "ce_id": "62b8d23a48ba5a41d1c3f499", "signature_position": [27, null], "body_position": [null, 34], "signature": "def popitem(self):", "ground_truth": "    def popitem(self):\n        \"\"\"Remove and return the `(key, value)` pair least recently used.\"\"\"\n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))", "requirement": {"Functionality": "Remove and return the `(key, value)` pair least recently used.", "Arguments": ""}}
{"namespace": "62b8d23c48ba5a41d1c3f49b", "namespace_real": "cachetools.mru.popitem", "type": "class", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/mru.py", "ce_id": "62b8d23c48ba5a41d1c3f49b", "signature_position": [27, null], "body_position": [null, 34], "signature": "def popitem(self):", "ground_truth": "    def popitem(self):\n        \"\"\"Remove and return the `(key, value)` pair most recently used.\"\"\"\n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))", "requirement": {"Functionality": "Remove and return the `(key, value)` pair most recently used.", "Arguments": ""}}
{"namespace": "62b8d23e48ba5a41d1c3f49e", "namespace_real": "cachetools.rr.popitem", "type": "class", "project_path": "pexip/os-python-cachetools", "completion_path": "cachetools/rr.py", "ce_id": "62b8d23e48ba5a41d1c3f49e", "signature_position": [27, null], "body_position": [null, 34], "signature": "def popitem(self):", "ground_truth": "    def popitem(self):\n        \"\"\"Remove and return a random `(key, value)` pair.\"\"\"\n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))", "requirement": {"Functionality": "Remove and return a random `(key, value)` pair.", "Arguments": ""}}
{"namespace": "62b43425903eeb48555d3ea1", "namespace_real": "sqlparams.__init__._create_in_regex", "type": "class", "project_path": "cpburnz/python-sql-parameters", "completion_path": "sqlparams/__init__.py", "ce_id": "62b43425903eeb48555d3ea1", "signature_position": [292, null], "body_position": [null, 310], "signature": "def _create_in_regex(self) -> Pattern:", "ground_truth": "\tdef _create_in_regex(self) -> Pattern:\n\t\t\"\"\"\n\t\tCreate the in-style parameter regular expression.\n\n\t\tReturns the in-style parameter regular expression (:class:`re.Pattern`).\n\t\t\"\"\"\n\t\tregex_parts = []\n\n\t\tif self._in_obj.escape_char != \"%\" and self._out_obj.escape_char == \"%\":\n\t\t\tregex_parts.append(\"(?P<out_percent>%)\")\n\n\t\tif self._escape_char:\n\t\t\t# Escaping is enabled.\n\t\t\tescape = self._in_obj.escape_regex.format(char=re.escape(self._escape_char))\n\t\t\tregex_parts.append(escape)\n\n\t\tregex_parts.append(self._in_obj.param_regex)\n\n\t\treturn re.compile(\"|\".join(regex_parts))", "requirement": {"Functionality": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "Arguments": ""}}
{"namespace": "62b43426903eeb48555d3ea2", "namespace_real": "sqlparams.__init__._create_converter", "type": "class", "project_path": "cpburnz/python-sql-parameters", "completion_path": "sqlparams/__init__.py", "ce_id": "62b43426903eeb48555d3ea2", "signature_position": [238, null], "body_position": [null, 290], "signature": "def _create_converter(self) -> _converting._Converter:", "ground_truth": "\tdef _create_converter(self) -> _converting._Converter:\n\t\t\"\"\"\n\t\tCreate the parameter style converter.\n\n\t\tReturns the parameter style converter (:class:`._converting._Converter`).\n\t\t\"\"\"\n\t\tassert self._in_regex is not None, self._in_regex\n\t\tassert self._out_obj is not None, self._out_obj\n\n\t\t# Determine converter class.\n\t\tconverter_class: Type[_converting._Converter]\n\t\tif isinstance(self._in_obj, _styles._NamedStyle):\n\t\t\tif isinstance(self._out_obj, _styles._NamedStyle):\n\t\t\t\tconverter_class = _converting._NamedToNamedConverter\n\t\t\telif isinstance(self._out_obj, _styles._NumericStyle):\n\t\t\t\tconverter_class = _converting._NamedToNumericConverter\n\t\t\telif isinstance(self._out_obj, _styles._OrdinalStyle):\n\t\t\t\tconverter_class = _converting._NamedToOrdinalConverter\n\t\t\telse:\n\t\t\t\traise TypeError(\"out_style:{!r} maps to an unexpected type: {!r}\".format(self._out_style, self._out_obj))\n\n\t\telif isinstance(self._in_obj, _styles._NumericStyle):\n\t\t\tif isinstance(self._out_obj, _styles._NamedStyle):\n\t\t\t\tconverter_class = _converting._NumericToNamedConverter\n\t\t\telif isinstance(self._out_obj, _styles._NumericStyle):\n\t\t\t\tconverter_class = _converting._NumericToNumericConverter\n\t\t\telif isinstance(self._out_obj, _styles._OrdinalStyle):\n\t\t\t\tconverter_class = _converting._NumericToOrdinalConverter\n\t\t\telse:\n\t\t\t\traise TypeError(\"out_style:{!r} maps to an unexpected type: {!r}\".format(self._out_style, self._out_obj))\n\n\t\telif isinstance(self._in_obj, _styles._OrdinalStyle):\n\t\t\tif isinstance(self._out_obj, _styles._NamedStyle):\n\t\t\t\tconverter_class = _converting._OrdinalToNamedConverter\n\t\t\telif isinstance(self._out_obj, _styles._NumericStyle):\n\t\t\t\tconverter_class = _converting._OrdinalToNumericConverter\n\t\t\telif isinstance(self._out_obj, _styles._OrdinalStyle):\n\t\t\t\tconverter_class = _converting._OrdinalToOrdinalConverter\n\t\t\telse:\n\t\t\t\traise TypeError(\"out_style:{!r} maps to an unexpected type: {!r}\".format(self._out_style, self._out_obj))\n\n\t\telse:\n\t\t\traise TypeError(\"in_style:{!r} maps to an unexpected type: {!r}\".format(self._in_style, self._in_obj))\n\n\t\t# Create converter.\n\t\tconverter = converter_class(\n\t\t\tescape_char=self._escape_char,\n\t\t\texpand_tuples=self._expand_tuples,\n\t\t\tin_regex=self._in_regex,\n\t\t\tin_style=self._in_obj,\n\t\t\tout_style=self._out_obj,\n\t\t)\n\t\treturn converter", "requirement": {"Functionality": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "Arguments": ""}}
{"namespace": "62b8966c755ee91dce50a154", "namespace_real": "dateutil.parser.isoparser.isoparse", "type": "class", "project_path": "pexip/os-python-dateutil", "completion_path": "dateutil/parser/isoparser.py", "ce_id": "62b8966c755ee91dce50a154", "signature_position": [59, null], "body_position": [null, 146], "signature": "@_takes_ascii\ndef isoparse(self, dt_str):", "ground_truth": "    @_takes_ascii\n    def isoparse(self, dt_str):\n        \"\"\"\n        Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\n        An ISO-8601 datetime string consists of a date portion, followed\n        optionally by a time portion - the date and time portions are separated\n        by a single character separator, which is ``T`` in the official\n        standard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\n        combined with a time portion.\n\n        Supported date formats are:\n\n        Common:\n\n        - ``YYYY``\n        - ``YYYY-MM`` or ``YYYYMM``\n        - ``YYYY-MM-DD`` or ``YYYYMMDD``\n\n        Uncommon:\n\n        - ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n        - ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\n        The ISO week and day numbering follows the same logic as\n        :func:`datetime.date.isocalendar`.\n\n        Supported time formats are:\n\n        - ``hh``\n        - ``hh:mm`` or ``hhmm``\n        - ``hh:mm:ss`` or ``hhmmss``\n        - ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\n        Midnight is a special case for `hh`, as the standard supports both\n        00:00 and 24:00 as a representation. The decimal separator can be\n        either a dot or a comma.\n\n\n        .. caution::\n\n            Support for fractional components other than seconds is part of the\n            ISO-8601 standard, but is not currently implemented in this parser.\n\n        Supported time zone offset formats are:\n\n        - `Z` (UTC)\n        - `\u00b1HH:MM`\n        - `\u00b1HHMM`\n        - `\u00b1HH`\n\n        Offsets will be represented as :class:`dateutil.tz.tzoffset` objects,\n        with the exception of UTC, which will be represented as\n        :class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\n        as `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n        :param dt_str:\n            A string or stream containing only an ISO-8601 datetime string\n\n        :return:\n            Returns a :class:`datetime.datetime` representing the string.\n            Unspecified components default to their lowest value.\n\n        .. warning::\n\n            As of version 2.7.0, the strictness of the parser should not be\n            considered a stable part of the contract. Any valid ISO-8601 string\n            that parses correctly with the default settings will continue to\n            parse correctly in future versions, but invalid strings that\n            currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n            guaranteed to continue failing in future versions if they encode\n            a valid date.\n\n        .. versionadded:: 2.7.0\n        \"\"\"\n        components, pos = self._parse_isodate(dt_str)\n\n        if len(dt_str) > pos:\n            if self._sep is None or dt_str[pos:pos + 1] == self._sep:\n                components += self._parse_isotime(dt_str[pos + 1:])\n            else:\n                raise ValueError('String contains unknown ISO components')\n\n        if len(components) > 3 and components[3] == 24:\n            components[3] = 0\n            return datetime(*components) + timedelta(days=1)\n\n        return datetime(*components)", "requirement": {"Functionality": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "Arguments": ""}}
{"namespace": "62b896de755ee91dce50a183", "namespace_real": "dateutil.parser._parser.parse", "type": "class", "project_path": "pexip/os-python-dateutil", "completion_path": "dateutil/parser/_parser.py", "ce_id": "62b896de755ee91dce50a183", "signature_position": [578, null], "body_position": [null, 665], "signature": "def parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs):", "ground_truth": "    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \"\"\"\n        Parse the date/time string into a :class:`datetime.datetime` object.\n\n        :param timestr:\n            Any date/time string using the supported formats.\n\n        :param default:\n            The default datetime object, if this is a datetime object and not\n            ``None``, elements specified in ``timestr`` replace elements in the\n            default object.\n\n        :param ignoretz:\n            If set ``True``, time zones in parsed strings are ignored and a\n            naive :class:`datetime.datetime` object is returned.\n\n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time zones. This parameter can be a\n            dictionary with timezone aliases mapping time zone names to time\n            zones or a function taking two parameters (``tzname`` and\n            ``tzoffset``) and returning a time zone.\n\n            The timezones to which the names are mapped can be an integer\n            offset from UTC in seconds or a :class:`tzinfo` object.\n\n            .. doctest::\n               :options: +NORMALIZE_WHITESPACE\n\n                >>> from dateutil.parser import parse\n                >>> from dateutil.tz import gettz\n                >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n                >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n                >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n                datetime.datetime(2012, 1, 19, 17, 21,\n                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n            This parameter is ignored if ``ignoretz`` is set.\n\n        :param \\\\*\\\\*kwargs:\n            Keyword arguments as passed to ``_parse()``.\n\n        :return:\n            Returns a :class:`datetime.datetime` object or, if the\n            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n            first element being a :class:`datetime.datetime` object, the second\n            a tuple containing the fuzzy tokens.\n\n        :raises ParserError:\n            Raised for invalid or unknown string format, if the provided\n            :class:`tzinfo` is not in a valid format, or if an invalid date\n            would be created.\n\n        :raises TypeError:\n            Raised for non-string or character stream input.\n\n        :raises OverflowError:\n            Raised if the parsed date exceeds the largest valid C integer on\n            your system.\n        \"\"\"\n\n        if default is None:\n            default = datetime.datetime.now().replace(hour=0, minute=0,\n                                                      second=0, microsecond=0)\n\n        res, skipped_tokens = self._parse(timestr, **kwargs)\n\n        if res is None:\n            raise ParserError(\"Unknown string format: %s\", timestr)\n\n        if len(res) == 0:\n            raise ParserError(\"String does not contain a date: %s\", timestr)\n\n        try:\n            ret = self._build_naive(res, default)\n        except ValueError as e:\n            six.raise_from(ParserError(e.args[0] + \": %s\", timestr), e)\n\n        if not ignoretz:\n            ret = self._build_tzaware(ret, res, tzinfos)\n\n        if kwargs.get('fuzzy_with_tokens', False):\n            return ret, skipped_tokens\n        else:\n            return ret", "requirement": {"Functionality": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "Arguments": ""}}
{"namespace": "62b8a4a4755ee91dce50a3d3", "namespace_real": "dateutil.tz._common.fromutc", "type": "class", "project_path": "pexip/os-python-dateutil", "completion_path": "dateutil/tz/_common.py", "ce_id": "62b8a4a4755ee91dce50a3d3", "signature_position": [244, null], "body_position": [null, 264], "signature": "@_validate_fromutc_inputs\ndef fromutc(self, dt):", "ground_truth": "    @_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \"\"\"\n        Given a timezone-aware datetime in a given timezone, calculates a\n        timezone-aware datetime in a new timezone.\n\n        Since this is the one time that we *know* we have an unambiguous\n        datetime object, we take this opportunity to determine whether the\n        datetime is ambiguous and in a \"fold\" state (e.g. if it's the first\n        occurrence, chronologically, of the ambiguous datetime).\n\n        :param dt:\n            A timezone-aware :class:`datetime.datetime` object.\n        \"\"\"\n        dt_wall = self._fromutc(dt)\n\n        # Calculate the fold status given the two datetimes.\n        _fold = self._fold_status(dt, dt_wall)\n\n        # Set the default fold value for ambiguous dates\n        return enfold(dt_wall, fold=_fold)", "requirement": {"Functionality": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "Arguments": ""}}
{"namespace": "62b8a7b2755ee91dce50a4a7", "namespace_real": "dateutil.utils.default_tzinfo", "type": "function", "project_path": "pexip/os-python-dateutil", "completion_path": "dateutil/utils.py", "ce_id": "62b8a7b2755ee91dce50a4a7", "signature_position": [29, null], "body_position": [null, 61], "signature": "def default_tzinfo(dt, tzinfo):", "ground_truth": "def default_tzinfo(dt, tzinfo):\n    \"\"\"\n    Sets the ``tzinfo`` parameter on naive datetimes only\n\n    This is useful for example when you are provided a datetime that may have\n    either an implicit or explicit time zone, such as when parsing a time zone\n    string.\n\n    .. doctest::\n\n        >>> from dateutil.tz import tzoffset\n        >>> from dateutil.parser import parse\n        >>> from dateutil.utils import default_tzinfo\n        >>> dflt_tz = tzoffset(\"EST\", -18000)\n        >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n        2014-01-01 12:30:00+00:00\n        >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n        2014-01-01 12:30:00-05:00\n\n    :param dt:\n        The datetime on which to replace the time zone\n\n    :param tzinfo:\n        The :py:class:`datetime.tzinfo` subclass instance to assign to\n        ``dt`` if (and only if) it is naive.\n\n    :return:\n        Returns an aware :py:class:`datetime.datetime`.\n    \"\"\"\n    if dt.tzinfo is not None:\n        return dt\n    else:\n        return dt.replace(tzinfo=tzinfo)", "requirement": {"Functionality": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "Arguments": ""}}
{"namespace": "6305f9991d275c6667163c50", "namespace_real": "src.lithium.testcases.set_cut_chars", "type": "class", "project_path": "MozillaSecurity/lithium", "completion_path": "src/lithium/testcases.py", "ce_id": "6305f9991d275c6667163c50", "signature_position": [371, null], "body_position": [null, 391], "signature": "def set_cut_chars(self, before: bytes, after: bytes) -> None:", "ground_truth": "    def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \"\"\"Set the bytes used to delimit slice points.\n\n        Args:\n            before: Split file before these delimiters.\n            after: Split file after these delimiters.\n        \"\"\"\n        self._cutter = re.compile(\n            b\"[\"\n            + before\n            + b\"]?\"\n            + b\"[^\"\n            + before\n            + after\n            + b\"]*\"\n            + b\"(?:[\"\n            + after\n            + b\"]|$|(?=[\"\n            + before\n            + b\"]))\"\n        )", "requirement": {"Functionality": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "Arguments": ""}}
{"namespace": "6306292052e177c0ba469f09", "namespace_real": "federation.protocols.diaspora.protocol.identify_request", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/protocols/diaspora/protocol.py", "ce_id": "6306292052e177c0ba469f09", "signature_position": [33, null], "body_position": [null, 52], "signature": "def identify_request(request: RequestType):", "ground_truth": "def identify_request(request: RequestType):\n    \"\"\"Try to identify whether this is a Diaspora request.\n\n    Try first public message. Then private message. The check if this is a legacy payload.\n    \"\"\"\n    # Private encrypted JSON payload\n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"encrypted_magic_envelope\" in data:\n            return True\n    except Exception:\n        pass\n    # Public XML payload\n    try:\n        xml = etree.fromstring(encode_if_text(request.body))\n        if xml.tag == MAGIC_ENV_TAG:\n            return True\n    except Exception:\n        pass\n    return False", "requirement": {"Functionality": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "Arguments": ""}}
{"namespace": "6306292152e177c0ba469f0d", "namespace_real": "federation.protocols.matrix.protocol.identify_request", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/protocols/matrix/protocol.py", "ce_id": "6306292152e177c0ba469f0d", "signature_position": [24, null], "body_position": [null, 35], "signature": "def identify_request(request: RequestType) -> bool:", "ground_truth": "def identify_request(request: RequestType) -> bool:\n    \"\"\"\n    Try to identify whether this is a Matrix request\n    \"\"\"\n    # noinspection PyBroadException\n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"events\" in data:\n            return True\n    except Exception:\n        pass\n    return False", "requirement": {"Functionality": "Try to identify whether this is a Matrix request", "Arguments": ""}}
{"namespace": "6306292252e177c0ba469f11", "namespace_real": "federation.entities.diaspora.utils.format_dt", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/entities/diaspora/utils.py", "ce_id": "6306292252e177c0ba469f11", "signature_position": [16, null], "body_position": [null, 22], "signature": "def format_dt(dt):", "ground_truth": "def format_dt(dt):\n    \"\"\"\n    Format a datetime in the way that D* nodes expect.\n    \"\"\"\n    return ensure_timezone(dt).astimezone(tzutc()).strftime(\n        '%Y-%m-%dT%H:%M:%SZ'\n    )", "requirement": {"Functionality": "Format a datetime in the way that D* nodes expect.", "Arguments": ""}}
{"namespace": "6306292352e177c0ba469f1d", "namespace_real": "federation.utils.text.find_tags", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/text.py", "ce_id": "6306292352e177c0ba469f1d", "signature_position": [25, null], "body_position": [null, 85], "signature": "def find_tags(text: str, replacer: callable=None) -> Tuple[Set, str]:", "ground_truth": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \"\"\"Find tags in text.\n\n    Tries to ignore tags inside code blocks.\n\n    Optionally, if passed a \"replacer\", will also replace the tag word with the result\n    of the replacer function called with the tag word.\n\n    Returns a set of tags and the original or replaced text.\n    \"\"\"\n    found_tags = set()\n    # <br> and <p> tags cause issues in us finding words - add some spacing around them\n    new_text = text.replace(\"<br>\", \" <br> \").replace(\"<p>\", \" <p> \").replace(\"</p>\", \" </p> \")\n    lines = new_text.splitlines(keepends=True)\n    final_lines = []\n    code_block = False\n    final_text = None\n    # Check each line separately\n    for line in lines:\n        final_words = []\n        if line[0:3] == \"```\":\n            code_block = not code_block\n        if line.find(\"#\") == -1 or line[0:4] == \"    \" or code_block:\n            # Just add the whole line\n            final_lines.append(line)\n            continue\n        # Check each word separately\n        words = line.split(\" \")\n        for word in words:\n            if word.find('#') > -1:\n                candidate = word.strip().strip(\"([]),.!?:*_%/\")\n                if candidate.find('<') > -1 or candidate.find('>') > -1:\n                    # Strip html\n                    candidate = bleach.clean(word, strip=True)\n                # Now split with slashes\n                candidates = candidate.split(\"/\")\n                to_replace = []\n                for candidate in candidates:\n                    if candidate.startswith(\"#\"):\n                        candidate = candidate.strip(\"#\")\n                        if test_tag(candidate.lower()):\n                            found_tags.add(candidate.lower())\n                            to_replace.append(candidate)\n                if replacer:\n                    tag_word = word\n                    try:\n                        for counter, replacee in enumerate(to_replace, 1):\n                            tag_word = tag_word.replace(\"#%s\" % replacee, replacer(replacee))\n                    except Exception:\n                        pass\n                    final_words.append(tag_word)\n                else:\n                    final_words.append(word)\n            else:\n                final_words.append(word)\n        final_lines.append(\" \".join(final_words))\n    if replacer:\n        final_text = \"\".join(final_lines)\n    if final_text:\n        final_text = final_text.replace(\" <br> \", \"<br>\").replace(\" <p> \", \"<p>\").replace(\" </p> \", \"</p>\")\n    return found_tags, final_text or text", "requirement": {"Functionality": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "Arguments": ""}}
{"namespace": "6306292352e177c0ba469f1e", "namespace_real": "federation.utils.text.process_text_links", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/text.py", "ce_id": "6306292352e177c0ba469f1e", "signature_position": [96, null], "body_position": [null, 116], "signature": "def process_text_links(text):", "ground_truth": "def process_text_links(text):\n    \"\"\"Process links in text, adding some attributes and linkifying textual links.\"\"\"\n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \"\"\"Run standard callbacks except for internal links.\"\"\"\n        href_key = (None, \"href\")\n        if attrs.get(href_key).startswith(\"/\"):\n            return attrs\n\n        # Run the standard callbacks\n        for callback in link_callbacks:\n            attrs = callback(attrs, new)\n        return attrs\n\n    return bleach.linkify(\n        text,\n        callbacks=[link_attributes],\n        parse_email=False,\n        skip_tags=[\"code\"],\n    )", "requirement": {"Functionality": "Process links in text, adding some attributes and linkifying textual links.", "Arguments": ""}}
{"namespace": "6306292652e177c0ba469f34", "namespace_real": "federation.utils.network.fetch_content_type", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/network.py", "ce_id": "6306292652e177c0ba469f34", "signature_position": [22, null], "body_position": [null, 31], "signature": "def fetch_content_type(url: str) -> Optional[str]:", "ground_truth": "def fetch_content_type(url: str) -> Optional[str]:\n    \"\"\"\n    Fetch the HEAD of the remote url to determine the content type.\n    \"\"\"\n    try:\n        response = requests.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when fetching url %s\", ex, url)\n    else:\n        return response.headers.get('Content-Type')", "requirement": {"Functionality": "Fetch the HEAD of the remote url to determine the content type.", "Arguments": ""}}
{"namespace": "6306292a52e177c0ba469f41", "namespace_real": "federation.utils.text.test_tag", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/text.py", "ce_id": "6306292a52e177c0ba469f41", "signature_position": [119, null], "body_position": [null, 126], "signature": "def test_tag(tag: str) -> bool:", "ground_truth": "def test_tag(tag: str) -> bool:\n    \"\"\"Test a word whether it could be accepted as a tag.\"\"\"\n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True", "requirement": {"Functionality": "Test a word whether it could be accepted as a tag.", "Arguments": ""}}
{"namespace": "6306298b52e177c0ba469fdc", "namespace_real": "federation.entities.diaspora.mappers.xml_children_as_dict", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/entities/diaspora/mappers.py", "ce_id": "6306298b52e177c0ba469fdc", "signature_position": [55, null], "body_position": [null, 60], "signature": "def xml_children_as_dict(node):", "ground_truth": "def xml_children_as_dict(node):\n    \"\"\"Turn the children of node <xml> into a dict, keyed by tag name.\n\n    This is only a shallow conversation - child nodes are not recursively processed.\n    \"\"\"\n    return dict((e.tag, e.text) for e in node)", "requirement": {"Functionality": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "Arguments": ""}}
{"namespace": "6306299052e177c0ba469fe8", "namespace_real": "federation.entities.diaspora.mappers.check_sender_and_entity_handle_match", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/entities/diaspora/mappers.py", "ce_id": "6306299052e177c0ba469fe8", "signature_position": [63, null], "body_position": [null, 74], "signature": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):", "ground_truth": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \"\"\"Ensure that sender and entity handles match.\n\n    Basically we've already verified the sender is who they say when receiving the payload. However, the sender might\n    be trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\n    AND the object. We must ensure they're the same.\n    \"\"\"\n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        return False\n    return True", "requirement": {"Functionality": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "Arguments": ""}}
{"namespace": "630629b952e177c0ba46a043", "namespace_real": "federation.hostmeta.generators.get_nodeinfo_well_known_document", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/hostmeta/generators.py", "ce_id": "630629b952e177c0ba46a043", "signature_position": [314, null], "body_position": [null, 332], "signature": "def get_nodeinfo_well_known_document(url, document_path=None):", "ground_truth": "def get_nodeinfo_well_known_document(url, document_path=None):\n    \"\"\"Generate a NodeInfo .well-known document.\n\n    See spec: http://nodeinfo.diaspora.software\n\n    :arg url: The full base url with protocol, ie https://example.com\n    :arg document_path: Custom NodeInfo document path if supplied (optional)\n    :returns: dict\n    \"\"\"\n    return {\n        \"links\": [\n            {\n                \"rel\": \"http://nodeinfo.diaspora.software/ns/schema/1.0\",\n                \"href\": \"{url}{path}\".format(\n                    url=url, path=document_path or NODEINFO_DOCUMENT_PATH\n                )\n            }\n        ]\n    }", "requirement": {"Functionality": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "Arguments": ""}}
{"namespace": "630629d052e177c0ba46a0a1", "namespace_real": "federation.protocols.diaspora.signatures.verify_relayable_signature", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/protocols/diaspora/signatures.py", "ce_id": "630629d052e177c0ba46a0a1", "signature_position": [30, null], "body_position": [null, 37], "signature": "def verify_relayable_signature(public_key, doc, signature):", "ground_truth": "def verify_relayable_signature(public_key, doc, signature):\n    \"\"\"\n    Verify the signed XML elements to have confidence that the claimed\n    author did actually generate this message.\n    \"\"\"\n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(RSA.importKey(public_key))\n    return cipher.verify(sig_hash, b64decode(signature))", "requirement": {"Functionality": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "Arguments": ""}}
{"namespace": "630629e052e177c0ba46a0c4", "namespace_real": "federation.utils.diaspora.parse_diaspora_webfinger", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/diaspora.py", "ce_id": "630629e052e177c0ba46a0c4", "signature_position": [28, null], "body_position": [null, 54], "signature": "def parse_diaspora_webfinger(document: str) -> Dict:", "ground_truth": "def parse_diaspora_webfinger(document: str) -> Dict:\n    \"\"\"\n    Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\n    https://diaspora.github.io/diaspora_federation/discovery/webfinger.html\n    \"\"\"\n    webfinger = {\n        \"hcard_url\": None,\n    }\n    # noinspection PyBroadException\n    try:\n        doc = json.loads(document)\n        for link in doc[\"links\"]:\n            if link[\"rel\"] == \"http://microformats.org/profile/hcard\":\n                webfinger[\"hcard_url\"] = link[\"href\"]\n                break\n        else:\n            logger.warning(\"parse_diaspora_webfinger: found JSON webfinger but it has no hcard href\")\n            raise ValueError\n    except Exception:\n        try:\n            xrd = XRD.parse_xrd(document)\n            webfinger[\"hcard_url\"] = xrd.find_link(rels=\"http://microformats.org/profile/hcard\").href\n        except (xml.parsers.expat.ExpatError, TypeError):\n            logger.warning(\"parse_diaspora_webfinger: found XML webfinger but it fails to parse\")\n            pass\n    return webfinger", "requirement": {"Functionality": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "Arguments": ""}}
{"namespace": "630629e152e177c0ba46a0d1", "namespace_real": "federation.utils.network.try_retrieve_webfinger_document", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/network.py", "ce_id": "630629e152e177c0ba46a0d1", "signature_position": [212, null], "body_position": [null, 226], "signature": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:", "ground_truth": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \"\"\"\n    Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.\n    \"\"\"\n    try:\n        host = handle.split(\"@\")[1]\n    except AttributeError:\n        logger.warning(\"retrieve_webfinger_document: invalid handle given: %s\", handle)\n        return None\n    document, code, exception = fetch_document(\n        host=host, path=\"/.well-known/webfinger?resource=acct:%s\" % quote(handle),\n    )\n    if exception:\n        logger.debug(\"retrieve_webfinger_document: failed to fetch webfinger document: %s, %s\", code, exception)\n    return document", "requirement": {"Functionality": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "Arguments": ""}}
{"namespace": "630629e152e177c0ba46a0d2", "namespace_real": "federation.utils.diaspora.retrieve_and_parse_diaspora_webfinger", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/diaspora.py", "ce_id": "630629e152e177c0ba46a0d2", "signature_position": [71, null], "body_position": [null, 89], "signature": "def retrieve_and_parse_diaspora_webfinger(handle):", "ground_truth": "def retrieve_and_parse_diaspora_webfinger(handle):\n    \"\"\"\n    Retrieve a and parse a remote Diaspora webfinger document.\n\n    :arg handle: Remote handle to retrieve\n    :returns: dict\n    \"\"\"\n    document = try_retrieve_webfinger_document(handle)\n    if document:\n        return parse_diaspora_webfinger(document)\n    host = handle.split(\"@\")[1]\n    hostmeta = retrieve_diaspora_host_meta(host)\n    if not hostmeta:\n        return None\n    url = hostmeta.find_link(rels=\"lrdd\").template.replace(\"{uri}\", quote(handle))\n    document, code, exception = fetch_document(url)\n    if exception:\n        return None\n    return parse_diaspora_webfinger(document)", "requirement": {"Functionality": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "Arguments": ""}}
{"namespace": "630629e252e177c0ba46a0d6", "namespace_real": "federation.utils.diaspora.retrieve_diaspora_host_meta", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/diaspora.py", "ce_id": "630629e252e177c0ba46a0d6", "signature_position": [92, null], "body_position": [null, 103], "signature": "def retrieve_diaspora_host_meta(host):", "ground_truth": "def retrieve_diaspora_host_meta(host):\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n    :returns: ``XRD`` instance\n    \"\"\"\n    document, code, exception = fetch_document(host=host, path=\"/.well-known/host-meta\")\n    if exception:\n        return None\n    xrd = XRD.parse_xrd(document)\n    return xrd", "requirement": {"Functionality": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "Arguments": ""}}
{"namespace": "630629e752e177c0ba46a0fb", "namespace_real": "federation.utils.network.send_document", "type": "function", "project_path": "jaywink/federation", "completion_path": "federation/utils/network.py", "ce_id": "630629e752e177c0ba46a0fb", "signature_position": [178, null], "body_position": [null, 209], "signature": "def send_document(url, data, timeout=10, method='post', *args, **kwargs):", "ground_truth": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \"\"\"Helper method to send a document via POST.\n\n    Additional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n    :arg url: Full url to send to, including protocol\n    :arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n    :arg timeout: Seconds to wait for response (defaults to 10)\n    :arg method: Method to use, defaults to post\n    :returns: Tuple of status code (int or None) and error (exception class instance or None)\n    \"\"\"\n    logger.debug(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n    if not method:\n        method = \"post\"\n    headers = CaseInsensitiveDict({\n        'User-Agent': USER_AGENT,\n    })\n    if \"headers\" in kwargs:\n        # Update from kwargs\n        headers.update(kwargs.get(\"headers\"))\n    kwargs.update({\n        \"data\": data, \"timeout\": timeout, \"headers\": headers\n    })\n    request_func = getattr(requests, method)\n    try:\n        response = request_func(url, *args, **kwargs)\n        logger.debug(\"send_document: response status code %s\", response.status_code)\n        return response.status_code, None\n    # TODO support rate limit 429 code\n    except RequestException as ex:\n        logger.debug(\"send_document: exception %s\", ex)\n        return None, ex", "requirement": {"Functionality": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "Arguments": ""}}
{"namespace": "6306091073426c38ae68acac", "namespace_real": "infrared.core.utils.dict_utils.dict_insert", "type": "function", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/utils/dict_utils.py", "ce_id": "6306091073426c38ae68acac", "signature_position": [8, null], "body_position": [null, 32], "signature": "def dict_insert(dic, val, key, *keys):", "ground_truth": "def dict_insert(dic, val, key, *keys):\n    \"\"\"insert a value of a nested key into a dictionary\n\n    to insert value for a nested key, all ancestor keys should be given as\n    method's arguments\n\n    example:\n      dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n    :param dic: a dictionary object to insert the nested key value into\n    :param val: a value to insert to the given dictionary\n    :param key: first key in a chain of key that will store the value\n    :param keys: sub keys in the keys chain\n    \"\"\"\n    if dic is None:\n        return\n\n    if not keys:\n        if isinstance(dic.get(key, None), dict) and isinstance(val, dict):\n            dict_merge(dic[key], val)\n        else:\n            dic[key] = val\n        return\n\n    dict_insert(dic.setdefault(key, {}), val, *keys)", "requirement": {"Functionality": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "Arguments": ""}}
{"namespace": "6306091a73426c38ae68acc8", "namespace_real": "tests.test_complex_types.list_of_file_names", "type": "function", "project_path": "redhat-openstack/infrared", "completion_path": "tests/test_complex_types.py", "ce_id": "6306091a73426c38ae68acc8", "signature_position": [229, null], "body_position": [null, 233], "signature": "def list_of_file_names(settings_dirs, spec_option):", "ground_truth": "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\"Create a new IniType complex type\n    \"\"\"\n    return cli.ListOfFileNames(\"ListOfFileNames\", settings_dirs, None,\n                               spec_option)", "requirement": {"Functionality": "Create a new IniType complex type", "Arguments": ""}}
{"namespace": "6306091b73426c38ae68acd7", "namespace_real": "infrared.core.services.__init__.ansible_config_manager", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/services/__init__.py", "ce_id": "6306091b73426c38ae68acd7", "signature_position": [133, null], "body_position": [null, 136], "signature": "@classmethod\ndef ansible_config_manager(cls):", "ground_truth": "    @classmethod\n    def ansible_config_manager(cls):\n        \"\"\"Gets the ansible config manager. \"\"\"\n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)", "requirement": {"Functionality": "Gets the ansible config manager.", "Arguments": ""}}
{"namespace": "6306091b73426c38ae68acd9", "namespace_real": "infrared.core.services.__init__.workspace_manager", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/services/__init__.py", "ce_id": "6306091b73426c38ae68acd9", "signature_position": [123, null], "body_position": [null, 126], "signature": "@classmethod\ndef workspace_manager(cls):", "ground_truth": "    @classmethod\n    def workspace_manager(cls):\n        \"\"\"Gets the workspace manager. \"\"\"\n        return cls._get_service(ServiceName.WORKSPACE_MANAGER)", "requirement": {"Functionality": "Gets the workspace manager.", "Arguments": ""}}
{"namespace": "6306091b73426c38ae68acda", "namespace_real": "infrared.core.services.__init__.plugins_manager", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/services/__init__.py", "ce_id": "6306091b73426c38ae68acda", "signature_position": [128, null], "body_position": [null, 131], "signature": "@classmethod\ndef plugins_manager(cls):", "ground_truth": "    @classmethod\n    def plugins_manager(cls):\n        \"\"\"Gets the plugin manager. \"\"\"\n        return cls._get_service(ServiceName.PLUGINS_MANAGER)", "requirement": {"Functionality": "Gets the plugin manager.", "Arguments": ""}}
{"namespace": "6306091c73426c38ae68acdc", "namespace_real": "infrared.core.utils.validators.validate_from_content", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/utils/validators.py", "ce_id": "6306091c73426c38ae68acdc", "signature_position": [96, null], "body_position": [null, 136], "signature": "@classmethod\ndef validate_from_content(cls, spec_content=None):", "ground_truth": "    @classmethod\n    def validate_from_content(cls, spec_content=None):\n        \"\"\"validates that spec (YAML) content has all required fields\n\n        :param spec_content: content of spec file\n        :raise IRValidatorException: when mandatory data\n        is missing in spec file\n        :return: Dictionary with data loaded from a spec (YAML) file\n        \"\"\"\n        if spec_content is None:\n            raise IRValidatorException(\n                \"Plugin spec content is missing\")\n\n        spec_dict = yaml.safe_load(spec_content)\n\n        if not isinstance(spec_dict, dict):\n            raise IRValidatorException(\n                \"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        # check if new spec file structure\n        try:\n            if \"config\" in spec_dict:\n                jsonschema.validate(spec_dict,\n                                    cls.SCHEMA_WITH_CONFIG)\n            else:\n                jsonschema.validate(spec_dict,\n                                    cls.SCHEMA_WITHOUT_CONFIG)\n\n        except jsonschema.exceptions.ValidationError as error:\n            raise IRValidatorException(\n                \"{} in file:\\n{}\".format(error.message, spec_content))\n\n        subparsers_key = \"subparsers\"\n        if (\"description\" not in spec_dict and \"description\"\n                not in list(spec_dict[subparsers_key].values())[0]):\n            raise IRValidatorException(\n                \"Required key 'description' is missing for supbarser '{}' in \"\n                \"spec file: {}\".format(\n                    list(spec_dict[subparsers_key].keys())[0], spec_content))\n\n        return spec_dict", "requirement": {"Functionality": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "Arguments": ""}}
{"namespace": "6306091c73426c38ae68acdd", "namespace_real": "infrared.core.utils.validators.validate_from_file", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/utils/validators.py", "ce_id": "6306091c73426c38ae68acdd", "signature_position": [12, null], "body_position": [null, 31], "signature": "@classmethod\ndef validate_from_file(cls, yaml_file=None):", "ground_truth": "    @classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \"\"\"Loads & validates that a YAML file has all required fields\n\n        :param yaml_file: Path to YAML file\n        :raise IRValidatorException: when mandatory data is missing in file\n        :return: Dictionary with data loaded from a YAML file\n        \"\"\"\n        if yaml_file is None:\n            raise IRValidatorException(\n                \"YAML file is missing\")\n\n        if not os.path.isfile(yaml_file):\n            raise IRValidatorException(\n                \"The YAML file doesn't exist: {}\".format(yaml_file))\n\n        with open(yaml_file) as fp:\n            spec_dict = cls.validate_from_content(fp.read())\n\n        return spec_dict", "requirement": {"Functionality": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "Arguments": ""}}
{"namespace": "6306091d73426c38ae68ace5", "namespace_real": "infrared.core.inspector.helper._include_groups", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/helper.py", "ce_id": "6306091d73426c38ae68ace5", "signature_position": [98, null], "body_position": [null, 118], "signature": "def _include_groups(self, parser_dict):", "ground_truth": "    def _include_groups(self, parser_dict):\n        \"\"\"Resolves the include dict directive in the spec files. \"\"\"\n        for group in parser_dict.get('include_groups', []):\n            # ensure we have that group\n            grp_dict = next(\n                (grp for grp in self.spec_dict.get('shared_groups', [])\n                 if grp['title'] == group),\n                None)\n            if grp_dict is None:\n                raise SpecParserException(\n                    \"Unable to include group '{}' in '{}' parser. \"\n                    \"Group was not found!\".format(\n                        group,\n                        parser_dict['name']))\n\n            for option in grp_dict.get('options', {}).values():\n                option['is_shared_group_option'] = True\n\n            parser_groups_list = parser_dict.get('groups', [])\n            parser_groups_list.append(deepcopy(grp_dict))\n            parser_dict['groups'] = parser_groups_list", "requirement": {"Functionality": "Resolves the include dict directive in the spec files.", "Arguments": ""}}
{"namespace": "6306092373426c38ae68acfa", "namespace_real": "infrared.core.inspector.inspector.get_spec_defaults", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092373426c38ae68acfa", "signature_position": [89, null], "body_position": [null, 111], "signature": "def get_spec_defaults(self):", "ground_truth": "    def get_spec_defaults(self):\n        \"\"\"Resolve arguments' values from spec and other sources. \"\"\"\n\n        def spec_default_getter(option):\n            \"\"\"Getter function to retrieve the default value from spec.\n\n            :param option: argument name\n            \"\"\"\n\n            # first try to get environment variable with IR_ prefix\n            default_value = SpecParser.get_env_option(option['name'])\n            if default_value is not None:\n                LOG.info(\n                    \"[environ] Loading '{0}' default value\"\n                    \" '{1}' from the environment variable\".format(\n                        option['name'], default_value))\n            elif option.get('default', None) is not None:\n                default_value = option['default']\n            elif option.get('action', None) in ['store_true']:\n                default_value = False\n            return default_value\n\n        return self._get_defaults(spec_default_getter)", "requirement": {"Functionality": "Resolve arguments' values from spec and other sources.", "Arguments": ""}}
{"namespace": "6306092973426c38ae68ad01", "namespace_real": "infrared.core.inspector.inspector.get_deprecated_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092973426c38ae68ad01", "signature_position": [118, null], "body_position": [null, 126], "signature": "def get_deprecated_args(self):", "ground_truth": "    def get_deprecated_args(self):\n        \"\"\"Returning dict with options which deprecate others. \"\"\"\n\n        result = collections.defaultdict(dict)\n        for parser, option in self.spec_helper.iterate_option_specs():\n            if option.get('deprecates') is not None:\n                result[option.get('deprecates')] = option.get('name')\n\n        return result", "requirement": {"Functionality": "Returning dict with options which deprecate others.", "Arguments": ""}}
{"namespace": "6306092c73426c38ae68ad02", "namespace_real": "infrared.core.inspector.inspector.validate_arg_deprecation", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092c73426c38ae68ad02", "signature_position": [344, null], "body_position": [null, 372], "signature": "def validate_arg_deprecation(self, cli_args, answer_file_args):", "ground_truth": "    def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \"\"\"Validates and prints the deprecated arguments.\n\n        :param cli_args: the dict of arguments from cli\n        :param answer_file_args:  the dict of arguments from files\n        \"\"\"\n\n        for deprecated, deprecates in self.get_deprecated_args().items():\n            for input_args in (answer_file_args.items(), cli_args.items()):\n                for command, command_dict in input_args:\n                    if deprecated in command_dict:\n                        if deprecates in command_dict:\n                            raise exceptions.IRDeprecationException(\n                                \"[{}] Argument '{}' deprecates '{}',\"\n                                \" please use only the new one.\".format(\n                                    command, deprecated, deprecates))\n\n                        if deprecated in answer_file_args[command]:\n                            answer_file_args[command][deprecates] = \\\n                                answer_file_args[command][deprecated]\n\n                        if deprecated in cli_args[command]:\n                            cli_args[command][deprecates] = \\\n                                cli_args[command][deprecated]\n\n                        LOG.warning(\n                            \"[{}] Argument '{}' was deprecated,\"\n                            \" please use '{}'.\".format(\n                                command, deprecated, deprecates))", "requirement": {"Functionality": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "Arguments": ""}}
{"namespace": "6306092d73426c38ae68ad04", "namespace_real": "infrared.core.inspector.helper.get_parser_option_specs", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/helper.py", "ce_id": "6306092d73426c38ae68ad04", "signature_position": [54, null], "body_position": [null, 65], "signature": "def get_parser_option_specs(self, command_name):", "ground_truth": "    def get_parser_option_specs(self, command_name):\n        \"\"\"Gets all the options for the specified command\n\n        :param command_name: the command name (main, virsh, ospd, etc...)\n        :return: the list of all command options\n        \"\"\"\n        options = []\n        for parser in self.iterate_parsers():\n            if parser['name'] == command_name:\n                options = self._get_all_options_spec(parser)\n                break\n        return options", "requirement": {"Functionality": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "Arguments": ""}}
{"namespace": "6306092d73426c38ae68ad05", "namespace_real": "infrared.core.inspector.helper.get_option_spec", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/helper.py", "ce_id": "6306092d73426c38ae68ad05", "signature_position": [67, null], "body_position": [null, 72], "signature": "def get_option_spec(self, command_name, argument_name):", "ground_truth": "    def get_option_spec(self, command_name, argument_name):\n        \"\"\"Gets the specification for the specified option name. \"\"\"\n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})", "requirement": {"Functionality": "Gets the specification for the specified option name.", "Arguments": ""}}
{"namespace": "6306092d73426c38ae68ad06", "namespace_real": "infrared.core.inspector.inspector.get_silent_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092d73426c38ae68ad06", "signature_position": [615, null], "body_position": [null, 631], "signature": "def get_silent_args(self, args):", "ground_truth": "    def get_silent_args(self, args):\n        \"\"\"list of silenced argument\n\n        :param args: The received arguments.\n        :return: list, slienced argument names\n        \"\"\"\n        silent_args_names = []\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if arg_spec and 'silent' in arg_spec and \\\n                    self.spec_helper.get_option_state(\n                        parser_name,\n                        arg_name,\n                        args) == helper.OptionState['IS_SET']:\n                silent_args_names.extend(arg_spec['silent'])\n\n        return list(set(silent_args_names))", "requirement": {"Functionality": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "Arguments": ""}}
{"namespace": "6306092d73426c38ae68ad07", "namespace_real": "infrared.core.inspector.inspector.validate_requires_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092d73426c38ae68ad07", "signature_position": [448, null], "body_position": [null, 486], "signature": "def validate_requires_args(self, args):", "ground_truth": "    def validate_requires_args(self, args):\n        \"\"\"Check if all the required arguments have been provided. \"\"\"\n\n        silent_args = self.get_silent_args(args)\n\n        def validate_parser(parser_name, expected_options, parser_args):\n            \"\"\"Helper method to resolve dict_merge. \"\"\"\n\n            result = collections.defaultdict(list)\n            condition_req_args = self._get_conditionally_required_args(\n                parser_name, expected_options, args)\n\n            for option in expected_options:\n                name = option['name']\n\n                # check required options.\n                if (option.get('required', False) and\n                    name not in parser_args or\n                    option['name'] in condition_req_args) and \\\n                        name not in silent_args:\n                    result[parser_name].append(name)\n\n            return result\n\n        res = {}\n        for command_data in self.spec_helper.iterate_parsers():\n            cmd_name = command_data['name']\n            if cmd_name in args:\n                dict_utils.dict_merge(\n                    res,\n                    validate_parser(\n                        cmd_name,\n                        self.spec_helper.get_parser_option_specs(cmd_name),\n                        args[cmd_name]))\n\n        missing_args = dict((cmd_name, args)\n                            for cmd_name, args in res.items() if len(args) > 0)\n        if missing_args:\n            raise exceptions.IRRequiredArgsMissingException(missing_args)", "requirement": {"Functionality": "Check if all the required arguments have been provided.", "Arguments": ""}}
{"namespace": "6306092d73426c38ae68ad08", "namespace_real": "infrared.core.inspector.inspector._get_conditionally_required_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092d73426c38ae68ad08", "signature_position": [402, null], "body_position": [null, 446], "signature": "def _get_conditionally_required_args(self, command_name, options_spec, args):", "ground_truth": "    def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \"\"\"List arguments with ``required_when`` condition matched.\n\n        :param command_name: the command name.\n        :param options_spec:  the list of command spec options.\n        :param args: the received input arguments\n        :return: list, list of argument names with matched ``required_when``\n            condition\n        \"\"\"\n        opts_names = [option_spec['name'] for option_spec in options_spec]\n        missing_args = []\n        for option_spec in options_spec:\n            option_results = []\n            if option_spec and 'required_when' in option_spec:\n                req_when_args = [option_spec['required_when']] \\\n                    if not type(option_spec['required_when']) is list \\\n                    else option_spec['required_when']\n\n                # validate conditions\n                for req_when_arg in req_when_args:\n                    splited_args_list = req_when_arg.split()\n                    for idx, req_arg in enumerate(splited_args_list):\n                        if req_arg in opts_names:\n                            splited_args_list[idx] = \\\n                                args.get(command_name, {}).get(req_arg.strip())\n                        if splited_args_list[idx] is None:\n                            option_results.append(False)\n                            break\n                        splited_args_list[idx] = str(splited_args_list[idx])\n                        if (splited_args_list[idx] not in ['and', 'or'] and\n                            not any(\n                                (c in '<>=') for c in splited_args_list[idx])):\n                            splited_args_list[idx] = \"'{0}'\".format(\n                                yaml.safe_load(splited_args_list[idx]))\n                    else:\n                        option_results.append(\n                            eval(' '.join(splited_args_list)))\n                if all(option_results) and \\\n                        self.spec_helper.get_option_state(\n                            command_name,\n                            option_spec['name'],\n                            args) == helper.OptionState['NOT_SET']:\n                    missing_args.append(option_spec['name'])\n        return missing_args", "requirement": {"Functionality": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "Arguments": ""}}
{"namespace": "6306092e73426c38ae68ad09", "namespace_real": "infrared.core.inspector.inspector.validate_length_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092e73426c38ae68ad09", "signature_position": [488, null], "body_position": [null, 514], "signature": "def validate_length_args(self, args):", "ground_truth": "    def validate_length_args(self, args):\n        \"\"\"Check if value of arguments is not longer than length specified.\n\n        :param args: The received arguments.\n        \"\"\"\n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_name):\n                if 'length' not in spec_option:\n                    # skip options that does not contain length\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    # resolve length\n                    length = spec_option['length']\n                    option_value = parser_dict[option_name]\n                    if len(option_value) > int(length):\n                        # found invalid option, append to list of invalid opts\n                        invalid_options.append((\n                            option_name,\n                            option_value,\n                            length\n                        ))\n        if invalid_options:\n            # raise exception with all arguments that exceed length\n            raise exceptions.IRInvalidLengthException(invalid_options)", "requirement": {"Functionality": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "Arguments": ""}}
{"namespace": "6306092e73426c38ae68ad0a", "namespace_real": "infrared.core.inspector.inspector.validate_choices_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092e73426c38ae68ad0a", "signature_position": [516, null], "body_position": [null, 542], "signature": "def validate_choices_args(self, args):", "ground_truth": "    def validate_choices_args(self, args):\n        \"\"\"Check if value of choice arguments is one of the available choices.\n\n        :param args: The received arguments.\n        \"\"\"\n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_name):\n                if 'choices' not in spec_option:\n                    # skip options that does not contain choices\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    # resolve choices\n                    choices = spec_option['choices']\n                    option_value = parser_dict[option_name]\n                    if option_value not in choices:\n                        # found invalid option, append to list of invalid opts\n                        invalid_options.append((\n                            option_name,\n                            option_value,\n                            choices\n                        ))\n        if invalid_options:\n            # raise exception with all arguments that contains invalid choices\n            raise exceptions.IRInvalidChoiceException(invalid_options)", "requirement": {"Functionality": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "Arguments": ""}}
{"namespace": "6306092e73426c38ae68ad0b", "namespace_real": "infrared.core.inspector.inspector.validate_min_max_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092e73426c38ae68ad0b", "signature_position": [544, null], "body_position": [null, 613], "signature": "def validate_min_max_args(self, args):", "ground_truth": "    def validate_min_max_args(self, args):\n        \"\"\"Check if value of arguments is between minimum and maximum values.\n\n        :param args: The received arguments.\n        \"\"\"\n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_name):\n                if all([key not in spec_option\n                        for key in ('maximum', 'minimum')]):\n                    # skip options that does not contain minimum or maximum\n                    continue\n                option_name = spec_option['name']\n\n                if option_name in parser_dict:\n                    option_value = parser_dict[option_name]\n                    min_value = spec_option.get('minimum')\n                    max_value = spec_option.get('maximum')\n                    # handle empty values in spec files which load as None\n                    min_value = '' if 'minimum' in spec_option \\\n                                      and min_value is None else min_value\n                    max_value = '' if 'maximum' in spec_option \\\n                                      and max_value is None else max_value\n\n                    values = {\n                        \"value\": option_value,\n                        \"maximum\": max_value,\n                        \"minimum\": min_value\n                    }\n\n                    # make sure that values are numbers\n                    is_all_values_numbers = True\n                    for name, num in values.items():\n                        if num is not None \\\n                                and (isinstance(num, bool) or\n                                     not isinstance(num, (int, float))):\n                            invalid_options.append((\n                                option_name,\n                                name,\n                                \"number\",\n                                type(num).__name__\n                            ))\n                            is_all_values_numbers = False\n\n                    if not is_all_values_numbers:\n                        # don't continue to min max checks since some of the\n                        # values are not numbers\n                        continue\n\n                    # check bigger than minimum\n                    if min_value is not None and option_value < min_value:\n                        invalid_options.append((\n                            option_name,\n                            \"minimum\",\n                            min_value,\n                            option_value\n                        ))\n                    # check smaller than maximum\n                    if max_value is not None and option_value > max_value:\n                        invalid_options.append((\n                            option_name,\n                            \"maximum\",\n                            max_value,\n                            option_value\n                        ))\n\n        if invalid_options:\n            # raise exception with all arguments that contains invalid choices\n            raise exceptions.IRInvalidMinMaxRangeException(invalid_options)", "requirement": {"Functionality": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "Arguments": ""}}
{"namespace": "6306092e73426c38ae68ad0d", "namespace_real": "infrared.core.inspector.inspector.create_complex_argumet_type", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092e73426c38ae68ad0d", "signature_position": [276, null], "body_position": [null, 295], "signature": "def create_complex_argumet_type(self, subcommand, type_name, option_name, spec_option):", "ground_truth": "    def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \"\"\"Build the complex argument type\n\n        :param subcommand: the command name\n        :param type_name: the complex type name\n        :param option_name: the option name\n        :param spec_option: option's specifications\n        :return: the complex type instance\n        \"\"\"\n        complex_action = COMPLEX_TYPES.get(\n            type_name, None)\n        if complex_action is None:\n            raise exceptions.SpecParserException(\n                \"Unknown complex type: {}\".format(type_name))\n        return complex_action(\n            option_name,\n            (self.vars, self.defaults, self.plugin_path),\n            subcommand,\n            spec_option)", "requirement": {"Functionality": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "Arguments": ""}}
{"namespace": "6306092e73426c38ae68ad0f", "namespace_real": "infrared.core.inspector.inspector.get_nested_custom_and_control_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "6306092e73426c38ae68ad0f", "signature_position": [633, null], "body_position": [null, 681], "signature": "def get_nested_custom_and_control_args(self, args):", "ground_truth": "    def get_nested_custom_and_control_args(self, args):\n        \"\"\"Split input arguments to control nested and custom.\n\n        Controls arguments: control the IR behavior. These arguments\n            will not be put into the spec yml file\n        Nested arguments: are used by the Ansible playbooks and will be put\n            into the spec yml file.\n        Custom arguments: Custom ansible variables to be used instead of the\n            normal nested usage.\n\n        :param args: the collected list of args.\n        :return: (dict, dict): flat dicts (control_args, nested_args)\n        \"\"\"\n        # returns flat dicts\n        nested = {}\n        control_args = {}\n        custom_args = {}\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if all([arg_spec, arg_spec.get('type', None),\n                    arg_spec.get('type', None) in\n                    [ctype_name for ctype_name, klass in\n                     COMPLEX_TYPES.items() if klass.is_nested]\n                    ]) or ('is_shared_group_option' not in arg_spec):\n                if arg_name in nested:\n                    LOG.warning(\n                        \"Duplicated nested argument found:'{}'. \"\n                        \"Using old value: '{}'\".format(\n                            arg_name, nested[arg_name]))\n                elif arg_name in custom_args:\n                    LOG.warning(\n                        \"Duplicated custom argument found:'{}'. \"\n                        \"Using old value: '{}'\".format(\n                            arg_name, custom_args[arg_name]))\n                else:\n                    if \"ansible_variable\" in arg_spec:\n                        custom_args[arg_spec[\"ansible_variable\"]] = arg_value\n                    else:\n                        nested[arg_name] = arg_value\n            else:\n                if arg_name in control_args:\n                    LOG.warning(\n                        \"Duplicated control argument found: '{}'. Using \"\n                        \"old value: '{}'\".format(\n                            arg_name, control_args[arg_name]))\n                else:\n                    control_args[arg_name] = arg_value\n\n        return nested, control_args, custom_args", "requirement": {"Functionality": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "Arguments": ""}}
{"namespace": "6306092e73426c38ae68ad11", "namespace_real": "infrared.core.settings.merge_extra_vars", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/settings.py", "ce_id": "6306092e73426c38ae68ad11", "signature_position": [49, null], "body_position": [null, 85], "signature": "@staticmethod\ndef merge_extra_vars(vars_dict, extra_vars=None):", "ground_truth": "    @staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \"\"\"Extend ``vars_dict`` with ``extra-vars``\n\n        :param vars_dict: Dictionary to merge extra-vars into\n        :param extra_vars: List of extra-vars\n        \"\"\"\n        for extra_var in extra_vars or []:\n            if extra_var.startswith('@'):\n                with open(extra_var[1:]) as f_obj:\n                    loaded_yml = yaml.safe_load(f_obj)\n\n                dict_utils.dict_merge(\n                    vars_dict,\n                    loaded_yml,\n                    conflict_resolver=dict_utils.ConflictResolver.\n                    unique_append_list_resolver)\n\n            else:\n                if '=' not in extra_var:\n                    raise exceptions.IRExtraVarsException(extra_var)\n                key, value = extra_var.split(\"=\", 1)\n                if value.startswith('@'):\n                    with open(value[1:]) as f_obj:\n                        loaded_yml = yaml.safe_load(f_obj)\n\n                    tmp_dict = {}\n                    dict_utils.dict_insert(tmp_dict, loaded_yml, *key.split(\".\"))\n\n                    dict_utils.dict_merge(\n                        vars_dict,\n                        tmp_dict,\n                        conflict_resolver=dict_utils.ConflictResolver.\n                        unique_append_list_resolver)\n\n                else:\n                    dict_utils.dict_insert(vars_dict, value, *key.split(\".\"))", "requirement": {"Functionality": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "Arguments": ""}}
{"namespace": "6306092f73426c38ae68ad13", "namespace_real": "infrared.core.execute.ansible_playbook", "type": "function", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/execute.py", "ce_id": "6306092f73426c38ae68ad13", "signature_position": [130, null], "body_position": [null, 168], "signature": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None, extra_vars=None, ansible_args=None):", "ground_truth": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n     :param ir_workspace: An Infrared Workspace object represents the active\n     workspace\n     :param ir_plugin: An InfraredPlugin object of the current plugin\n     :param playbook_path: the playbook to invoke\n     :param verbose: Ansible verbosity level\n     :param extra_vars: dict. Passed to Ansible as extra-vars\n     :param ansible_args: dict of ansible-playbook arguments to plumb down\n         directly to Ansible.\n    \"\"\"\n    ansible_args = ansible_args or []\n    LOG.debug(\"Additional ansible args: {}\".format(ansible_args))\n\n    # hack for verbosity\n    from ansible.utils.display import Display\n    display = Display(verbosity=verbose)\n    import __main__ as main\n    setattr(main, \"display\", display)\n\n    # TODO(yfried): Use proper ansible API instead of emulating CLI\n    cli_args = ['execute',\n                playbook_path,\n                '--inventory', ir_workspace.inventory]\n\n    # infrared should not change ansible verbosity unless user specifies that\n    if verbose:\n        cli_args.append('-' + 'v' * int(verbose))\n\n    cli_args.extend(ansible_args)\n\n    results = _run_playbook(cli_args, vars_dict=extra_vars or {},\n                            ir_workspace=ir_workspace, ir_plugin=ir_plugin)\n\n    if results:\n        LOG.error('Playbook \"%s\" failed!' % playbook_path)\n    return results", "requirement": {"Functionality": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "Arguments": ""}}
{"namespace": "6306093273426c38ae68ad15", "namespace_real": "infrared.core.execute._run_playbook", "type": "function", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/execute.py", "ce_id": "6306093273426c38ae68ad15", "signature_position": [171, null], "body_position": [null, 301], "signature": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):", "ground_truth": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \"\"\"Runs ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list  of command line arguments\n    :param ir_workspace: An Infrared Workspace object represents the active\n     workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n\n    # TODO(yfried): use ansible vars object instead of tmpfile\n    # NOTE(oanufrii): !!!this import should be exactly here!!!\n    #                 Ansible uses 'display' singleton from '__main__' and\n    #                 gets it on module level. While we monkeypatching our\n    #                 '__main__' in 'ansible_playbook' function import of\n    #                 PlaybookCLI shoul be after that, to get patched\n    #                 '__main__'. Otherwise ansible gets unpatched '__main__'\n    #                 and creates new 'display' object with default (0)\n    #                 verbosity.\n    # NOTE(afazekas): GlobalCLIArgs gets value only once per invocation, but\n    # since it has singleton decorator, so it would remember to old arguments in different tests\n    # removing the singleton decorator\n    try:\n        from ansible.utils import context_objects\n        context_objects.GlobalCLIArgs = context_objects.CLIArgs\n    except ImportError:\n        # older version\n        pass\n\n    from ansible.cli.playbook import PlaybookCLI\n    from ansible.errors import AnsibleOptionsError\n    from ansible.errors import AnsibleParserError\n\n    with tempfile.NamedTemporaryFile(\n            mode='w+', prefix=\"ir-settings-\", delete=True) as tmp:\n        tmp.write(yaml.safe_dump(vars_dict, default_flow_style=False))\n        # make sure created file is readable.\n        tmp.flush()\n        cli_args.extend(['--extra-vars', \"@\" + tmp.name])\n\n        if not bool(strtobool(os.environ.get('IR_NO_EXTRAS', 'no'))):\n            ir_extras = {\n                'infrared': {\n                    'python': {\n                        'executable': sys.executable,\n                        'version': {\n                            'full': sys.version.split()[0],\n                            'major': sys.version_info.major,\n                            'minor': sys.version_info.minor,\n                            'micro': sys.version_info.micro,\n                        }\n                    }\n                }\n            }\n            cli_args.extend(['--extra-vars', str(ir_extras)])\n\n        cli = PlaybookCLI(cli_args)\n        LOG.debug('Starting ansible cli with args: {}'.format(cli_args[1:]))\n        try:\n            cli.parse()\n\n            stdout = not bool(\n                strtobool(os.environ.get('IR_ANSIBLE_NO_STDOUT', 'no')))\n            stderr = not bool(\n                strtobool(os.environ.get('IR_ANSIBLE_NO_STDERR', 'no')))\n\n            ansible_outputs_dir = \\\n                os.path.join(ir_workspace.path, 'ansible_outputs')\n            ansible_vars_dir = \\\n                os.path.join(ir_workspace.path, 'ansible_vars')\n\n            timestamp = datetime.utcnow().strftime(\"%Y-%m-%d_%H-%M-%S.%f\")\n            filename_template = \\\n                \"ir_{timestamp}_{plugin_name}{postfix}.{file_ext}\"\n\n            for _dir in (ansible_outputs_dir, ansible_vars_dir):\n                try:\n                    os.makedirs(_dir)\n                except OSError as e:\n                    if e.errno != errno.EEXIST:\n                        raise\n\n            if bool(strtobool(os.environ.get('IR_GEN_VARS_JSON', 'no'))):\n                filename = filename_template.format(\n                    timestamp=timestamp,\n                    plugin_name=ir_plugin.name,\n                    postfix='',\n                    file_ext='json'\n                )\n                vars_file = os.path.join(ansible_vars_dir, filename)\n                with open(vars_file, 'w') as fp:\n                    json.dump(vars_dict, fp, indent=4, sort_keys=True)\n\n            with IRSTDFDManager(stdout=stdout, stderr=stderr) as fd_manager:\n\n                if bool(strtobool(os.environ.get(\n                        'IR_ANSIBLE_LOG_OUTPUT', 'no'))):\n                    filename = filename_template.format(\n                        timestamp=timestamp,\n                        plugin_name=ir_plugin.name,\n                        postfix='',\n                        file_ext='log'\n                    )\n                    log_file = os.path.join(ansible_outputs_dir, filename)\n                    fd_manager.add(open(log_file, 'w'))\n\n                if bool(strtobool(os.environ.get(\n                        'IR_ANSIBLE_LOG_OUTPUT_NO_ANSI', 'no'))):\n                    filename = filename_template.format(\n                        timestamp=timestamp,\n                        plugin_name=ir_plugin.name,\n                        postfix='_no_ansi',\n                        file_ext='log'\n                    )\n                    log_file = os.path.join(ansible_outputs_dir, filename)\n                    fd_manager.add(NoAnsiFile(open(log_file, 'w')))\n\n                # Return the result:\n                # 0: Success\n                # 1: \"Error\"\n                # 2: Host failed\n                # 3: Unreachable\n                # 4: Parser Error\n                # 5: Options error\n\n                return cli.run()\n\n        except (AnsibleParserError, AnsibleOptionsError) as error:\n            LOG.error('{}: {}'.format(type(error), error))\n            raise error", "requirement": {"Functionality": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "Arguments": ""}}
{"namespace": "63060ada73426c38ae68ad31", "namespace_real": "infrared.core.inspector.inspector._convert_non_cli_args", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/inspector/inspector.py", "ce_id": "63060ada73426c38ae68ad31", "signature_position": [699, null], "body_position": [null, 712], "signature": "def _convert_non_cli_args(self, parser_name, values_dict):", "ground_truth": "    def _convert_non_cli_args(self, parser_name, values_dict):\n        \"\"\"Casts arguments to correct types by modifying values_dict param.\n\n        By default all the values are strings.\n\n        :param parser_name: The command name, e.g. main, virsh, ospd, etc\n        :param values_dict: The dict of with arguments\n       \"\"\"\n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                    file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)", "requirement": {"Functionality": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "Arguments": ""}}
{"namespace": "63060b1a73426c38ae68ad3e", "namespace_real": "tests.test_plugins.get_plugin_spec_flatten_dict", "type": "function", "project_path": "redhat-openstack/infrared", "completion_path": "tests/test_plugins.py", "ce_id": "63060b1a73426c38ae68ad3e", "signature_position": [139, null], "body_position": [null, 165], "signature": "def get_plugin_spec_flatten_dict(plugin_dir):", "ground_truth": "def get_plugin_spec_flatten_dict(plugin_dir):\n    \"\"\"Creates a flat dict from the plugin spec\n\n    :param plugin_dir: A path to the plugin's dir\n    :return: A flatten dictionary contains the plugin's properties\n    \"\"\"\n    with open(os.path.join(plugin_dir, PLUGIN_SPEC)) as fp:\n        spec_yaml = yaml.safe_load(fp)\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] \\\n        if \"description\" in spec_yaml \\\n        else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] \\\n        if \"config\" in spec_yaml \\\n        else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        name=plugin_name,\n        dir=plugin_dir,\n        description=plugin_description,\n        type=plugin_type\n    )\n\n    return plugin_spec_dict", "requirement": {"Functionality": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "Arguments": ""}}
{"namespace": "63060b1b73426c38ae68ad42", "namespace_real": "infrared.core.services.ansible_config.inject_config", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/core/services/ansible_config.py", "ce_id": "63060b1b73426c38ae68ad42", "signature_position": [94, null], "body_position": [null, 97], "signature": "def inject_config(self):", "ground_truth": "    def inject_config(self):\n        \"\"\"Set the environment variable for config path, if it is undefined.\"\"\"\n        if os.environ.get('ANSIBLE_CONFIG', '') == '':\n            os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path", "requirement": {"Functionality": "Set the environment variable for config path, if it is undefined.", "Arguments": ""}}
{"namespace": "63060b1b73426c38ae68ad43", "namespace_real": "infrared.main.extend_cli", "type": "class", "project_path": "redhat-openstack/infrared", "completion_path": "infrared/main.py", "ce_id": "63060b1b73426c38ae68ad43", "signature_position": [59, null], "body_position": [null, 156], "signature": "def extend_cli(self, root_subparsers):", "ground_truth": "    def extend_cli(self, root_subparsers):\n        workspace_plugin = root_subparsers.add_parser(\n            self.name,\n            help=self.kwargs[\"description\"],\n            **self.kwargs)\n        workspace_subparsers = workspace_plugin.add_subparsers(dest=\"command0\")\n\n        # create\n        create_parser = workspace_subparsers.add_parser(\n            'create', help='Creates a new workspace')\n        create_parser.add_argument(\"name\", help=\"Workspace name\")\n\n        # checkout\n        checkout_parser = workspace_subparsers.add_parser(\n            'checkout',\n            help='Switches workspace to the specified workspace')\n        checkout_parser.add_argument(\n            \"name\",\n            help=\"Workspace name\").completer = completers.workspace_list\n        checkout_parser.add_argument(\n            \"-c\", \"--create\", action='store_true', dest=\"checkout_create\",\n            help=\"Creates a workspace if not exists and \"\n                 \"switches to it\")\n\n        # inventory\n        inventory_parser = workspace_subparsers.add_parser(\n            'inventory',\n            help=\"prints workspace's inventory file\")\n        inventory_parser.add_argument(\n            \"name\", help=\"Workspace name\",\n            nargs=\"?\").completer = completers.workspace_list\n\n        # list\n        wrkspc_list_parser = workspace_subparsers.add_parser(\n            'list', help='Lists all the workspaces')\n        wrkspc_list_parser.add_argument(\n            \"--active\", action='store_true', dest='print_active',\n            help=\"Prints the active workspace only\")\n\n        # delete\n        delete_parser = workspace_subparsers.add_parser(\n            'delete', help='Deletes workspaces')\n        delete_parser.add_argument(\n            'name', nargs='+',\n            help=\"Workspace names\").completer = completers.workspace_list\n\n        # cleanup\n        cleanup_parser = workspace_subparsers.add_parser(\n            'cleanup', help='Removes all the files from workspace')\n        cleanup_parser.add_argument(\n            \"name\",\n            help=\"Workspace name\").completer = completers.workspace_list\n\n        # import settings\n        importer_parser = workspace_subparsers.add_parser(\n            'import', help='Import deployment configs.')\n        importer_parser.add_argument(\"filename\", help=\"Archive file name or URL.\")\n        importer_parser.add_argument(\n            \"-n\", \"--name\", dest=\"workspacename\",\n            help=\"Workspace name to import with. \"\n            \"If not specified - file name will be used.\")\n\n        # export settings\n        exporter_parser = workspace_subparsers.add_parser(\n            'export', help='Export deployment configurations.')\n        exporter_parser.add_argument(\n            \"-n\", \"--name\", dest=\"workspacename\",\n            help=\"Workspace name. If not sepecified - active \"\n            \"workspace will be used.\").completer = completers.workspace_list\n        exporter_parser.add_argument(\"-f\", \"--filename\", dest=\"filename\",\n                                     help=\"Archive file name.\")\n\n        exporter_parser.add_argument(\"-K\", \"--copy-keys\", dest=\"copykeys\",\n                                     action=\"store_true\",\n                                     help=\"Silently copy ssh keys \"\n                                     \"to workspace.\")\n        # node list\n        nodelist_parser = workspace_subparsers.add_parser(\n            'node-list',\n            help='List nodes, managed by workspace')\n        nodelist_parser.add_argument(\n            \"-n\", \"--name\",\n            help=\"Workspace name\").completer = completers.workspace_list\n        nodelist_parser.add_argument(\n            \"-g\", \"--group\",\n            help=\"List nodes in specific group\"\n        ).completer = completers.group_list\n        nodelist_parser.add_argument(\n            \"-f\", \"--format\", choices=['fancy', 'json'], default='fancy',\n            help=\"Output format\")\n\n        # group list\n        grouplist_parser = workspace_subparsers.add_parser(\n            'group-list',\n            help='List groups, managed by workspace')\n        grouplist_parser.add_argument(\n            \"-n\", \"--name\",\n            help=\"Workspace name\").completer = completers.workspace_list", "requirement": {"Functionality": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "Arguments": ""}}
{"namespace": "62ece4982e6aefcf4aabbd64", "namespace_real": "ocfl.dispositor.strip_root", "type": "class", "project_path": "zimeon/ocfl-py", "completion_path": "ocfl/dispositor.py", "ce_id": "62ece4982e6aefcf4aabbd64", "signature_position": [10, null], "body_position": [null, 15], "signature": "def strip_root(self, path, root):", "ground_truth": "    def strip_root(self, path, root):\n        \"\"\"Remove root from path, throw exception on failure.\"\"\"\n        root = root.rstrip(os.sep)  # ditch any trailing path separator\n        if os.path.commonprefix((path, root)) == root:\n            return os.path.relpath(path, start=root)\n        raise Exception(\"Path %s is not in root %s\" % (path, root))", "requirement": {"Functionality": "Remove root from path, throw exception on failure.", "Arguments": ""}}
